
linetracer_wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fe0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009bc  08008180  08008180  00009180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b3c  08008b3c  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008b3c  08008b3c  00009b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b44  08008b44  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b44  08008b44  00009b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b48  08008b48  00009b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008b4c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b78  200001d4  08008d20  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d4c  08008d20  0000ad4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e21f  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e6  00000000  00000000  00018423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  0001a710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b01  00000000  00000000  0001b528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178c8  00000000  00000000  0001c029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd04  00000000  00000000  000338f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090680  00000000  00000000  000435f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3c75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e84  00000000  00000000  000d3cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d8b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008168 	.word	0x08008168

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08008168 	.word	0x08008168

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <esp_at_command>:
static uint8_t data;
//static cb_data_t cb_data;
cb_data_t cb_data;
UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	807b      	strh	r3, [r7, #2]
    *length = 0;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 8000edc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	68b8      	ldr	r0, [r7, #8]
 8000ee4:	f005 f83e 	bl	8005f64 <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 8000ee8:	f240 4202 	movw	r2, #1026	@ 0x402
 8000eec:	2100      	movs	r1, #0
 8000eee:	4827      	ldr	r0, [pc, #156]	@ (8000f8c <esp_at_command+0xc4>)
 8000ef0:	f005 f838 	bl	8005f64 <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f7ff f9d3 	bl	80002a0 <strlen>
 8000efa:	4603      	mov	r3, r0
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	2364      	movs	r3, #100	@ 0x64
 8000f00:	68f9      	ldr	r1, [r7, #12]
 8000f02:	4823      	ldr	r0, [pc, #140]	@ (8000f90 <esp_at_command+0xc8>)
 8000f04:	f003 f99e 	bl	8004244 <HAL_UART_Transmit>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d031      	beq.n	8000f72 <esp_at_command+0xaa>
        return -1;
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f12:	e037      	b.n	8000f84 <esp_at_command+0xbc>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 8000f14:	4b1d      	ldr	r3, [pc, #116]	@ (8000f8c <esp_at_command+0xc4>)
 8000f16:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000f1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f1e:	d302      	bcc.n	8000f26 <esp_at_command+0x5e>
            return -2;
 8000f20:	f06f 0301 	mvn.w	r3, #1
 8000f24:	e02e      	b.n	8000f84 <esp_at_command+0xbc>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 8000f26:	491b      	ldr	r1, [pc, #108]	@ (8000f94 <esp_at_command+0xcc>)
 8000f28:	4818      	ldr	r0, [pc, #96]	@ (8000f8c <esp_at_command+0xc4>)
 8000f2a:	f005 f89f 	bl	800606c <strstr>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d002      	beq.n	8000f3a <esp_at_command+0x72>
            return -3;
 8000f34:	f06f 0302 	mvn.w	r3, #2
 8000f38:	e024      	b.n	8000f84 <esp_at_command+0xbc>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 8000f3a:	4917      	ldr	r1, [pc, #92]	@ (8000f98 <esp_at_command+0xd0>)
 8000f3c:	4813      	ldr	r0, [pc, #76]	@ (8000f8c <esp_at_command+0xc4>)
 8000f3e:	f005 f895 	bl	800606c <strstr>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d00d      	beq.n	8000f64 <esp_at_command+0x9c>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 8000f48:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <esp_at_command+0xc4>)
 8000f4a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000f4e:	461a      	mov	r2, r3
 8000f50:	490e      	ldr	r1, [pc, #56]	@ (8000f8c <esp_at_command+0xc4>)
 8000f52:	68b8      	ldr	r0, [r7, #8]
 8000f54:	f005 f91f 	bl	8006196 <memcpy>
            *length = cb_data.length;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <esp_at_command+0xc4>)
 8000f5a:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	801a      	strh	r2, [r3, #0]

            break;
 8000f62:	e00a      	b.n	8000f7a <esp_at_command+0xb2>
        }

        time_out -= 10;
 8000f64:	887b      	ldrh	r3, [r7, #2]
 8000f66:	3b0a      	subs	r3, #10
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 8000f6c:	200a      	movs	r0, #10
 8000f6e:	f001 fa59 	bl	8002424 <HAL_Delay>
    while(time_out > 0)
 8000f72:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	dccc      	bgt.n	8000f14 <esp_at_command+0x4c>
    }
    HAL_Delay(500);
 8000f7a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f7e:	f001 fa51 	bl	8002424 <HAL_Delay>
    return 0;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000680 	.word	0x20000680
 8000f90:	20000a84 	.word	0x20000a84
 8000f94:	08008180 	.word	0x08008180
 8000f98:	08008188 	.word	0x08008188

08000f9c <esp_reset>:

static int esp_reset(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000fa6:	1dba      	adds	r2, r7, #6
 8000fa8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fac:	490a      	ldr	r1, [pc, #40]	@ (8000fd8 <esp_reset+0x3c>)
 8000fae:	480b      	ldr	r0, [pc, #44]	@ (8000fdc <esp_reset+0x40>)
 8000fb0:	f7ff ff8a 	bl	8000ec8 <esp_at_command>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d002      	beq.n	8000fc0 <esp_reset+0x24>
    {
       return -1;
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbe:	e007      	b.n	8000fd0 <esp_reset+0x34>
    }
    return esp_at_command((uint8_t *)"AT\r\n", (uint8_t *)response, &length, 1000);
 8000fc0:	1dba      	adds	r2, r7, #6
 8000fc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc6:	4904      	ldr	r1, [pc, #16]	@ (8000fd8 <esp_reset+0x3c>)
 8000fc8:	4805      	ldr	r0, [pc, #20]	@ (8000fe0 <esp_reset+0x44>)
 8000fca:	f7ff ff7d 	bl	8000ec8 <esp_at_command>
 8000fce:	4603      	mov	r3, r0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000200 	.word	0x20000200
 8000fdc:	0800818c 	.word	0x0800818c
 8000fe0:	08008198 	.word	0x08008198

08000fe4 <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000ff2:	f107 020a 	add.w	r2, r7, #10
 8000ff6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ffa:	492d      	ldr	r1, [pc, #180]	@ (80010b0 <request_ip_addr+0xcc>)
 8000ffc:	482d      	ldr	r0, [pc, #180]	@ (80010b4 <request_ip_addr+0xd0>)
 8000ffe:	f7ff ff63 	bl	8000ec8 <esp_at_command>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 8001008:	482b      	ldr	r0, [pc, #172]	@ (80010b8 <request_ip_addr+0xd4>)
 800100a:	f004 feab 	bl	8005d64 <puts>
 800100e:	e049      	b.n	80010a4 <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 8001010:	492a      	ldr	r1, [pc, #168]	@ (80010bc <request_ip_addr+0xd8>)
 8001012:	4827      	ldr	r0, [pc, #156]	@ (80010b0 <request_ip_addr+0xcc>)
 8001014:	f004 ffce 	bl	8005fb4 <strtok>
 8001018:	6178      	str	r0, [r7, #20]

        if(is_debug)
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d03e      	beq.n	800109e <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	e009      	b.n	800103a <request_ip_addr+0x56>
                printf("%c", response[i]);
 8001026:	4a22      	ldr	r2, [pc, #136]	@ (80010b0 <request_ip_addr+0xcc>)
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4413      	add	r3, r2
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f004 fe3a 	bl	8005ca8 <putchar>
            for(int i = 0 ; i < length ; i++)
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	3301      	adds	r3, #1
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	897b      	ldrh	r3, [r7, #10]
 800103c:	461a      	mov	r2, r3
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4293      	cmp	r3, r2
 8001042:	dbf0      	blt.n	8001026 <request_ip_addr+0x42>
        }

        while(line != NULL)
 8001044:	e02b      	b.n	800109e <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 8001046:	491e      	ldr	r1, [pc, #120]	@ (80010c0 <request_ip_addr+0xdc>)
 8001048:	6978      	ldr	r0, [r7, #20]
 800104a:	f005 f80f 	bl	800606c <strstr>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d01f      	beq.n	8001094 <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 8001054:	491b      	ldr	r1, [pc, #108]	@ (80010c4 <request_ip_addr+0xe0>)
 8001056:	6978      	ldr	r0, [r7, #20]
 8001058:	f004 ffac 	bl	8005fb4 <strtok>
                ip = strtok(NULL, "\"");
 800105c:	4919      	ldr	r1, [pc, #100]	@ (80010c4 <request_ip_addr+0xe0>)
 800105e:	2000      	movs	r0, #0
 8001060:	f004 ffa8 	bl	8005fb4 <strtok>
 8001064:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 8001066:	4918      	ldr	r1, [pc, #96]	@ (80010c8 <request_ip_addr+0xe4>)
 8001068:	68f8      	ldr	r0, [r7, #12]
 800106a:	f7ff f8b9 	bl	80001e0 <strcmp>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00f      	beq.n	8001094 <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 8001074:	2210      	movs	r2, #16
 8001076:	2100      	movs	r1, #0
 8001078:	4814      	ldr	r0, [pc, #80]	@ (80010cc <request_ip_addr+0xe8>)
 800107a:	f004 ff73 	bl	8005f64 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f7ff f90e 	bl	80002a0 <strlen>
 8001084:	4603      	mov	r3, r0
 8001086:	461a      	mov	r2, r3
 8001088:	68f9      	ldr	r1, [r7, #12]
 800108a:	4810      	ldr	r0, [pc, #64]	@ (80010cc <request_ip_addr+0xe8>)
 800108c:	f005 f883 	bl	8006196 <memcpy>
                    return 0;
 8001090:	2300      	movs	r3, #0
 8001092:	e009      	b.n	80010a8 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 8001094:	4909      	ldr	r1, [pc, #36]	@ (80010bc <request_ip_addr+0xd8>)
 8001096:	2000      	movs	r0, #0
 8001098:	f004 ff8c 	bl	8005fb4 <strtok>
 800109c:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1d0      	bne.n	8001046 <request_ip_addr+0x62>
        }
    }

    return -1;
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000200 	.word	0x20000200
 80010b4:	080081dc 	.word	0x080081dc
 80010b8:	080081e8 	.word	0x080081e8
 80010bc:	080081d0 	.word	0x080081d0
 80010c0:	08008208 	.word	0x08008208
 80010c4:	080081d8 	.word	0x080081d8
 80010c8:	080081a0 	.word	0x080081a0
 80010cc:	200001f0 	.word	0x200001f0

080010d0 <esp_client_conn>:
int esp_client_conn()
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b092      	sub	sp, #72	@ 0x48
 80010d4:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	223c      	movs	r2, #60	@ 0x3c
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f004 ff3e 	bl	8005f64 <memset>
  uint16_t length = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 80010ec:	f107 0008 	add.w	r0, r7, #8
 80010f0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80010f4:	4a09      	ldr	r2, [pc, #36]	@ (800111c <esp_client_conn+0x4c>)
 80010f6:	490a      	ldr	r1, [pc, #40]	@ (8001120 <esp_client_conn+0x50>)
 80010f8:	f004 fe3c 	bl	8005d74 <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 80010fc:	1dba      	adds	r2, r7, #6
 80010fe:	f107 0008 	add.w	r0, r7, #8
 8001102:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001106:	4907      	ldr	r1, [pc, #28]	@ (8001124 <esp_client_conn+0x54>)
 8001108:	f7ff fede 	bl	8000ec8 <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 800110c:	4806      	ldr	r0, [pc, #24]	@ (8001128 <esp_client_conn+0x58>)
 800110e:	f000 f92d 	bl	800136c <esp_send_data>
	return 0;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	3748      	adds	r7, #72	@ 0x48
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	08008214 	.word	0x08008214
 8001120:	08008220 	.word	0x08008220
 8001124:	20000200 	.word	0x20000200
 8001128:	0800823c 	.word	0x0800823c

0800112c <drv_esp_init>:

int drv_esp_init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
    huart6.Instance = USART6;
 8001130:	4b18      	ldr	r3, [pc, #96]	@ (8001194 <drv_esp_init+0x68>)
 8001132:	4a19      	ldr	r2, [pc, #100]	@ (8001198 <drv_esp_init+0x6c>)
 8001134:	601a      	str	r2, [r3, #0]
    huart6.Init.BaudRate = 115200;
 8001136:	4b17      	ldr	r3, [pc, #92]	@ (8001194 <drv_esp_init+0x68>)
 8001138:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800113c:	605a      	str	r2, [r3, #4]
    huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <drv_esp_init+0x68>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
    huart6.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b13      	ldr	r3, [pc, #76]	@ (8001194 <drv_esp_init+0x68>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
    huart6.Init.Parity = UART_PARITY_NONE;
 800114a:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <drv_esp_init+0x68>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
    huart6.Init.Mode = UART_MODE_TX_RX;
 8001150:	4b10      	ldr	r3, [pc, #64]	@ (8001194 <drv_esp_init+0x68>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
    huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <drv_esp_init+0x68>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
    huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800115c:	4b0d      	ldr	r3, [pc, #52]	@ (8001194 <drv_esp_init+0x68>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
    if(HAL_UART_Init(&huart6) != HAL_OK)
 8001162:	480c      	ldr	r0, [pc, #48]	@ (8001194 <drv_esp_init+0x68>)
 8001164:	f003 f81e 	bl	80041a4 <HAL_UART_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d002      	beq.n	8001174 <drv_esp_init+0x48>
        return -1;
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	e00c      	b.n	800118e <drv_esp_init+0x62>

    memset(ip_addr, 0x00, sizeof(ip_addr));
 8001174:	2210      	movs	r2, #16
 8001176:	2100      	movs	r1, #0
 8001178:	4808      	ldr	r0, [pc, #32]	@ (800119c <drv_esp_init+0x70>)
 800117a:	f004 fef3 	bl	8005f64 <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 800117e:	2201      	movs	r2, #1
 8001180:	4907      	ldr	r1, [pc, #28]	@ (80011a0 <drv_esp_init+0x74>)
 8001182:	4804      	ldr	r0, [pc, #16]	@ (8001194 <drv_esp_init+0x68>)
 8001184:	f003 f8e9 	bl	800435a <HAL_UART_Receive_IT>

    return esp_reset();
 8001188:	f7ff ff08 	bl	8000f9c <esp_reset>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000a84 	.word	0x20000a84
 8001198:	40011400 	.word	0x40011400
 800119c:	200001f0 	.word	0x200001f0
 80011a0:	2000067f 	.word	0x2000067f

080011a4 <reset_func>:
void reset_func()
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	printf("esp reset... ");
 80011a8:	4808      	ldr	r0, [pc, #32]	@ (80011cc <reset_func+0x28>)
 80011aa:	f004 fd6b 	bl	8005c84 <iprintf>
	if(esp_reset() == 0)
 80011ae:	f7ff fef5 	bl	8000f9c <esp_reset>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d103      	bne.n	80011c0 <reset_func+0x1c>
			printf("OK\r\n");
 80011b8:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <reset_func+0x2c>)
 80011ba:	f004 fdd3 	bl	8005d64 <puts>
	else
			printf("fail\r\n");
}
 80011be:	e002      	b.n	80011c6 <reset_func+0x22>
			printf("fail\r\n");
 80011c0:	4804      	ldr	r0, [pc, #16]	@ (80011d4 <reset_func+0x30>)
 80011c2:	f004 fdcf 	bl	8005d64 <puts>
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	08008250 	.word	0x08008250
 80011d0:	08008260 	.word	0x08008260
 80011d4:	08008264 	.word	0x08008264

080011d8 <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b094      	sub	sp, #80	@ 0x50
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	223c      	movs	r2, #60	@ 0x3c
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f004 feb5 	bl	8005f64 <memset>
  if(ssid == NULL || passwd == NULL)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d002      	beq.n	8001206 <ap_conn_func+0x2e>
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d103      	bne.n	800120e <ap_conn_func+0x36>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 8001206:	481c      	ldr	r0, [pc, #112]	@ (8001278 <ap_conn_func+0xa0>)
 8001208:	f004 fdac 	bl	8005d64 <puts>
 800120c:	e030      	b.n	8001270 <ap_conn_func+0x98>
      return;
  }

  memset(at_cmd, 0x00, sizeof(at_cmd));
 800120e:	f107 0308 	add.w	r3, r7, #8
 8001212:	2240      	movs	r2, #64	@ 0x40
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f004 fea4 	bl	8005f64 <memset>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n",ssid,passwd);
 800121c:	f107 0008 	add.w	r0, r7, #8
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	4915      	ldr	r1, [pc, #84]	@ (800127c <ap_conn_func+0xa4>)
 8001226:	f004 fda5 	bl	8005d74 <siprintf>

  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 800122a:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 800122e:	f107 0008 	add.w	r0, r7, #8
 8001232:	f241 7370 	movw	r3, #6000	@ 0x1770
 8001236:	4912      	ldr	r1, [pc, #72]	@ (8001280 <ap_conn_func+0xa8>)
 8001238:	f7ff fe46 	bl	8000ec8 <esp_at_command>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <ap_conn_func+0x72>
      printf("ap scan command fail\r\n");
 8001242:	4810      	ldr	r0, [pc, #64]	@ (8001284 <ap_conn_func+0xac>)
 8001244:	f004 fd8e 	bl	8005d64 <puts>
 8001248:	e012      	b.n	8001270 <ap_conn_func+0x98>
  else
  {
      for(int i = 0 ; i < length ; i++)
 800124a:	2300      	movs	r3, #0
 800124c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800124e:	e009      	b.n	8001264 <ap_conn_func+0x8c>
          printf("%c", response[i]);
 8001250:	4a0b      	ldr	r2, [pc, #44]	@ (8001280 <ap_conn_func+0xa8>)
 8001252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001254:	4413      	add	r3, r2
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f004 fd25 	bl	8005ca8 <putchar>
      for(int i = 0 ; i < length ; i++)
 800125e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001260:	3301      	adds	r3, #1
 8001262:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001264:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001268:	461a      	mov	r2, r3
 800126a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800126c:	4293      	cmp	r3, r2
 800126e:	dbef      	blt.n	8001250 <ap_conn_func+0x78>
  }
}
 8001270:	3750      	adds	r7, #80	@ 0x50
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	080082a8 	.word	0x080082a8
 800127c:	080082d4 	.word	0x080082d4
 8001280:	20000200 	.word	0x20000200
 8001284:	08008290 	.word	0x08008290

08001288 <HAL_UART_RxCpltCallback>:

    return 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a23      	ldr	r2, [pc, #140]	@ (8001324 <HAL_UART_RxCpltCallback+0x9c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d117      	bne.n	80012ca <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 800129a:	4b23      	ldr	r3, [pc, #140]	@ (8001328 <HAL_UART_RxCpltCallback+0xa0>)
 800129c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80012a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012a4:	d20c      	bcs.n	80012c0 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 80012a6:	4b20      	ldr	r3, [pc, #128]	@ (8001328 <HAL_UART_RxCpltCallback+0xa0>)
 80012a8:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80012ac:	1c5a      	adds	r2, r3, #1
 80012ae:	b291      	uxth	r1, r2
 80012b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001328 <HAL_UART_RxCpltCallback+0xa0>)
 80012b2:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 80012b6:	461a      	mov	r2, r3
 80012b8:	4b1c      	ldr	r3, [pc, #112]	@ (800132c <HAL_UART_RxCpltCallback+0xa4>)
 80012ba:	7819      	ldrb	r1, [r3, #0]
 80012bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <HAL_UART_RxCpltCallback+0xa0>)
 80012be:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 80012c0:	2201      	movs	r2, #1
 80012c2:	491a      	ldr	r1, [pc, #104]	@ (800132c <HAL_UART_RxCpltCallback+0xa4>)
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f003 f848 	bl	800435a <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a18      	ldr	r2, [pc, #96]	@ (8001330 <HAL_UART_RxCpltCallback+0xa8>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d122      	bne.n	800131a <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 80012d4:	4b17      	ldr	r3, [pc, #92]	@ (8001334 <HAL_UART_RxCpltCallback+0xac>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a17      	ldr	r2, [pc, #92]	@ (8001338 <HAL_UART_RxCpltCallback+0xb0>)
 80012da:	7811      	ldrb	r1, [r2, #0]
 80012dc:	4a17      	ldr	r2, [pc, #92]	@ (800133c <HAL_UART_RxCpltCallback+0xb4>)
 80012de:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 80012e0:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <HAL_UART_RxCpltCallback+0xac>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a15      	ldr	r2, [pc, #84]	@ (800133c <HAL_UART_RxCpltCallback+0xb4>)
 80012e6:	5cd3      	ldrb	r3, [r2, r3]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b0d      	cmp	r3, #13
 80012ec:	d10b      	bne.n	8001306 <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 80012ee:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <HAL_UART_RxCpltCallback+0xac>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a12      	ldr	r2, [pc, #72]	@ (800133c <HAL_UART_RxCpltCallback+0xb4>)
 80012f4:	2100      	movs	r1, #0
 80012f6:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 80012f8:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <HAL_UART_RxCpltCallback+0xb8>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]
    		i = 0;
 80012fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001334 <HAL_UART_RxCpltCallback+0xac>)
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	e004      	b.n	8001310 <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 8001306:	4b0b      	ldr	r3, [pc, #44]	@ (8001334 <HAL_UART_RxCpltCallback+0xac>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	3301      	adds	r3, #1
 800130c:	4a09      	ldr	r2, [pc, #36]	@ (8001334 <HAL_UART_RxCpltCallback+0xac>)
 800130e:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 8001310:	2201      	movs	r2, #1
 8001312:	4909      	ldr	r1, [pc, #36]	@ (8001338 <HAL_UART_RxCpltCallback+0xb0>)
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f003 f820 	bl	800435a <HAL_UART_Receive_IT>
    }
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40011400 	.word	0x40011400
 8001328:	20000680 	.word	0x20000680
 800132c:	2000067f 	.word	0x2000067f
 8001330:	40004400 	.word	0x40004400
 8001334:	20000acc 	.word	0x20000acc
 8001338:	2000067e 	.word	0x2000067e
 800133c:	2000064c 	.word	0x2000064c
 8001340:	20000648 	.word	0x20000648

08001344 <AiotClient_Init>:


void AiotClient_Init()
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	reset_func();
 8001348:	f7ff ff2c 	bl	80011a4 <reset_func>
//	version_func();
	ap_conn_func(SSID,PASS);
 800134c:	4905      	ldr	r1, [pc, #20]	@ (8001364 <AiotClient_Init+0x20>)
 800134e:	4806      	ldr	r0, [pc, #24]	@ (8001368 <AiotClient_Init+0x24>)
 8001350:	f7ff ff42 	bl	80011d8 <ap_conn_func>
//	start_esp_server();
//	ip_state_func();
	request_ip_addr(1);
 8001354:	2001      	movs	r0, #1
 8001356:	f7ff fe45 	bl	8000fe4 <request_ip_addr>
	esp_client_conn();
 800135a:	f7ff feb9 	bl	80010d0 <esp_client_conn>
//	ip_state_func();
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	080086ac 	.word	0x080086ac
 8001368:	0800863c 	.word	0x0800863c

0800136c <esp_send_data>:

void esp_send_data(char *data)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b094      	sub	sp, #80	@ 0x50
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001374:	2300      	movs	r3, #0
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	223c      	movs	r2, #60	@ 0x3c
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f004 fdef 	bl	8005f64 <memset>
  uint16_t length = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7fe ff88 	bl	80002a0 <strlen>
 8001390:	4602      	mov	r2, r0
 8001392:	f107 0310 	add.w	r3, r7, #16
 8001396:	490e      	ldr	r1, [pc, #56]	@ (80013d0 <esp_send_data+0x64>)
 8001398:	4618      	mov	r0, r3
 800139a:	f004 fceb 	bl	8005d74 <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 800139e:	f107 020e 	add.w	r2, r7, #14
 80013a2:	f107 0010 	add.w	r0, r7, #16
 80013a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013aa:	490a      	ldr	r1, [pc, #40]	@ (80013d4 <esp_send_data+0x68>)
 80013ac:	f7ff fd8c 	bl	8000ec8 <esp_at_command>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d107      	bne.n	80013c6 <esp_send_data+0x5a>
	{
			esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 80013b6:	f107 020e 	add.w	r2, r7, #14
 80013ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013be:	4905      	ldr	r1, [pc, #20]	@ (80013d4 <esp_send_data+0x68>)
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff fd81 	bl	8000ec8 <esp_at_command>
	}
}
 80013c6:	bf00      	nop
 80013c8:	3750      	adds	r7, #80	@ 0x50
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	080086b8 	.word	0x080086b8
 80013d4:	20000200 	.word	0x20000200

080013d8 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 80013dc:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <drv_uart_init+0x58>)
 80013de:	4a15      	ldr	r2, [pc, #84]	@ (8001434 <drv_uart_init+0x5c>)
 80013e0:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80013e2:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <drv_uart_init+0x58>)
 80013e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013e8:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ea:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <drv_uart_init+0x58>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <drv_uart_init+0x58>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <drv_uart_init+0x58>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <drv_uart_init+0x58>)
 80013fe:	220c      	movs	r2, #12
 8001400:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001402:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <drv_uart_init+0x58>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001408:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <drv_uart_init+0x58>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 800140e:	4808      	ldr	r0, [pc, #32]	@ (8001430 <drv_uart_init+0x58>)
 8001410:	f002 fec8 	bl	80041a4 <HAL_UART_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <drv_uart_init+0x48>
        return -1;
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	e005      	b.n	800142c <drv_uart_init+0x54>

    HAL_UART_Receive_IT(&huart2, &cdata,1);
 8001420:	2201      	movs	r2, #1
 8001422:	4905      	ldr	r1, [pc, #20]	@ (8001438 <drv_uart_init+0x60>)
 8001424:	4802      	ldr	r0, [pc, #8]	@ (8001430 <drv_uart_init+0x58>)
 8001426:	f002 ff98 	bl	800435a <HAL_UART_Receive_IT>
    return 0;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000600 	.word	0x20000600
 8001434:	40004400 	.word	0x40004400
 8001438:	2000067e 	.word	0x2000067e

0800143c <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 8001444:	1d39      	adds	r1, r7, #4
 8001446:	230a      	movs	r3, #10
 8001448:	2201      	movs	r2, #1
 800144a:	4807      	ldr	r0, [pc, #28]	@ (8001468 <__io_putchar+0x2c>)
 800144c:	f002 fefa 	bl	8004244 <HAL_UART_Transmit>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <__io_putchar+0x1e>
        return ch;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	e001      	b.n	800145e <__io_putchar+0x22>
    return -1;
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000600 	.word	0x20000600

0800146c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int ret = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001476:	f000 ff63 	bl	8002340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147a:	f000 f893 	bl	80015a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800147e:	f000 fa19 	bl	80018b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001482:	f000 f949 	bl	8001718 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001486:	f000 f993 	bl	80017b0 <MX_TIM3_Init>
  MX_TIM1_Init();
 800148a:	f000 f8f5 	bl	8001678 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ret |= drv_uart_init();
 800148e:	f7ff ffa3 	bl	80013d8 <drv_uart_init>
 8001492:	4602      	mov	r2, r0
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4313      	orrs	r3, r2
 8001498:	607b      	str	r3, [r7, #4]
	ret |= drv_esp_init();
 800149a:	f7ff fe47 	bl	800112c <drv_esp_init>
 800149e:	4602      	mov	r2, r0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	607b      	str	r3, [r7, #4]
	if(ret != 0) Error_Handler();
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <main+0x44>
 80014ac:	f000 fcc0 	bl	8001e30 <Error_Handler>
	printf("Start main() \r\n");
 80014b0:	4831      	ldr	r0, [pc, #196]	@ (8001578 <main+0x10c>)
 80014b2:	f004 fc57 	bl	8005d64 <puts>
	AiotClient_Init();
 80014b6:	f7ff ff45 	bl	8001344 <AiotClient_Init>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80014ba:	2100      	movs	r1, #0
 80014bc:	482f      	ldr	r0, [pc, #188]	@ (800157c <main+0x110>)
 80014be:	f002 f8f1 	bl	80036a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80014c2:	2104      	movs	r1, #4
 80014c4:	482d      	ldr	r0, [pc, #180]	@ (800157c <main+0x110>)
 80014c6:	f002 f8ed 	bl	80036a4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 80014ca:	492d      	ldr	r1, [pc, #180]	@ (8001580 <main+0x114>)
 80014cc:	482d      	ldr	r0, [pc, #180]	@ (8001584 <main+0x118>)
 80014ce:	f004 fdcd 	bl	800606c <strstr>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d020      	beq.n	800151a <main+0xae>
 80014d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001584 <main+0x118>)
 80014da:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80014de:	3b01      	subs	r3, #1
 80014e0:	4a28      	ldr	r2, [pc, #160]	@ (8001584 <main+0x118>)
 80014e2:	5cd3      	ldrb	r3, [r2, r3]
 80014e4:	2b0a      	cmp	r3, #10
 80014e6:	d118      	bne.n	800151a <main+0xae>
		{
			//?��?��?���?????????  \r\n+IPD,15:[KSH_LIN]HELLO\n
			strcpy(strBuff,strchr((char *)cb_data.buf,'['));
 80014e8:	215b      	movs	r1, #91	@ 0x5b
 80014ea:	4826      	ldr	r0, [pc, #152]	@ (8001584 <main+0x118>)
 80014ec:	f004 fd42 	bl	8005f74 <strchr>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4619      	mov	r1, r3
 80014f4:	4824      	ldr	r0, [pc, #144]	@ (8001588 <main+0x11c>)
 80014f6:	f004 fe46 	bl	8006186 <strcpy>
			memset(cb_data.buf,0x0,sizeof(cb_data.buf));
 80014fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014fe:	2100      	movs	r1, #0
 8001500:	4820      	ldr	r0, [pc, #128]	@ (8001584 <main+0x118>)
 8001502:	f004 fd2f 	bl	8005f64 <memset>
			cb_data.length = 0;
 8001506:	4b1f      	ldr	r3, [pc, #124]	@ (8001584 <main+0x118>)
 8001508:	2200      	movs	r2, #0
 800150a:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
			printf("wifi\r\n");
 800150e:	481f      	ldr	r0, [pc, #124]	@ (800158c <main+0x120>)
 8001510:	f004 fc28 	bl	8005d64 <puts>
			esp_event(strBuff);
 8001514:	481c      	ldr	r0, [pc, #112]	@ (8001588 <main+0x11c>)
 8001516:	f000 faa5 	bl	8001a64 <esp_event>

		}
		if(rx2Flag)
 800151a:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <main+0x124>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b00      	cmp	r3, #0
 8001522:	d006      	beq.n	8001532 <main+0xc6>
		{
			printf("recv2 : %s\r\n",rx2Data);
 8001524:	491b      	ldr	r1, [pc, #108]	@ (8001594 <main+0x128>)
 8001526:	481c      	ldr	r0, [pc, #112]	@ (8001598 <main+0x12c>)
 8001528:	f004 fbac 	bl	8005c84 <iprintf>
			rx2Flag =0;
 800152c:	4b18      	ldr	r3, [pc, #96]	@ (8001590 <main+0x124>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
		}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		distance = Measure_Distance();
 8001532:	f000 fb43 	bl	8001bbc <Measure_Distance>
 8001536:	eef0 7a40 	vmov.f32	s15, s0
 800153a:	4b18      	ldr	r3, [pc, #96]	@ (800159c <main+0x130>)
 800153c:	edc3 7a00 	vstr	s15, [r3]
		if(distance >= 15)
 8001540:	4b16      	ldr	r3, [pc, #88]	@ (800159c <main+0x130>)
 8001542:	edd3 7a00 	vldr	s15, [r3]
 8001546:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800154a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800154e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001552:	db0d      	blt.n	8001570 <main+0x104>
		{
			if(Linetracer_Mode=='L')
 8001554:	4b12      	ldr	r3, [pc, #72]	@ (80015a0 <main+0x134>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b4c      	cmp	r3, #76	@ 0x4c
 800155a:	d102      	bne.n	8001562 <main+0xf6>
			{

				l_mode();
 800155c:	f000 fc44 	bl	8001de8 <l_mode>
 8001560:	e7b3      	b.n	80014ca <main+0x5e>
			}
			else if(Linetracer_Mode =='R')
 8001562:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <main+0x134>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b52      	cmp	r3, #82	@ 0x52
 8001568:	d1af      	bne.n	80014ca <main+0x5e>
			{
				r_mode();
 800156a:	f000 fc1b 	bl	8001da4 <r_mode>
 800156e:	e7ac      	b.n	80014ca <main+0x5e>
			}
		}
		else
		{
			stop();
 8001570:	f000 fbf8 	bl	8001d64 <stop>
  	if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8001574:	e7a9      	b.n	80014ca <main+0x5e>
 8001576:	bf00      	nop
 8001578:	080086c8 	.word	0x080086c8
 800157c:	20000b60 	.word	0x20000b60
 8001580:	080086d8 	.word	0x080086d8
 8001584:	20000680 	.word	0x20000680
 8001588:	20000bb8 	.word	0x20000bb8
 800158c:	080086e0 	.word	0x080086e0
 8001590:	20000648 	.word	0x20000648
 8001594:	2000064c 	.word	0x2000064c
 8001598:	080086e8 	.word	0x080086e8
 800159c:	20000bb0 	.word	0x20000bb0
 80015a0:	20000bb4 	.word	0x20000bb4

080015a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b094      	sub	sp, #80	@ 0x50
 80015a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015aa:	f107 0320 	add.w	r3, r7, #32
 80015ae:	2230      	movs	r2, #48	@ 0x30
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f004 fcd6 	bl	8005f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	4b28      	ldr	r3, [pc, #160]	@ (8001670 <SystemClock_Config+0xcc>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d0:	4a27      	ldr	r2, [pc, #156]	@ (8001670 <SystemClock_Config+0xcc>)
 80015d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d8:	4b25      	ldr	r3, [pc, #148]	@ (8001670 <SystemClock_Config+0xcc>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e4:	2300      	movs	r3, #0
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	4b22      	ldr	r3, [pc, #136]	@ (8001674 <SystemClock_Config+0xd0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a21      	ldr	r2, [pc, #132]	@ (8001674 <SystemClock_Config+0xd0>)
 80015ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001674 <SystemClock_Config+0xd0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001600:	2302      	movs	r3, #2
 8001602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001604:	2301      	movs	r3, #1
 8001606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001608:	2310      	movs	r3, #16
 800160a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160c:	2302      	movs	r3, #2
 800160e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001610:	2300      	movs	r3, #0
 8001612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001614:	2310      	movs	r3, #16
 8001616:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001618:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800161c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800161e:	2304      	movs	r3, #4
 8001620:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001622:	2304      	movs	r3, #4
 8001624:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001626:	f107 0320 	add.w	r3, r7, #32
 800162a:	4618      	mov	r0, r3
 800162c:	f001 fa78 	bl	8002b20 <HAL_RCC_OscConfig>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001636:	f000 fbfb 	bl	8001e30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800163a:	230f      	movs	r3, #15
 800163c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800163e:	2302      	movs	r3, #2
 8001640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001646:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800164a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	2102      	movs	r1, #2
 8001656:	4618      	mov	r0, r3
 8001658:	f001 fcda 	bl	8003010 <HAL_RCC_ClockConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001662:	f000 fbe5 	bl	8001e30 <Error_Handler>
  }
}
 8001666:	bf00      	nop
 8001668:	3750      	adds	r7, #80	@ 0x50
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800
 8001674:	40007000 	.word	0x40007000

08001678 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800167e:	f107 0308 	add.w	r3, r7, #8
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168c:	463b      	mov	r3, r7
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001694:	4b1e      	ldr	r3, [pc, #120]	@ (8001710 <MX_TIM1_Init+0x98>)
 8001696:	4a1f      	ldr	r2, [pc, #124]	@ (8001714 <MX_TIM1_Init+0x9c>)
 8001698:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800169a:	4b1d      	ldr	r3, [pc, #116]	@ (8001710 <MX_TIM1_Init+0x98>)
 800169c:	2253      	movs	r2, #83	@ 0x53
 800169e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001710 <MX_TIM1_Init+0x98>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001710 <MX_TIM1_Init+0x98>)
 80016a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ae:	4b18      	ldr	r3, [pc, #96]	@ (8001710 <MX_TIM1_Init+0x98>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016b4:	4b16      	ldr	r3, [pc, #88]	@ (8001710 <MX_TIM1_Init+0x98>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ba:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <MX_TIM1_Init+0x98>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016c0:	4813      	ldr	r0, [pc, #76]	@ (8001710 <MX_TIM1_Init+0x98>)
 80016c2:	f001 fec5 	bl	8003450 <HAL_TIM_Base_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80016cc:	f000 fbb0 	bl	8001e30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016d6:	f107 0308 	add.w	r3, r7, #8
 80016da:	4619      	mov	r1, r3
 80016dc:	480c      	ldr	r0, [pc, #48]	@ (8001710 <MX_TIM1_Init+0x98>)
 80016de:	f002 f953 	bl	8003988 <HAL_TIM_ConfigClockSource>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80016e8:	f000 fba2 	bl	8001e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ec:	2300      	movs	r3, #0
 80016ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016f4:	463b      	mov	r3, r7
 80016f6:	4619      	mov	r1, r3
 80016f8:	4805      	ldr	r0, [pc, #20]	@ (8001710 <MX_TIM1_Init+0x98>)
 80016fa:	f002 fce5 	bl	80040c8 <HAL_TIMEx_MasterConfigSynchronization>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001704:	f000 fb94 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000ad0 	.word	0x20000ad0
 8001714:	40010000 	.word	0x40010000

08001718 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800171e:	f107 0308 	add.w	r3, r7, #8
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800172c:	463b      	mov	r3, r7
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001734:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <MX_TIM2_Init+0x94>)
 8001736:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800173a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800173c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <MX_TIM2_Init+0x94>)
 800173e:	2253      	movs	r2, #83	@ 0x53
 8001740:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001742:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <MX_TIM2_Init+0x94>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 8001748:	4b18      	ldr	r3, [pc, #96]	@ (80017ac <MX_TIM2_Init+0x94>)
 800174a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800174e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001750:	4b16      	ldr	r3, [pc, #88]	@ (80017ac <MX_TIM2_Init+0x94>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001756:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <MX_TIM2_Init+0x94>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800175c:	4813      	ldr	r0, [pc, #76]	@ (80017ac <MX_TIM2_Init+0x94>)
 800175e:	f001 fe77 	bl	8003450 <HAL_TIM_Base_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001768:	f000 fb62 	bl	8001e30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001770:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001772:	f107 0308 	add.w	r3, r7, #8
 8001776:	4619      	mov	r1, r3
 8001778:	480c      	ldr	r0, [pc, #48]	@ (80017ac <MX_TIM2_Init+0x94>)
 800177a:	f002 f905 	bl	8003988 <HAL_TIM_ConfigClockSource>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001784:	f000 fb54 	bl	8001e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001788:	2300      	movs	r3, #0
 800178a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001790:	463b      	mov	r3, r7
 8001792:	4619      	mov	r1, r3
 8001794:	4805      	ldr	r0, [pc, #20]	@ (80017ac <MX_TIM2_Init+0x94>)
 8001796:	f002 fc97 	bl	80040c8 <HAL_TIMEx_MasterConfigSynchronization>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017a0:	f000 fb46 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000b18 	.word	0x20000b18

080017b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08e      	sub	sp, #56	@ 0x38
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c4:	f107 0320 	add.w	r3, r7, #32
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
 80017dc:	615a      	str	r2, [r3, #20]
 80017de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017e0:	4b32      	ldr	r3, [pc, #200]	@ (80018ac <MX_TIM3_Init+0xfc>)
 80017e2:	4a33      	ldr	r2, [pc, #204]	@ (80018b0 <MX_TIM3_Init+0x100>)
 80017e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80017e6:	4b31      	ldr	r3, [pc, #196]	@ (80018ac <MX_TIM3_Init+0xfc>)
 80017e8:	2253      	movs	r2, #83	@ 0x53
 80017ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ec:	4b2f      	ldr	r3, [pc, #188]	@ (80018ac <MX_TIM3_Init+0xfc>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80017f2:	4b2e      	ldr	r3, [pc, #184]	@ (80018ac <MX_TIM3_Init+0xfc>)
 80017f4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80017f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fa:	4b2c      	ldr	r3, [pc, #176]	@ (80018ac <MX_TIM3_Init+0xfc>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001800:	4b2a      	ldr	r3, [pc, #168]	@ (80018ac <MX_TIM3_Init+0xfc>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001806:	4829      	ldr	r0, [pc, #164]	@ (80018ac <MX_TIM3_Init+0xfc>)
 8001808:	f001 fe22 	bl	8003450 <HAL_TIM_Base_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001812:	f000 fb0d 	bl	8001e30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001816:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800181a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800181c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001820:	4619      	mov	r1, r3
 8001822:	4822      	ldr	r0, [pc, #136]	@ (80018ac <MX_TIM3_Init+0xfc>)
 8001824:	f002 f8b0 	bl	8003988 <HAL_TIM_ConfigClockSource>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800182e:	f000 faff 	bl	8001e30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001832:	481e      	ldr	r0, [pc, #120]	@ (80018ac <MX_TIM3_Init+0xfc>)
 8001834:	f001 fedd 	bl	80035f2 <HAL_TIM_PWM_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800183e:	f000 faf7 	bl	8001e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800184a:	f107 0320 	add.w	r3, r7, #32
 800184e:	4619      	mov	r1, r3
 8001850:	4816      	ldr	r0, [pc, #88]	@ (80018ac <MX_TIM3_Init+0xfc>)
 8001852:	f002 fc39 	bl	80040c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800185c:	f000 fae8 	bl	8001e30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001860:	2360      	movs	r3, #96	@ 0x60
 8001862:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	2200      	movs	r2, #0
 8001874:	4619      	mov	r1, r3
 8001876:	480d      	ldr	r0, [pc, #52]	@ (80018ac <MX_TIM3_Init+0xfc>)
 8001878:	f001 ffc4 	bl	8003804 <HAL_TIM_PWM_ConfigChannel>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001882:	f000 fad5 	bl	8001e30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	2204      	movs	r2, #4
 800188a:	4619      	mov	r1, r3
 800188c:	4807      	ldr	r0, [pc, #28]	@ (80018ac <MX_TIM3_Init+0xfc>)
 800188e:	f001 ffb9 	bl	8003804 <HAL_TIM_PWM_ConfigChannel>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001898:	f000 faca 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800189c:	4803      	ldr	r0, [pc, #12]	@ (80018ac <MX_TIM3_Init+0xfc>)
 800189e:	f000 fb41 	bl	8001f24 <HAL_TIM_MspPostInit>

}
 80018a2:	bf00      	nop
 80018a4:	3738      	adds	r7, #56	@ 0x38
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000b60 	.word	0x20000b60
 80018b0:	40000400 	.word	0x40000400

080018b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	@ 0x28
 80018b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	4b4f      	ldr	r3, [pc, #316]	@ (8001a0c <MX_GPIO_Init+0x158>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	4a4e      	ldr	r2, [pc, #312]	@ (8001a0c <MX_GPIO_Init+0x158>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018da:	4b4c      	ldr	r3, [pc, #304]	@ (8001a0c <MX_GPIO_Init+0x158>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b48      	ldr	r3, [pc, #288]	@ (8001a0c <MX_GPIO_Init+0x158>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	4a47      	ldr	r2, [pc, #284]	@ (8001a0c <MX_GPIO_Init+0x158>)
 80018f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f6:	4b45      	ldr	r3, [pc, #276]	@ (8001a0c <MX_GPIO_Init+0x158>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	4b41      	ldr	r3, [pc, #260]	@ (8001a0c <MX_GPIO_Init+0x158>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	4a40      	ldr	r2, [pc, #256]	@ (8001a0c <MX_GPIO_Init+0x158>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6313      	str	r3, [r2, #48]	@ 0x30
 8001912:	4b3e      	ldr	r3, [pc, #248]	@ (8001a0c <MX_GPIO_Init+0x158>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	4b3a      	ldr	r3, [pc, #232]	@ (8001a0c <MX_GPIO_Init+0x158>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	4a39      	ldr	r2, [pc, #228]	@ (8001a0c <MX_GPIO_Init+0x158>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	6313      	str	r3, [r2, #48]	@ 0x30
 800192e:	4b37      	ldr	r3, [pc, #220]	@ (8001a0c <MX_GPIO_Init+0x158>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT22_GPIO_Port, DHT22_Pin, GPIO_PIN_RESET);
 800193a:	2200      	movs	r2, #0
 800193c:	2108      	movs	r1, #8
 800193e:	4834      	ldr	r0, [pc, #208]	@ (8001a10 <MX_GPIO_Init+0x15c>)
 8001940:	f001 f8d4 	bl	8002aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trig_Pin|LD2_Pin|IN2_Pin|IN3_Pin
 8001944:	2200      	movs	r2, #0
 8001946:	f640 3121 	movw	r1, #2849	@ 0xb21
 800194a:	4832      	ldr	r0, [pc, #200]	@ (8001a14 <MX_GPIO_Init+0x160>)
 800194c:	f001 f8ce 	bl	8002aec <HAL_GPIO_WritePin>
                          |IN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001950:	2200      	movs	r2, #0
 8001952:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001956:	4830      	ldr	r0, [pc, #192]	@ (8001a18 <MX_GPIO_Init+0x164>)
 8001958:	f001 f8c8 	bl	8002aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800195c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001962:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	4619      	mov	r1, r3
 8001972:	4827      	ldr	r0, [pc, #156]	@ (8001a10 <MX_GPIO_Init+0x15c>)
 8001974:	f000 ff1e 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT22_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin;
 8001978:	2308      	movs	r3, #8
 800197a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197c:	2301      	movs	r3, #1
 800197e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	4820      	ldr	r0, [pc, #128]	@ (8001a10 <MX_GPIO_Init+0x15c>)
 8001990:	f000 ff10 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Trig_Pin LD2_Pin IN2_Pin IN3_Pin
                           IN4_Pin */
  GPIO_InitStruct.Pin = Trig_Pin|LD2_Pin|IN2_Pin|IN3_Pin
 8001994:	f640 3321 	movw	r3, #2849	@ 0xb21
 8001998:	617b      	str	r3, [r7, #20]
                          |IN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199a:	2301      	movs	r3, #1
 800199c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4619      	mov	r1, r3
 80019ac:	4819      	ldr	r0, [pc, #100]	@ (8001a14 <MX_GPIO_Init+0x160>)
 80019ae:	f000 ff01 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Echo_Pin L_Sensor_Pin */
  GPIO_InitStruct.Pin = Echo_Pin|L_Sensor_Pin;
 80019b2:	f240 4302 	movw	r3, #1026	@ 0x402
 80019b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	4619      	mov	r1, r3
 80019c6:	4813      	ldr	r0, [pc, #76]	@ (8001a14 <MX_GPIO_Init+0x160>)
 80019c8:	f000 fef4 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN1_Pin */
  GPIO_InitStruct.Pin = IN1_Pin;
 80019cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d2:	2301      	movs	r3, #1
 80019d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN1_GPIO_Port, &GPIO_InitStruct);
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	4619      	mov	r1, r3
 80019e4:	480c      	ldr	r0, [pc, #48]	@ (8001a18 <MX_GPIO_Init+0x164>)
 80019e6:	f000 fee5 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : R_Sensor_Pin */
  GPIO_InitStruct.Pin = R_Sensor_Pin;
 80019ea:	2320      	movs	r3, #32
 80019ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R_Sensor_GPIO_Port, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	4806      	ldr	r0, [pc, #24]	@ (8001a18 <MX_GPIO_Init+0x164>)
 80019fe:	f000 fed9 	bl	80027b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a02:	bf00      	nop
 8001a04:	3728      	adds	r7, #40	@ 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020800 	.word	0x40020800
 8001a14:	40020000 	.word	0x40020000
 8001a18:	40020400 	.word	0x40020400

08001a1c <MX_GPIO_LED_ON>:

/* USER CODE BEGIN 4 */
void MX_GPIO_LED_ON(int pin)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_SET);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	2201      	movs	r2, #1
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4803      	ldr	r0, [pc, #12]	@ (8001a3c <MX_GPIO_LED_ON+0x20>)
 8001a2e:	f001 f85d 	bl	8002aec <HAL_GPIO_WritePin>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40020000 	.word	0x40020000

08001a40 <MX_GPIO_LED_OFF>:
void MX_GPIO_LED_OFF(int pin)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4803      	ldr	r0, [pc, #12]	@ (8001a60 <MX_GPIO_LED_OFF+0x20>)
 8001a52:	f001 f84b 	bl	8002aec <HAL_GPIO_WritePin>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40020000 	.word	0x40020000

08001a64 <esp_event>:
void esp_event(char * recvBuf)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b09c      	sub	sp, #112	@ 0x70
 8001a68:	af02      	add	r7, sp, #8
 8001a6a:	6078      	str	r0, [r7, #4]
  int i=0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	667b      	str	r3, [r7, #100]	@ 0x64
  char * pToken;
  char * pArray[ARR_CNT]={0};
 8001a70:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  char sendBuf[MAX_UART_COMMAND_LEN]={0};
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	f107 0310 	add.w	r3, r7, #16
 8001a88:	223c      	movs	r2, #60	@ 0x3c
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f004 fa69 	bl	8005f64 <memset>

	strBuff[strlen(recvBuf)-1] = '\0';	//'\n' cut
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7fe fc04 	bl	80002a0 <strlen>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	4a3c      	ldr	r2, [pc, #240]	@ (8001b90 <esp_event+0x12c>)
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	54d1      	strb	r1, [r2, r3]
  printf("\r\nDebug recv : %s\r\n",recvBuf);
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	483b      	ldr	r0, [pc, #236]	@ (8001b94 <esp_event+0x130>)
 8001aa6:	f004 f8ed 	bl	8005c84 <iprintf>

  pToken = strtok(recvBuf,"[@]");
 8001aaa:	493b      	ldr	r1, [pc, #236]	@ (8001b98 <esp_event+0x134>)
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f004 fa81 	bl	8005fb4 <strtok>
 8001ab2:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 8001ab4:	e011      	b.n	8001ada <esp_event+0x76>
  {
    pArray[i] = pToken;
 8001ab6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	3368      	adds	r3, #104	@ 0x68
 8001abc:	443b      	add	r3, r7
 8001abe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001ac0:	f843 2c1c 	str.w	r2, [r3, #-28]
    if(++i >= ARR_CNT)
 8001ac4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	667b      	str	r3, [r7, #100]	@ 0x64
 8001aca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001acc:	2b04      	cmp	r3, #4
 8001ace:	dc08      	bgt.n	8001ae2 <esp_event+0x7e>
      break;
    pToken = strtok(NULL,"[@]");
 8001ad0:	4931      	ldr	r1, [pc, #196]	@ (8001b98 <esp_event+0x134>)
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f004 fa6e 	bl	8005fb4 <strtok>
 8001ad8:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 8001ada:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1ea      	bne.n	8001ab6 <esp_event+0x52>
 8001ae0:	e000      	b.n	8001ae4 <esp_event+0x80>
      break;
 8001ae2:	bf00      	nop
  }

  if(!strcmp(pArray[1],"DEST"))
 8001ae4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ae6:	492d      	ldr	r1, [pc, #180]	@ (8001b9c <esp_event+0x138>)
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fb79 	bl	80001e0 <strcmp>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d132      	bne.n	8001b5a <esp_event+0xf6>
  {
  	if(!strcmp(pArray[2],"SUN"))
 8001af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af6:	492a      	ldr	r1, [pc, #168]	@ (8001ba0 <esp_event+0x13c>)
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fb71 	bl	80001e0 <strcmp>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d106      	bne.n	8001b12 <esp_event+0xae>
  	{
  		MX_GPIO_LED_ON(LD2_Pin);
 8001b04:	2020      	movs	r0, #32
 8001b06:	f7ff ff89 	bl	8001a1c <MX_GPIO_LED_ON>
  		Linetracer_Mode = 'L';
 8001b0a:	4b26      	ldr	r3, [pc, #152]	@ (8001ba4 <esp_event+0x140>)
 8001b0c:	224c      	movs	r2, #76	@ 0x4c
 8001b0e:	701a      	strb	r2, [r3, #0]
 8001b10:	e00d      	b.n	8001b2e <esp_event+0xca>
  	}
		else if(!strcmp(pArray[2],"HYD"))
 8001b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b14:	4924      	ldr	r1, [pc, #144]	@ (8001ba8 <esp_event+0x144>)
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fb62 	bl	80001e0 <strcmp>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d105      	bne.n	8001b2e <esp_event+0xca>
		{
			MX_GPIO_LED_OFF(LD2_Pin);
 8001b22:	2020      	movs	r0, #32
 8001b24:	f7ff ff8c 	bl	8001a40 <MX_GPIO_LED_OFF>
			Linetracer_Mode = 'R';
 8001b28:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba4 <esp_event+0x140>)
 8001b2a:	2252      	movs	r2, #82	@ 0x52
 8001b2c:	701a      	strb	r2, [r3, #0]
		}
		sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 8001b2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b30:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b34:	f107 000c 	add.w	r0, r7, #12
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	491b      	ldr	r1, [pc, #108]	@ (8001bac <esp_event+0x148>)
 8001b3e:	f004 f919 	bl	8005d74 <siprintf>
      return;
  }
  else
      return;

  esp_send_data(sendBuf);
 8001b42:	f107 030c 	add.w	r3, r7, #12
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fc10 	bl	800136c <esp_send_data>
  printf("Debug send : %s\r\n",sendBuf);
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	4619      	mov	r1, r3
 8001b52:	4817      	ldr	r0, [pc, #92]	@ (8001bb0 <esp_event+0x14c>)
 8001b54:	f004 f896 	bl	8005c84 <iprintf>
 8001b58:	e017      	b.n	8001b8a <esp_event+0x126>
  else if(!strncmp(pArray[1]," New conn",8))
 8001b5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b5c:	2208      	movs	r2, #8
 8001b5e:	4915      	ldr	r1, [pc, #84]	@ (8001bb4 <esp_event+0x150>)
 8001b60:	4618      	mov	r0, r3
 8001b62:	f004 fa14 	bl	8005f8e <strncmp>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00b      	beq.n	8001b84 <esp_event+0x120>
  else if(!strncmp(pArray[1]," Already log",8))
 8001b6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b6e:	2208      	movs	r2, #8
 8001b70:	4911      	ldr	r1, [pc, #68]	@ (8001bb8 <esp_event+0x154>)
 8001b72:	4618      	mov	r0, r3
 8001b74:	f004 fa0b 	bl	8005f8e <strncmp>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d104      	bne.n	8001b88 <esp_event+0x124>
			esp_client_conn();
 8001b7e:	f7ff faa7 	bl	80010d0 <esp_client_conn>
      return;
 8001b82:	e002      	b.n	8001b8a <esp_event+0x126>
     return;
 8001b84:	bf00      	nop
 8001b86:	e000      	b.n	8001b8a <esp_event+0x126>
      return;
 8001b88:	bf00      	nop
}
 8001b8a:	3768      	adds	r7, #104	@ 0x68
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000bb8 	.word	0x20000bb8
 8001b94:	080086f8 	.word	0x080086f8
 8001b98:	0800870c 	.word	0x0800870c
 8001b9c:	08008710 	.word	0x08008710
 8001ba0:	08008718 	.word	0x08008718
 8001ba4:	20000bb4 	.word	0x20000bb4
 8001ba8:	0800871c 	.word	0x0800871c
 8001bac:	08008720 	.word	0x08008720
 8001bb0:	08008748 	.word	0x08008748
 8001bb4:	0800872c 	.word	0x0800872c
 8001bb8:	08008738 	.word	0x08008738

08001bbc <Measure_Distance>:

float Measure_Distance(void) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
    // 1. ?��리거 ?? HIGH�???????????????????? 10us ?��?�� ?���????????????????????
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);  // Trig ?? HIGH
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	4820      	ldr	r0, [pc, #128]	@ (8001c48 <Measure_Distance+0x8c>)
 8001bc6:	f000 ff91 	bl	8002aec <HAL_GPIO_WritePin>
    HAL_Delay(10);  // 10us ?��?�� ??�????????????????????
 8001bca:	200a      	movs	r0, #10
 8001bcc:	f000 fc2a 	bl	8002424 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);  // Trig ?? LOW
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	481c      	ldr	r0, [pc, #112]	@ (8001c48 <Measure_Distance+0x8c>)
 8001bd6:	f000 ff89 	bl	8002aec <HAL_GPIO_WritePin>
    //printf("TEST10\r\n");
    // 2. ?���???????????????????? ?? HIGH ?��?�� ??�????????????????????
    while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET);
 8001bda:	bf00      	nop
 8001bdc:	2102      	movs	r1, #2
 8001bde:	481a      	ldr	r0, [pc, #104]	@ (8001c48 <Measure_Distance+0x8c>)
 8001be0:	f000 ff6c 	bl	8002abc <HAL_GPIO_ReadPin>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f8      	beq.n	8001bdc <Measure_Distance+0x20>
    __HAL_TIM_SET_COUNTER(&htim2, 0);  // ???���?????????????? 카운?���?????????????? 0?���?????????????? ?��?��
 8001bea:	4b18      	ldr	r3, [pc, #96]	@ (8001c4c <Measure_Distance+0x90>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim2);        // ???���?????????????? ?��?��
 8001bf2:	4816      	ldr	r0, [pc, #88]	@ (8001c4c <Measure_Distance+0x90>)
 8001bf4:	f001 fc7c 	bl	80034f0 <HAL_TIM_Base_Start>
    //printf("TEST11\r\n");
    while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET);
 8001bf8:	bf00      	nop
 8001bfa:	2102      	movs	r1, #2
 8001bfc:	4812      	ldr	r0, [pc, #72]	@ (8001c48 <Measure_Distance+0x8c>)
 8001bfe:	f000 ff5d 	bl	8002abc <HAL_GPIO_ReadPin>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d0f8      	beq.n	8001bfa <Measure_Distance+0x3e>
    endTime = __HAL_TIM_GET_COUNTER(&htim2);  // ?���???????????????????? ?��?�� 종료 ?���???????????????????? 기록
 8001c08:	4b10      	ldr	r3, [pc, #64]	@ (8001c4c <Measure_Distance+0x90>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0e:	4a10      	ldr	r2, [pc, #64]	@ (8001c50 <Measure_Distance+0x94>)
 8001c10:	6013      	str	r3, [r2, #0]
    HAL_TIM_Base_Stop(&htim2);  // ???���?????????????? ?���??????????????
 8001c12:	480e      	ldr	r0, [pc, #56]	@ (8001c4c <Measure_Distance+0x90>)
 8001c14:	f001 fcc6 	bl	80035a4 <HAL_TIM_Base_Stop>
    //printf("TEST12\r\n");
    distance = (endTime * 0.0343f) / 2;  // 거리 계산 (?��?��?? 343m/s)
 8001c18:	4b0d      	ldr	r3, [pc, #52]	@ (8001c50 <Measure_Distance+0x94>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	ee07 3a90 	vmov	s15, r3
 8001c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c24:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001c54 <Measure_Distance+0x98>
 8001c28:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c2c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001c30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c34:	4b08      	ldr	r3, [pc, #32]	@ (8001c58 <Measure_Distance+0x9c>)
 8001c36:	edc3 7a00 	vstr	s15, [r3]

    return distance;
 8001c3a:	4b07      	ldr	r3, [pc, #28]	@ (8001c58 <Measure_Distance+0x9c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	ee07 3a90 	vmov	s15, r3
}
 8001c42:	eeb0 0a67 	vmov.f32	s0, s15
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	20000b18 	.word	0x20000b18
 8001c50:	20000bac 	.word	0x20000bac
 8001c54:	3d0c7e28 	.word	0x3d0c7e28
 8001c58:	20000bb0 	.word	0x20000bb0

08001c5c <go>:

static void go(void){							//go foward
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001c60:	2201      	movs	r2, #1
 8001c62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c66:	4810      	ldr	r0, [pc, #64]	@ (8001ca8 <go+0x4c>)
 8001c68:	f000 ff40 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c72:	480e      	ldr	r0, [pc, #56]	@ (8001cac <go+0x50>)
 8001c74:	f000 ff3a 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c7e:	480b      	ldr	r0, [pc, #44]	@ (8001cac <go+0x50>)
 8001c80:	f000 ff34 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c8a:	4808      	ldr	r0, [pc, #32]	@ (8001cac <go+0x50>)
 8001c8c:	f000 ff2e 	bl	8002aec <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,4499);		//right wheel PWM
 8001c90:	4b07      	ldr	r3, [pc, #28]	@ (8001cb0 <go+0x54>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f241 1293 	movw	r2, #4499	@ 0x1193
 8001c98:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,4499); 		//left wheel PWM
 8001c9a:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <go+0x54>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f241 1293 	movw	r2, #4499	@ 0x1193
 8001ca2:	639a      	str	r2, [r3, #56]	@ 0x38

}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	40020000 	.word	0x40020000
 8001cb0:	20000b60 	.word	0x20000b60

08001cb4 <turn_left>:
//
//	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,6999);		//right wheel PWM
//	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,6999); 		//left wheel PWM
//}

static void turn_left(void){ 			//turn left
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin,  GPIO_PIN_RESET);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cbe:	4810      	ldr	r0, [pc, #64]	@ (8001d00 <turn_left+0x4c>)
 8001cc0:	f000 ff14 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cca:	480e      	ldr	r0, [pc, #56]	@ (8001d04 <turn_left+0x50>)
 8001ccc:	f000 ff0e 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cd6:	480b      	ldr	r0, [pc, #44]	@ (8001d04 <turn_left+0x50>)
 8001cd8:	f000 ff08 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ce2:	4808      	ldr	r0, [pc, #32]	@ (8001d04 <turn_left+0x50>)
 8001ce4:	f000 ff02 	bl	8002aec <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,7999);	//left wheel PWM
 8001ce8:	4b07      	ldr	r3, [pc, #28]	@ (8001d08 <turn_left+0x54>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001cf0:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,7999);
 8001cf2:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <turn_left+0x54>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001cfa:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40020400 	.word	0x40020400
 8001d04:	40020000 	.word	0x40020000
 8001d08:	20000b60 	.word	0x20000b60

08001d0c <turn_right>:

static void turn_right(void)				//turn right
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001d10:	2201      	movs	r2, #1
 8001d12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d16:	4810      	ldr	r0, [pc, #64]	@ (8001d58 <turn_right+0x4c>)
 8001d18:	f000 fee8 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d22:	480e      	ldr	r0, [pc, #56]	@ (8001d5c <turn_right+0x50>)
 8001d24:	f000 fee2 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d2e:	480b      	ldr	r0, [pc, #44]	@ (8001d5c <turn_right+0x50>)
 8001d30:	f000 fedc 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 8001d34:	2201      	movs	r2, #1
 8001d36:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d3a:	4808      	ldr	r0, [pc, #32]	@ (8001d5c <turn_right+0x50>)
 8001d3c:	f000 fed6 	bl	8002aec <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,7999);
 8001d40:	4b07      	ldr	r3, [pc, #28]	@ (8001d60 <turn_right+0x54>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001d48:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,7999);
 8001d4a:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <turn_right+0x54>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001d52:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40020400 	.word	0x40020400
 8001d5c:	40020000 	.word	0x40020000
 8001d60:	20000b60 	.word	0x20000b60

08001d64 <stop>:

static void stop(void)							//stop
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d6e:	480b      	ldr	r0, [pc, #44]	@ (8001d9c <stop+0x38>)
 8001d70:	f000 febc 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8001d74:	2200      	movs	r2, #0
 8001d76:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d7a:	4809      	ldr	r0, [pc, #36]	@ (8001da0 <stop+0x3c>)
 8001d7c:	f000 feb6 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001d80:	2200      	movs	r2, #0
 8001d82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d86:	4806      	ldr	r0, [pc, #24]	@ (8001da0 <stop+0x3c>)
 8001d88:	f000 feb0 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d92:	4803      	ldr	r0, [pc, #12]	@ (8001da0 <stop+0x3c>)
 8001d94:	f000 feaa 	bl	8002aec <HAL_GPIO_WritePin>
}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40020400 	.word	0x40020400
 8001da0:	40020000 	.word	0x40020000

08001da4 <r_mode>:

static void r_mode(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
			if((HAL_GPIO_ReadPin(R_Sensor_GPIO_Port, R_Sensor_Pin))==1) //if Rsensor detect black color
 8001da8:	2120      	movs	r1, #32
 8001daa:	480d      	ldr	r0, [pc, #52]	@ (8001de0 <r_mode+0x3c>)
 8001dac:	f000 fe86 	bl	8002abc <HAL_GPIO_ReadPin>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d103      	bne.n	8001dbe <r_mode+0x1a>
			{
				Rsensor = true;
 8001db6:	4b0b      	ldr	r3, [pc, #44]	@ (8001de4 <r_mode+0x40>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	e002      	b.n	8001dc4 <r_mode+0x20>
			}
			else
			{
				Rsensor = false;																					//Sensor detect white color
 8001dbe:	4b09      	ldr	r3, [pc, #36]	@ (8001de4 <r_mode+0x40>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
			}

			if(Rsensor == false )			//R,Lsemsor detect white
 8001dc4:	4b07      	ldr	r3, [pc, #28]	@ (8001de4 <r_mode+0x40>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	f083 0301 	eor.w	r3, r3, #1
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <r_mode+0x34>
			{
				go();
 8001dd2:	f7ff ff43 	bl	8001c5c <go>
			}
			else
			{
				turn_left();
			}
}
 8001dd6:	e001      	b.n	8001ddc <r_mode+0x38>
				turn_left();
 8001dd8:	f7ff ff6c 	bl	8001cb4 <turn_left>
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40020400 	.word	0x40020400
 8001de4:	20000ba9 	.word	0x20000ba9

08001de8 <l_mode>:

static void l_mode(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
			if((HAL_GPIO_ReadPin(L_Sensor_GPIO_Port, L_Sensor_Pin))==1) //if Lsensor detect black color
 8001dec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001df0:	480d      	ldr	r0, [pc, #52]	@ (8001e28 <l_mode+0x40>)
 8001df2:	f000 fe63 	bl	8002abc <HAL_GPIO_ReadPin>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d103      	bne.n	8001e04 <l_mode+0x1c>
			{
				Lsensor = true;
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e2c <l_mode+0x44>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
 8001e02:	e002      	b.n	8001e0a <l_mode+0x22>
			}
			else
			{
				Lsensor = false;																					//Sensor detect white color
 8001e04:	4b09      	ldr	r3, [pc, #36]	@ (8001e2c <l_mode+0x44>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
			}
			if(Lsensor == false)			//R,Lsemsor detect white
 8001e0a:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <l_mode+0x44>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	f083 0301 	eor.w	r3, r3, #1
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <l_mode+0x36>
			{
				go();
 8001e18:	f7ff ff20 	bl	8001c5c <go>

			else
			{
				turn_right();
			}
}
 8001e1c:	e001      	b.n	8001e22 <l_mode+0x3a>
				turn_right();
 8001e1e:	f7ff ff75 	bl	8001d0c <turn_right>
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40020000 	.word	0x40020000
 8001e2c:	20000ba8 	.word	0x20000ba8

08001e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e34:	b672      	cpsid	i
}
 8001e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <Error_Handler+0x8>

08001e3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <HAL_MspInit+0x4c>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e88 <HAL_MspInit+0x4c>)
 8001e4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e52:	4b0d      	ldr	r3, [pc, #52]	@ (8001e88 <HAL_MspInit+0x4c>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	603b      	str	r3, [r7, #0]
 8001e62:	4b09      	ldr	r3, [pc, #36]	@ (8001e88 <HAL_MspInit+0x4c>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	4a08      	ldr	r2, [pc, #32]	@ (8001e88 <HAL_MspInit+0x4c>)
 8001e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e6e:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <HAL_MspInit+0x4c>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e7a:	2007      	movs	r0, #7
 8001e7c:	f000 fbc6 	bl	800260c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e80:	bf00      	nop
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40023800 	.word	0x40023800

08001e8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1f      	ldr	r2, [pc, #124]	@ (8001f18 <HAL_TIM_Base_MspInit+0x8c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d10e      	bne.n	8001ebc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f1c <HAL_TIM_Base_MspInit+0x90>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea6:	4a1d      	ldr	r2, [pc, #116]	@ (8001f1c <HAL_TIM_Base_MspInit+0x90>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eae:	4b1b      	ldr	r3, [pc, #108]	@ (8001f1c <HAL_TIM_Base_MspInit+0x90>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001eba:	e026      	b.n	8001f0a <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ec4:	d10e      	bne.n	8001ee4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	4b14      	ldr	r3, [pc, #80]	@ (8001f1c <HAL_TIM_Base_MspInit+0x90>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	4a13      	ldr	r2, [pc, #76]	@ (8001f1c <HAL_TIM_Base_MspInit+0x90>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ed6:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <HAL_TIM_Base_MspInit+0x90>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	693b      	ldr	r3, [r7, #16]
}
 8001ee2:	e012      	b.n	8001f0a <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f20 <HAL_TIM_Base_MspInit+0x94>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d10d      	bne.n	8001f0a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f1c <HAL_TIM_Base_MspInit+0x90>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	4a09      	ldr	r2, [pc, #36]	@ (8001f1c <HAL_TIM_Base_MspInit+0x90>)
 8001ef8:	f043 0302 	orr.w	r3, r3, #2
 8001efc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001efe:	4b07      	ldr	r3, [pc, #28]	@ (8001f1c <HAL_TIM_Base_MspInit+0x90>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
}
 8001f0a:	bf00      	nop
 8001f0c:	371c      	adds	r7, #28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40010000 	.word	0x40010000
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40000400 	.word	0x40000400

08001f24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 030c 	add.w	r3, r7, #12
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a12      	ldr	r2, [pc, #72]	@ (8001f8c <HAL_TIM_MspPostInit+0x68>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d11d      	bne.n	8001f82 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <HAL_TIM_MspPostInit+0x6c>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	4a10      	ldr	r2, [pc, #64]	@ (8001f90 <HAL_TIM_MspPostInit+0x6c>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f56:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <HAL_TIM_MspPostInit+0x6c>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f62:	23c0      	movs	r3, #192	@ 0xc0
 8001f64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f72:	2302      	movs	r3, #2
 8001f74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f76:	f107 030c 	add.w	r3, r7, #12
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4805      	ldr	r0, [pc, #20]	@ (8001f94 <HAL_TIM_MspPostInit+0x70>)
 8001f7e:	f000 fc19 	bl	80027b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f82:	bf00      	nop
 8001f84:	3720      	adds	r7, #32
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40000400 	.word	0x40000400
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40020000 	.word	0x40020000

08001f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08c      	sub	sp, #48	@ 0x30
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 031c 	add.w	r3, r7, #28
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a3a      	ldr	r2, [pc, #232]	@ (80020a0 <HAL_UART_MspInit+0x108>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d134      	bne.n	8002024 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	4b39      	ldr	r3, [pc, #228]	@ (80020a4 <HAL_UART_MspInit+0x10c>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	4a38      	ldr	r2, [pc, #224]	@ (80020a4 <HAL_UART_MspInit+0x10c>)
 8001fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fca:	4b36      	ldr	r3, [pc, #216]	@ (80020a4 <HAL_UART_MspInit+0x10c>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd2:	61bb      	str	r3, [r7, #24]
 8001fd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	4b32      	ldr	r3, [pc, #200]	@ (80020a4 <HAL_UART_MspInit+0x10c>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	4a31      	ldr	r2, [pc, #196]	@ (80020a4 <HAL_UART_MspInit+0x10c>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe6:	4b2f      	ldr	r3, [pc, #188]	@ (80020a4 <HAL_UART_MspInit+0x10c>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ff2:	230c      	movs	r3, #12
 8001ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffe:	2303      	movs	r3, #3
 8002000:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002002:	2307      	movs	r3, #7
 8002004:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002006:	f107 031c 	add.w	r3, r7, #28
 800200a:	4619      	mov	r1, r3
 800200c:	4826      	ldr	r0, [pc, #152]	@ (80020a8 <HAL_UART_MspInit+0x110>)
 800200e:	f000 fbd1 	bl	80027b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002012:	2200      	movs	r2, #0
 8002014:	2100      	movs	r1, #0
 8002016:	2026      	movs	r0, #38	@ 0x26
 8002018:	f000 fb03 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800201c:	2026      	movs	r0, #38	@ 0x26
 800201e:	f000 fb1c 	bl	800265a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002022:	e038      	b.n	8002096 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a20      	ldr	r2, [pc, #128]	@ (80020ac <HAL_UART_MspInit+0x114>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d133      	bne.n	8002096 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	4b1c      	ldr	r3, [pc, #112]	@ (80020a4 <HAL_UART_MspInit+0x10c>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002036:	4a1b      	ldr	r2, [pc, #108]	@ (80020a4 <HAL_UART_MspInit+0x10c>)
 8002038:	f043 0320 	orr.w	r3, r3, #32
 800203c:	6453      	str	r3, [r2, #68]	@ 0x44
 800203e:	4b19      	ldr	r3, [pc, #100]	@ (80020a4 <HAL_UART_MspInit+0x10c>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	4b15      	ldr	r3, [pc, #84]	@ (80020a4 <HAL_UART_MspInit+0x10c>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	4a14      	ldr	r2, [pc, #80]	@ (80020a4 <HAL_UART_MspInit+0x10c>)
 8002054:	f043 0304 	orr.w	r3, r3, #4
 8002058:	6313      	str	r3, [r2, #48]	@ 0x30
 800205a:	4b12      	ldr	r3, [pc, #72]	@ (80020a4 <HAL_UART_MspInit+0x10c>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002066:	23c0      	movs	r3, #192	@ 0xc0
 8002068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002072:	2303      	movs	r3, #3
 8002074:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002076:	2308      	movs	r3, #8
 8002078:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800207a:	f107 031c 	add.w	r3, r7, #28
 800207e:	4619      	mov	r1, r3
 8002080:	480b      	ldr	r0, [pc, #44]	@ (80020b0 <HAL_UART_MspInit+0x118>)
 8002082:	f000 fb97 	bl	80027b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	2100      	movs	r1, #0
 800208a:	2047      	movs	r0, #71	@ 0x47
 800208c:	f000 fac9 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002090:	2047      	movs	r0, #71	@ 0x47
 8002092:	f000 fae2 	bl	800265a <HAL_NVIC_EnableIRQ>
}
 8002096:	bf00      	nop
 8002098:	3730      	adds	r7, #48	@ 0x30
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40004400 	.word	0x40004400
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40020000 	.word	0x40020000
 80020ac:	40011400 	.word	0x40011400
 80020b0:	40020800 	.word	0x40020800

080020b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <NMI_Handler+0x4>

080020bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020c0:	bf00      	nop
 80020c2:	e7fd      	b.n	80020c0 <HardFault_Handler+0x4>

080020c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c8:	bf00      	nop
 80020ca:	e7fd      	b.n	80020c8 <MemManage_Handler+0x4>

080020cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d0:	bf00      	nop
 80020d2:	e7fd      	b.n	80020d0 <BusFault_Handler+0x4>

080020d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d8:	bf00      	nop
 80020da:	e7fd      	b.n	80020d8 <UsageFault_Handler+0x4>

080020dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800210a:	f000 f96b 	bl	80023e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002118:	4802      	ldr	r0, [pc, #8]	@ (8002124 <USART2_IRQHandler+0x10>)
 800211a:	f002 f943 	bl	80043a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000600 	.word	0x20000600

08002128 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800212c:	4802      	ldr	r0, [pc, #8]	@ (8002138 <USART6_IRQHandler+0x10>)
 800212e:	f002 f939 	bl	80043a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000a84 	.word	0x20000a84

0800213c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return 1;
 8002140:	2301      	movs	r3, #1
}
 8002142:	4618      	mov	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <_kill>:

int _kill(int pid, int sig)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002156:	f003 ffe9 	bl	800612c <__errno>
 800215a:	4603      	mov	r3, r0
 800215c:	2216      	movs	r2, #22
 800215e:	601a      	str	r2, [r3, #0]
  return -1;
 8002160:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <_exit>:

void _exit (int status)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002174:	f04f 31ff 	mov.w	r1, #4294967295
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ffe7 	bl	800214c <_kill>
  while (1) {}    /* Make sure we hang here */
 800217e:	bf00      	nop
 8002180:	e7fd      	b.n	800217e <_exit+0x12>

08002182 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b086      	sub	sp, #24
 8002186:	af00      	add	r7, sp, #0
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	e00a      	b.n	80021aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002194:	f3af 8000 	nop.w
 8002198:	4601      	mov	r1, r0
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	60ba      	str	r2, [r7, #8]
 80021a0:	b2ca      	uxtb	r2, r1
 80021a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	3301      	adds	r3, #1
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	dbf0      	blt.n	8002194 <_read+0x12>
  }

  return len;
 80021b2:	687b      	ldr	r3, [r7, #4]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	e009      	b.n	80021e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	60ba      	str	r2, [r7, #8]
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff f930 	bl	800143c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	3301      	adds	r3, #1
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	dbf1      	blt.n	80021ce <_write+0x12>
  }
  return len;
 80021ea:	687b      	ldr	r3, [r7, #4]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <_close>:

int _close(int file)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800221c:	605a      	str	r2, [r3, #4]
  return 0;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <_isatty>:

int _isatty(int file)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002234:	2301      	movs	r3, #1
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002242:	b480      	push	{r7}
 8002244:	b085      	sub	sp, #20
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002264:	4a14      	ldr	r2, [pc, #80]	@ (80022b8 <_sbrk+0x5c>)
 8002266:	4b15      	ldr	r3, [pc, #84]	@ (80022bc <_sbrk+0x60>)
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002270:	4b13      	ldr	r3, [pc, #76]	@ (80022c0 <_sbrk+0x64>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d102      	bne.n	800227e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002278:	4b11      	ldr	r3, [pc, #68]	@ (80022c0 <_sbrk+0x64>)
 800227a:	4a12      	ldr	r2, [pc, #72]	@ (80022c4 <_sbrk+0x68>)
 800227c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800227e:	4b10      	ldr	r3, [pc, #64]	@ (80022c0 <_sbrk+0x64>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	429a      	cmp	r2, r3
 800228a:	d207      	bcs.n	800229c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800228c:	f003 ff4e 	bl	800612c <__errno>
 8002290:	4603      	mov	r3, r0
 8002292:	220c      	movs	r2, #12
 8002294:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002296:	f04f 33ff 	mov.w	r3, #4294967295
 800229a:	e009      	b.n	80022b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800229c:	4b08      	ldr	r3, [pc, #32]	@ (80022c0 <_sbrk+0x64>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022a2:	4b07      	ldr	r3, [pc, #28]	@ (80022c0 <_sbrk+0x64>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	4a05      	ldr	r2, [pc, #20]	@ (80022c0 <_sbrk+0x64>)
 80022ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ae:	68fb      	ldr	r3, [r7, #12]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20020000 	.word	0x20020000
 80022bc:	00000400 	.word	0x00000400
 80022c0:	20000bf8 	.word	0x20000bf8
 80022c4:	20000d50 	.word	0x20000d50

080022c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022cc:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <SystemInit+0x20>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d2:	4a05      	ldr	r2, [pc, #20]	@ (80022e8 <SystemInit+0x20>)
 80022d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002324 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022f0:	f7ff ffea 	bl	80022c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022f4:	480c      	ldr	r0, [pc, #48]	@ (8002328 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022f6:	490d      	ldr	r1, [pc, #52]	@ (800232c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002330 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022fc:	e002      	b.n	8002304 <LoopCopyDataInit>

080022fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002302:	3304      	adds	r3, #4

08002304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002308:	d3f9      	bcc.n	80022fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800230a:	4a0a      	ldr	r2, [pc, #40]	@ (8002334 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800230c:	4c0a      	ldr	r4, [pc, #40]	@ (8002338 <LoopFillZerobss+0x22>)
  movs r3, #0
 800230e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002310:	e001      	b.n	8002316 <LoopFillZerobss>

08002312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002314:	3204      	adds	r2, #4

08002316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002318:	d3fb      	bcc.n	8002312 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800231a:	f003 ff0d 	bl	8006138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800231e:	f7ff f8a5 	bl	800146c <main>
  bx  lr    
 8002322:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002324:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800232c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002330:	08008b4c 	.word	0x08008b4c
  ldr r2, =_sbss
 8002334:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002338:	20000d4c 	.word	0x20000d4c

0800233c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800233c:	e7fe      	b.n	800233c <ADC_IRQHandler>
	...

08002340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002344:	4b0e      	ldr	r3, [pc, #56]	@ (8002380 <HAL_Init+0x40>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a0d      	ldr	r2, [pc, #52]	@ (8002380 <HAL_Init+0x40>)
 800234a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800234e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002350:	4b0b      	ldr	r3, [pc, #44]	@ (8002380 <HAL_Init+0x40>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0a      	ldr	r2, [pc, #40]	@ (8002380 <HAL_Init+0x40>)
 8002356:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800235a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800235c:	4b08      	ldr	r3, [pc, #32]	@ (8002380 <HAL_Init+0x40>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a07      	ldr	r2, [pc, #28]	@ (8002380 <HAL_Init+0x40>)
 8002362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002366:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002368:	2003      	movs	r0, #3
 800236a:	f000 f94f 	bl	800260c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800236e:	2000      	movs	r0, #0
 8002370:	f000 f808 	bl	8002384 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002374:	f7ff fd62 	bl	8001e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023c00 	.word	0x40023c00

08002384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800238c:	4b12      	ldr	r3, [pc, #72]	@ (80023d8 <HAL_InitTick+0x54>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b12      	ldr	r3, [pc, #72]	@ (80023dc <HAL_InitTick+0x58>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	4619      	mov	r1, r3
 8002396:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800239a:	fbb3 f3f1 	udiv	r3, r3, r1
 800239e:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 f967 	bl	8002676 <HAL_SYSTICK_Config>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e00e      	b.n	80023d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b0f      	cmp	r3, #15
 80023b6:	d80a      	bhi.n	80023ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023b8:	2200      	movs	r2, #0
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295
 80023c0:	f000 f92f 	bl	8002622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023c4:	4a06      	ldr	r2, [pc, #24]	@ (80023e0 <HAL_InitTick+0x5c>)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	e000      	b.n	80023d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000000 	.word	0x20000000
 80023dc:	20000008 	.word	0x20000008
 80023e0:	20000004 	.word	0x20000004

080023e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e8:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <HAL_IncTick+0x20>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	461a      	mov	r2, r3
 80023ee:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <HAL_IncTick+0x24>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4413      	add	r3, r2
 80023f4:	4a04      	ldr	r2, [pc, #16]	@ (8002408 <HAL_IncTick+0x24>)
 80023f6:	6013      	str	r3, [r2, #0]
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000008 	.word	0x20000008
 8002408:	20000bfc 	.word	0x20000bfc

0800240c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return uwTick;
 8002410:	4b03      	ldr	r3, [pc, #12]	@ (8002420 <HAL_GetTick+0x14>)
 8002412:	681b      	ldr	r3, [r3, #0]
}
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000bfc 	.word	0x20000bfc

08002424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800242c:	f7ff ffee 	bl	800240c <HAL_GetTick>
 8002430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243c:	d005      	beq.n	800244a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800243e:	4b0a      	ldr	r3, [pc, #40]	@ (8002468 <HAL_Delay+0x44>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4413      	add	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800244a:	bf00      	nop
 800244c:	f7ff ffde 	bl	800240c <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	429a      	cmp	r2, r3
 800245a:	d8f7      	bhi.n	800244c <HAL_Delay+0x28>
  {
  }
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000008 	.word	0x20000008

0800246c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800247c:	4b0c      	ldr	r3, [pc, #48]	@ (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002488:	4013      	ands	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002494:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800249c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249e:	4a04      	ldr	r2, [pc, #16]	@ (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	60d3      	str	r3, [r2, #12]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b8:	4b04      	ldr	r3, [pc, #16]	@ (80024cc <__NVIC_GetPriorityGrouping+0x18>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	f003 0307 	and.w	r3, r3, #7
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	db0b      	blt.n	80024fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	f003 021f 	and.w	r2, r3, #31
 80024e8:	4907      	ldr	r1, [pc, #28]	@ (8002508 <__NVIC_EnableIRQ+0x38>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	2001      	movs	r0, #1
 80024f2:	fa00 f202 	lsl.w	r2, r0, r2
 80024f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000e100 	.word	0xe000e100

0800250c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	6039      	str	r1, [r7, #0]
 8002516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251c:	2b00      	cmp	r3, #0
 800251e:	db0a      	blt.n	8002536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	b2da      	uxtb	r2, r3
 8002524:	490c      	ldr	r1, [pc, #48]	@ (8002558 <__NVIC_SetPriority+0x4c>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	0112      	lsls	r2, r2, #4
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	440b      	add	r3, r1
 8002530:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002534:	e00a      	b.n	800254c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4908      	ldr	r1, [pc, #32]	@ (800255c <__NVIC_SetPriority+0x50>)
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	3b04      	subs	r3, #4
 8002544:	0112      	lsls	r2, r2, #4
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	440b      	add	r3, r1
 800254a:	761a      	strb	r2, [r3, #24]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000e100 	.word	0xe000e100
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002560:	b480      	push	{r7}
 8002562:	b089      	sub	sp, #36	@ 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f1c3 0307 	rsb	r3, r3, #7
 800257a:	2b04      	cmp	r3, #4
 800257c:	bf28      	it	cs
 800257e:	2304      	movcs	r3, #4
 8002580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3304      	adds	r3, #4
 8002586:	2b06      	cmp	r3, #6
 8002588:	d902      	bls.n	8002590 <NVIC_EncodePriority+0x30>
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3b03      	subs	r3, #3
 800258e:	e000      	b.n	8002592 <NVIC_EncodePriority+0x32>
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002594:	f04f 32ff 	mov.w	r2, #4294967295
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43da      	mvns	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	401a      	ands	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	43d9      	mvns	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	4313      	orrs	r3, r2
         );
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3724      	adds	r7, #36	@ 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025d8:	d301      	bcc.n	80025de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025da:	2301      	movs	r3, #1
 80025dc:	e00f      	b.n	80025fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025de:	4a0a      	ldr	r2, [pc, #40]	@ (8002608 <SysTick_Config+0x40>)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025e6:	210f      	movs	r1, #15
 80025e8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ec:	f7ff ff8e 	bl	800250c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025f0:	4b05      	ldr	r3, [pc, #20]	@ (8002608 <SysTick_Config+0x40>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025f6:	4b04      	ldr	r3, [pc, #16]	@ (8002608 <SysTick_Config+0x40>)
 80025f8:	2207      	movs	r2, #7
 80025fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	e000e010 	.word	0xe000e010

0800260c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ff29 	bl	800246c <__NVIC_SetPriorityGrouping>
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002622:	b580      	push	{r7, lr}
 8002624:	b086      	sub	sp, #24
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002634:	f7ff ff3e 	bl	80024b4 <__NVIC_GetPriorityGrouping>
 8002638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	6978      	ldr	r0, [r7, #20]
 8002640:	f7ff ff8e 	bl	8002560 <NVIC_EncodePriority>
 8002644:	4602      	mov	r2, r0
 8002646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff5d 	bl	800250c <__NVIC_SetPriority>
}
 8002652:	bf00      	nop
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	4603      	mov	r3, r0
 8002662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff31 	bl	80024d0 <__NVIC_EnableIRQ>
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ffa2 	bl	80025c8 <SysTick_Config>
 8002684:	4603      	mov	r3, r0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800269c:	f7ff feb6 	bl	800240c <HAL_GetTick>
 80026a0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d008      	beq.n	80026c0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2280      	movs	r2, #128	@ 0x80
 80026b2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e052      	b.n	8002766 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0216 	bic.w	r2, r2, #22
 80026ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026de:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d103      	bne.n	80026f0 <HAL_DMA_Abort+0x62>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d007      	beq.n	8002700 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0208 	bic.w	r2, r2, #8
 80026fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0201 	bic.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002710:	e013      	b.n	800273a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002712:	f7ff fe7b 	bl	800240c <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b05      	cmp	r3, #5
 800271e:	d90c      	bls.n	800273a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2220      	movs	r2, #32
 8002724:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2203      	movs	r2, #3
 800272a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e015      	b.n	8002766 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1e4      	bne.n	8002712 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274c:	223f      	movs	r2, #63	@ 0x3f
 800274e:	409a      	lsls	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d004      	beq.n	800278c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2280      	movs	r2, #128	@ 0x80
 8002786:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e00c      	b.n	80027a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2205      	movs	r2, #5
 8002790:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0201 	bic.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b089      	sub	sp, #36	@ 0x24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
 80027ce:	e159      	b.n	8002a84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027d0:	2201      	movs	r2, #1
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	4013      	ands	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	f040 8148 	bne.w	8002a7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d005      	beq.n	8002806 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002802:	2b02      	cmp	r3, #2
 8002804:	d130      	bne.n	8002868 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	2203      	movs	r2, #3
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800283c:	2201      	movs	r2, #1
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	f003 0201 	and.w	r2, r3, #1
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	2b03      	cmp	r3, #3
 8002872:	d017      	beq.n	80028a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	2203      	movs	r2, #3
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d123      	bne.n	80028f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	08da      	lsrs	r2, r3, #3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3208      	adds	r2, #8
 80028b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	220f      	movs	r2, #15
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	08da      	lsrs	r2, r3, #3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3208      	adds	r2, #8
 80028f2:	69b9      	ldr	r1, [r7, #24]
 80028f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	2203      	movs	r2, #3
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 0203 	and.w	r2, r3, #3
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80a2 	beq.w	8002a7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	4b57      	ldr	r3, [pc, #348]	@ (8002a9c <HAL_GPIO_Init+0x2e8>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002942:	4a56      	ldr	r2, [pc, #344]	@ (8002a9c <HAL_GPIO_Init+0x2e8>)
 8002944:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002948:	6453      	str	r3, [r2, #68]	@ 0x44
 800294a:	4b54      	ldr	r3, [pc, #336]	@ (8002a9c <HAL_GPIO_Init+0x2e8>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002956:	4a52      	ldr	r2, [pc, #328]	@ (8002aa0 <HAL_GPIO_Init+0x2ec>)
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	089b      	lsrs	r3, r3, #2
 800295c:	3302      	adds	r3, #2
 800295e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	220f      	movs	r2, #15
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4013      	ands	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a49      	ldr	r2, [pc, #292]	@ (8002aa4 <HAL_GPIO_Init+0x2f0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d019      	beq.n	80029b6 <HAL_GPIO_Init+0x202>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a48      	ldr	r2, [pc, #288]	@ (8002aa8 <HAL_GPIO_Init+0x2f4>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d013      	beq.n	80029b2 <HAL_GPIO_Init+0x1fe>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a47      	ldr	r2, [pc, #284]	@ (8002aac <HAL_GPIO_Init+0x2f8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d00d      	beq.n	80029ae <HAL_GPIO_Init+0x1fa>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a46      	ldr	r2, [pc, #280]	@ (8002ab0 <HAL_GPIO_Init+0x2fc>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d007      	beq.n	80029aa <HAL_GPIO_Init+0x1f6>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a45      	ldr	r2, [pc, #276]	@ (8002ab4 <HAL_GPIO_Init+0x300>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d101      	bne.n	80029a6 <HAL_GPIO_Init+0x1f2>
 80029a2:	2304      	movs	r3, #4
 80029a4:	e008      	b.n	80029b8 <HAL_GPIO_Init+0x204>
 80029a6:	2307      	movs	r3, #7
 80029a8:	e006      	b.n	80029b8 <HAL_GPIO_Init+0x204>
 80029aa:	2303      	movs	r3, #3
 80029ac:	e004      	b.n	80029b8 <HAL_GPIO_Init+0x204>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e002      	b.n	80029b8 <HAL_GPIO_Init+0x204>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <HAL_GPIO_Init+0x204>
 80029b6:	2300      	movs	r3, #0
 80029b8:	69fa      	ldr	r2, [r7, #28]
 80029ba:	f002 0203 	and.w	r2, r2, #3
 80029be:	0092      	lsls	r2, r2, #2
 80029c0:	4093      	lsls	r3, r2
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029c8:	4935      	ldr	r1, [pc, #212]	@ (8002aa0 <HAL_GPIO_Init+0x2ec>)
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	089b      	lsrs	r3, r3, #2
 80029ce:	3302      	adds	r3, #2
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029d6:	4b38      	ldr	r3, [pc, #224]	@ (8002ab8 <HAL_GPIO_Init+0x304>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029fa:	4a2f      	ldr	r2, [pc, #188]	@ (8002ab8 <HAL_GPIO_Init+0x304>)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a00:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab8 <HAL_GPIO_Init+0x304>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a24:	4a24      	ldr	r2, [pc, #144]	@ (8002ab8 <HAL_GPIO_Init+0x304>)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a2a:	4b23      	ldr	r3, [pc, #140]	@ (8002ab8 <HAL_GPIO_Init+0x304>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a4e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ab8 <HAL_GPIO_Init+0x304>)
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a54:	4b18      	ldr	r3, [pc, #96]	@ (8002ab8 <HAL_GPIO_Init+0x304>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a78:	4a0f      	ldr	r2, [pc, #60]	@ (8002ab8 <HAL_GPIO_Init+0x304>)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3301      	adds	r3, #1
 8002a82:	61fb      	str	r3, [r7, #28]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	2b0f      	cmp	r3, #15
 8002a88:	f67f aea2 	bls.w	80027d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	3724      	adds	r7, #36	@ 0x24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40013800 	.word	0x40013800
 8002aa4:	40020000 	.word	0x40020000
 8002aa8:	40020400 	.word	0x40020400
 8002aac:	40020800 	.word	0x40020800
 8002ab0:	40020c00 	.word	0x40020c00
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40013c00 	.word	0x40013c00

08002abc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	887b      	ldrh	r3, [r7, #2]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
 8002ad8:	e001      	b.n	8002ade <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ada:	2300      	movs	r3, #0
 8002adc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	807b      	strh	r3, [r7, #2]
 8002af8:	4613      	mov	r3, r2
 8002afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002afc:	787b      	ldrb	r3, [r7, #1]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b02:	887a      	ldrh	r2, [r7, #2]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b08:	e003      	b.n	8002b12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b0a:	887b      	ldrh	r3, [r7, #2]
 8002b0c:	041a      	lsls	r2, r3, #16
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	619a      	str	r2, [r3, #24]
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
	...

08002b20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e267      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d075      	beq.n	8002c2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b3e:	4b88      	ldr	r3, [pc, #544]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d00c      	beq.n	8002b64 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b4a:	4b85      	ldr	r3, [pc, #532]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d112      	bne.n	8002b7c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b56:	4b82      	ldr	r3, [pc, #520]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b62:	d10b      	bne.n	8002b7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b64:	4b7e      	ldr	r3, [pc, #504]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d05b      	beq.n	8002c28 <HAL_RCC_OscConfig+0x108>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d157      	bne.n	8002c28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e242      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b84:	d106      	bne.n	8002b94 <HAL_RCC_OscConfig+0x74>
 8002b86:	4b76      	ldr	r3, [pc, #472]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a75      	ldr	r2, [pc, #468]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	e01d      	b.n	8002bd0 <HAL_RCC_OscConfig+0xb0>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x98>
 8002b9e:	4b70      	ldr	r3, [pc, #448]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a6f      	ldr	r2, [pc, #444]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	4b6d      	ldr	r3, [pc, #436]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a6c      	ldr	r2, [pc, #432]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	e00b      	b.n	8002bd0 <HAL_RCC_OscConfig+0xb0>
 8002bb8:	4b69      	ldr	r3, [pc, #420]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a68      	ldr	r2, [pc, #416]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002bbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	4b66      	ldr	r3, [pc, #408]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a65      	ldr	r2, [pc, #404]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002bca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d013      	beq.n	8002c00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd8:	f7ff fc18 	bl	800240c <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be0:	f7ff fc14 	bl	800240c <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b64      	cmp	r3, #100	@ 0x64
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e207      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf2:	4b5b      	ldr	r3, [pc, #364]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCC_OscConfig+0xc0>
 8002bfe:	e014      	b.n	8002c2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7ff fc04 	bl	800240c <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c08:	f7ff fc00 	bl	800240c <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b64      	cmp	r3, #100	@ 0x64
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e1f3      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1a:	4b51      	ldr	r3, [pc, #324]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0xe8>
 8002c26:	e000      	b.n	8002c2a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d063      	beq.n	8002cfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c36:	4b4a      	ldr	r3, [pc, #296]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c42:	4b47      	ldr	r3, [pc, #284]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d11c      	bne.n	8002c88 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c4e:	4b44      	ldr	r3, [pc, #272]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d116      	bne.n	8002c88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5a:	4b41      	ldr	r3, [pc, #260]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d005      	beq.n	8002c72 <HAL_RCC_OscConfig+0x152>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d001      	beq.n	8002c72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e1c7      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c72:	4b3b      	ldr	r3, [pc, #236]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4937      	ldr	r1, [pc, #220]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c86:	e03a      	b.n	8002cfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d020      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c90:	4b34      	ldr	r3, [pc, #208]	@ (8002d64 <HAL_RCC_OscConfig+0x244>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c96:	f7ff fbb9 	bl	800240c <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c9e:	f7ff fbb5 	bl	800240c <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e1a8      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbc:	4b28      	ldr	r3, [pc, #160]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	4925      	ldr	r1, [pc, #148]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	600b      	str	r3, [r1, #0]
 8002cd0:	e015      	b.n	8002cfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cd2:	4b24      	ldr	r3, [pc, #144]	@ (8002d64 <HAL_RCC_OscConfig+0x244>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd8:	f7ff fb98 	bl	800240c <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce0:	f7ff fb94 	bl	800240c <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e187      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d036      	beq.n	8002d78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d016      	beq.n	8002d40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d12:	4b15      	ldr	r3, [pc, #84]	@ (8002d68 <HAL_RCC_OscConfig+0x248>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d18:	f7ff fb78 	bl	800240c <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d20:	f7ff fb74 	bl	800240c <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e167      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d32:	4b0b      	ldr	r3, [pc, #44]	@ (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0x200>
 8002d3e:	e01b      	b.n	8002d78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d40:	4b09      	ldr	r3, [pc, #36]	@ (8002d68 <HAL_RCC_OscConfig+0x248>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d46:	f7ff fb61 	bl	800240c <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d4c:	e00e      	b.n	8002d6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d4e:	f7ff fb5d 	bl	800240c <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d907      	bls.n	8002d6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e150      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
 8002d60:	40023800 	.word	0x40023800
 8002d64:	42470000 	.word	0x42470000
 8002d68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d6c:	4b88      	ldr	r3, [pc, #544]	@ (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002d6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1ea      	bne.n	8002d4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 8097 	beq.w	8002eb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d86:	2300      	movs	r3, #0
 8002d88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d8a:	4b81      	ldr	r3, [pc, #516]	@ (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10f      	bne.n	8002db6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	60bb      	str	r3, [r7, #8]
 8002d9a:	4b7d      	ldr	r3, [pc, #500]	@ (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9e:	4a7c      	ldr	r2, [pc, #496]	@ (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002da6:	4b7a      	ldr	r3, [pc, #488]	@ (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dae:	60bb      	str	r3, [r7, #8]
 8002db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002db2:	2301      	movs	r3, #1
 8002db4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db6:	4b77      	ldr	r3, [pc, #476]	@ (8002f94 <HAL_RCC_OscConfig+0x474>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d118      	bne.n	8002df4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dc2:	4b74      	ldr	r3, [pc, #464]	@ (8002f94 <HAL_RCC_OscConfig+0x474>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a73      	ldr	r2, [pc, #460]	@ (8002f94 <HAL_RCC_OscConfig+0x474>)
 8002dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dce:	f7ff fb1d 	bl	800240c <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd6:	f7ff fb19 	bl	800240c <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e10c      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de8:	4b6a      	ldr	r3, [pc, #424]	@ (8002f94 <HAL_RCC_OscConfig+0x474>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d106      	bne.n	8002e0a <HAL_RCC_OscConfig+0x2ea>
 8002dfc:	4b64      	ldr	r3, [pc, #400]	@ (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e00:	4a63      	ldr	r2, [pc, #396]	@ (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e08:	e01c      	b.n	8002e44 <HAL_RCC_OscConfig+0x324>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2b05      	cmp	r3, #5
 8002e10:	d10c      	bne.n	8002e2c <HAL_RCC_OscConfig+0x30c>
 8002e12:	4b5f      	ldr	r3, [pc, #380]	@ (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e16:	4a5e      	ldr	r2, [pc, #376]	@ (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002e18:	f043 0304 	orr.w	r3, r3, #4
 8002e1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e1e:	4b5c      	ldr	r3, [pc, #368]	@ (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e22:	4a5b      	ldr	r2, [pc, #364]	@ (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e2a:	e00b      	b.n	8002e44 <HAL_RCC_OscConfig+0x324>
 8002e2c:	4b58      	ldr	r3, [pc, #352]	@ (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e30:	4a57      	ldr	r2, [pc, #348]	@ (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002e32:	f023 0301 	bic.w	r3, r3, #1
 8002e36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e38:	4b55      	ldr	r3, [pc, #340]	@ (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e3c:	4a54      	ldr	r2, [pc, #336]	@ (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002e3e:	f023 0304 	bic.w	r3, r3, #4
 8002e42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d015      	beq.n	8002e78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4c:	f7ff fade 	bl	800240c <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e52:	e00a      	b.n	8002e6a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e54:	f7ff fada 	bl	800240c <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e0cb      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e6a:	4b49      	ldr	r3, [pc, #292]	@ (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0ee      	beq.n	8002e54 <HAL_RCC_OscConfig+0x334>
 8002e76:	e014      	b.n	8002ea2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e78:	f7ff fac8 	bl	800240c <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e7e:	e00a      	b.n	8002e96 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e80:	f7ff fac4 	bl	800240c <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e0b5      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e96:	4b3e      	ldr	r3, [pc, #248]	@ (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1ee      	bne.n	8002e80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ea2:	7dfb      	ldrb	r3, [r7, #23]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d105      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea8:	4b39      	ldr	r3, [pc, #228]	@ (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eac:	4a38      	ldr	r2, [pc, #224]	@ (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002eae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eb2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80a1 	beq.w	8003000 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ebe:	4b34      	ldr	r3, [pc, #208]	@ (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 030c 	and.w	r3, r3, #12
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d05c      	beq.n	8002f84 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d141      	bne.n	8002f56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed2:	4b31      	ldr	r3, [pc, #196]	@ (8002f98 <HAL_RCC_OscConfig+0x478>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7ff fa98 	bl	800240c <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee0:	f7ff fa94 	bl	800240c <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e087      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef2:	4b27      	ldr	r3, [pc, #156]	@ (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69da      	ldr	r2, [r3, #28]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0c:	019b      	lsls	r3, r3, #6
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f14:	085b      	lsrs	r3, r3, #1
 8002f16:	3b01      	subs	r3, #1
 8002f18:	041b      	lsls	r3, r3, #16
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f20:	061b      	lsls	r3, r3, #24
 8002f22:	491b      	ldr	r1, [pc, #108]	@ (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f28:	4b1b      	ldr	r3, [pc, #108]	@ (8002f98 <HAL_RCC_OscConfig+0x478>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2e:	f7ff fa6d 	bl	800240c <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f36:	f7ff fa69 	bl	800240c <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e05c      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f48:	4b11      	ldr	r3, [pc, #68]	@ (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x416>
 8002f54:	e054      	b.n	8003000 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f56:	4b10      	ldr	r3, [pc, #64]	@ (8002f98 <HAL_RCC_OscConfig+0x478>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7ff fa56 	bl	800240c <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f64:	f7ff fa52 	bl	800240c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e045      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f76:	4b06      	ldr	r3, [pc, #24]	@ (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x444>
 8002f82:	e03d      	b.n	8003000 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d107      	bne.n	8002f9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e038      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
 8002f90:	40023800 	.word	0x40023800
 8002f94:	40007000 	.word	0x40007000
 8002f98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800300c <HAL_RCC_OscConfig+0x4ec>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d028      	beq.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d121      	bne.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d11a      	bne.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fcc:	4013      	ands	r3, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d111      	bne.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe2:	085b      	lsrs	r3, r3, #1
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d107      	bne.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800

08003010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0cc      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003024:	4b68      	ldr	r3, [pc, #416]	@ (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d90c      	bls.n	800304c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003032:	4b65      	ldr	r3, [pc, #404]	@ (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800303a:	4b63      	ldr	r3, [pc, #396]	@ (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d001      	beq.n	800304c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0b8      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d020      	beq.n	800309a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003064:	4b59      	ldr	r3, [pc, #356]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	4a58      	ldr	r2, [pc, #352]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800306e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800307c:	4b53      	ldr	r3, [pc, #332]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	4a52      	ldr	r2, [pc, #328]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003086:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003088:	4b50      	ldr	r3, [pc, #320]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	494d      	ldr	r1, [pc, #308]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	4313      	orrs	r3, r2
 8003098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d044      	beq.n	8003130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d107      	bne.n	80030be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	4b47      	ldr	r3, [pc, #284]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d119      	bne.n	80030ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e07f      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d003      	beq.n	80030ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d107      	bne.n	80030de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ce:	4b3f      	ldr	r3, [pc, #252]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d109      	bne.n	80030ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e06f      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030de:	4b3b      	ldr	r3, [pc, #236]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e067      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ee:	4b37      	ldr	r3, [pc, #220]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f023 0203 	bic.w	r2, r3, #3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	4934      	ldr	r1, [pc, #208]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003100:	f7ff f984 	bl	800240c <HAL_GetTick>
 8003104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003106:	e00a      	b.n	800311e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003108:	f7ff f980 	bl	800240c <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003116:	4293      	cmp	r3, r2
 8003118:	d901      	bls.n	800311e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e04f      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311e:	4b2b      	ldr	r3, [pc, #172]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 020c 	and.w	r2, r3, #12
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	429a      	cmp	r2, r3
 800312e:	d1eb      	bne.n	8003108 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003130:	4b25      	ldr	r3, [pc, #148]	@ (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d20c      	bcs.n	8003158 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313e:	4b22      	ldr	r3, [pc, #136]	@ (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003146:	4b20      	ldr	r3, [pc, #128]	@ (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d001      	beq.n	8003158 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e032      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003164:	4b19      	ldr	r3, [pc, #100]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4916      	ldr	r1, [pc, #88]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	4313      	orrs	r3, r2
 8003174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d009      	beq.n	8003196 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003182:	4b12      	ldr	r3, [pc, #72]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	490e      	ldr	r1, [pc, #56]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	4313      	orrs	r3, r2
 8003194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003196:	f000 f821 	bl	80031dc <HAL_RCC_GetSysClockFreq>
 800319a:	4602      	mov	r2, r0
 800319c:	4b0b      	ldr	r3, [pc, #44]	@ (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	091b      	lsrs	r3, r3, #4
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	490a      	ldr	r1, [pc, #40]	@ (80031d0 <HAL_RCC_ClockConfig+0x1c0>)
 80031a8:	5ccb      	ldrb	r3, [r1, r3]
 80031aa:	fa22 f303 	lsr.w	r3, r2, r3
 80031ae:	4a09      	ldr	r2, [pc, #36]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80031b2:	4b09      	ldr	r3, [pc, #36]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff f8e4 	bl	8002384 <HAL_InitTick>

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40023c00 	.word	0x40023c00
 80031cc:	40023800 	.word	0x40023800
 80031d0:	0800875c 	.word	0x0800875c
 80031d4:	20000000 	.word	0x20000000
 80031d8:	20000004 	.word	0x20000004

080031dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031e0:	b094      	sub	sp, #80	@ 0x50
 80031e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031f4:	4b79      	ldr	r3, [pc, #484]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x200>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 030c 	and.w	r3, r3, #12
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d00d      	beq.n	800321c <HAL_RCC_GetSysClockFreq+0x40>
 8003200:	2b08      	cmp	r3, #8
 8003202:	f200 80e1 	bhi.w	80033c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <HAL_RCC_GetSysClockFreq+0x34>
 800320a:	2b04      	cmp	r3, #4
 800320c:	d003      	beq.n	8003216 <HAL_RCC_GetSysClockFreq+0x3a>
 800320e:	e0db      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003210:	4b73      	ldr	r3, [pc, #460]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003212:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003214:	e0db      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003216:	4b73      	ldr	r3, [pc, #460]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003218:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800321a:	e0d8      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800321c:	4b6f      	ldr	r3, [pc, #444]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x200>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003224:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003226:	4b6d      	ldr	r3, [pc, #436]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d063      	beq.n	80032fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003232:	4b6a      	ldr	r3, [pc, #424]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	099b      	lsrs	r3, r3, #6
 8003238:	2200      	movs	r2, #0
 800323a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800323c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800323e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003244:	633b      	str	r3, [r7, #48]	@ 0x30
 8003246:	2300      	movs	r3, #0
 8003248:	637b      	str	r3, [r7, #52]	@ 0x34
 800324a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800324e:	4622      	mov	r2, r4
 8003250:	462b      	mov	r3, r5
 8003252:	f04f 0000 	mov.w	r0, #0
 8003256:	f04f 0100 	mov.w	r1, #0
 800325a:	0159      	lsls	r1, r3, #5
 800325c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003260:	0150      	lsls	r0, r2, #5
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4621      	mov	r1, r4
 8003268:	1a51      	subs	r1, r2, r1
 800326a:	6139      	str	r1, [r7, #16]
 800326c:	4629      	mov	r1, r5
 800326e:	eb63 0301 	sbc.w	r3, r3, r1
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003280:	4659      	mov	r1, fp
 8003282:	018b      	lsls	r3, r1, #6
 8003284:	4651      	mov	r1, sl
 8003286:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800328a:	4651      	mov	r1, sl
 800328c:	018a      	lsls	r2, r1, #6
 800328e:	4651      	mov	r1, sl
 8003290:	ebb2 0801 	subs.w	r8, r2, r1
 8003294:	4659      	mov	r1, fp
 8003296:	eb63 0901 	sbc.w	r9, r3, r1
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ae:	4690      	mov	r8, r2
 80032b0:	4699      	mov	r9, r3
 80032b2:	4623      	mov	r3, r4
 80032b4:	eb18 0303 	adds.w	r3, r8, r3
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	462b      	mov	r3, r5
 80032bc:	eb49 0303 	adc.w	r3, r9, r3
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	f04f 0300 	mov.w	r3, #0
 80032ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032ce:	4629      	mov	r1, r5
 80032d0:	024b      	lsls	r3, r1, #9
 80032d2:	4621      	mov	r1, r4
 80032d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032d8:	4621      	mov	r1, r4
 80032da:	024a      	lsls	r2, r1, #9
 80032dc:	4610      	mov	r0, r2
 80032de:	4619      	mov	r1, r3
 80032e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032e2:	2200      	movs	r2, #0
 80032e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032ec:	f7fd fc74 	bl	8000bd8 <__aeabi_uldivmod>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4613      	mov	r3, r2
 80032f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032f8:	e058      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032fa:	4b38      	ldr	r3, [pc, #224]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x200>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	099b      	lsrs	r3, r3, #6
 8003300:	2200      	movs	r2, #0
 8003302:	4618      	mov	r0, r3
 8003304:	4611      	mov	r1, r2
 8003306:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800330a:	623b      	str	r3, [r7, #32]
 800330c:	2300      	movs	r3, #0
 800330e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003310:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003314:	4642      	mov	r2, r8
 8003316:	464b      	mov	r3, r9
 8003318:	f04f 0000 	mov.w	r0, #0
 800331c:	f04f 0100 	mov.w	r1, #0
 8003320:	0159      	lsls	r1, r3, #5
 8003322:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003326:	0150      	lsls	r0, r2, #5
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4641      	mov	r1, r8
 800332e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003332:	4649      	mov	r1, r9
 8003334:	eb63 0b01 	sbc.w	fp, r3, r1
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003344:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003348:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800334c:	ebb2 040a 	subs.w	r4, r2, sl
 8003350:	eb63 050b 	sbc.w	r5, r3, fp
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	00eb      	lsls	r3, r5, #3
 800335e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003362:	00e2      	lsls	r2, r4, #3
 8003364:	4614      	mov	r4, r2
 8003366:	461d      	mov	r5, r3
 8003368:	4643      	mov	r3, r8
 800336a:	18e3      	adds	r3, r4, r3
 800336c:	603b      	str	r3, [r7, #0]
 800336e:	464b      	mov	r3, r9
 8003370:	eb45 0303 	adc.w	r3, r5, r3
 8003374:	607b      	str	r3, [r7, #4]
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003382:	4629      	mov	r1, r5
 8003384:	028b      	lsls	r3, r1, #10
 8003386:	4621      	mov	r1, r4
 8003388:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800338c:	4621      	mov	r1, r4
 800338e:	028a      	lsls	r2, r1, #10
 8003390:	4610      	mov	r0, r2
 8003392:	4619      	mov	r1, r3
 8003394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003396:	2200      	movs	r2, #0
 8003398:	61bb      	str	r3, [r7, #24]
 800339a:	61fa      	str	r2, [r7, #28]
 800339c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033a0:	f7fd fc1a 	bl	8000bd8 <__aeabi_uldivmod>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4613      	mov	r3, r2
 80033aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80033ac:	4b0b      	ldr	r3, [pc, #44]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x200>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	0c1b      	lsrs	r3, r3, #16
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	3301      	adds	r3, #1
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80033bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033c6:	e002      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033c8:	4b05      	ldr	r3, [pc, #20]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80033ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3750      	adds	r7, #80	@ 0x50
 80033d4:	46bd      	mov	sp, r7
 80033d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800
 80033e0:	00f42400 	.word	0x00f42400
 80033e4:	007a1200 	.word	0x007a1200

080033e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ec:	4b03      	ldr	r3, [pc, #12]	@ (80033fc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ee:	681b      	ldr	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20000000 	.word	0x20000000

08003400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003404:	f7ff fff0 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 8003408:	4602      	mov	r2, r0
 800340a:	4b05      	ldr	r3, [pc, #20]	@ (8003420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	0a9b      	lsrs	r3, r3, #10
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	4903      	ldr	r1, [pc, #12]	@ (8003424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003416:	5ccb      	ldrb	r3, [r1, r3]
 8003418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800341c:	4618      	mov	r0, r3
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40023800 	.word	0x40023800
 8003424:	0800876c 	.word	0x0800876c

08003428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800342c:	f7ff ffdc 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 8003430:	4602      	mov	r2, r0
 8003432:	4b05      	ldr	r3, [pc, #20]	@ (8003448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	0b5b      	lsrs	r3, r3, #13
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	4903      	ldr	r1, [pc, #12]	@ (800344c <HAL_RCC_GetPCLK2Freq+0x24>)
 800343e:	5ccb      	ldrb	r3, [r1, r3]
 8003440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003444:	4618      	mov	r0, r3
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40023800 	.word	0x40023800
 800344c:	0800876c 	.word	0x0800876c

08003450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e041      	b.n	80034e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fe fd08 	bl	8001e8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3304      	adds	r3, #4
 800348c:	4619      	mov	r1, r3
 800348e:	4610      	mov	r0, r2
 8003490:	f000 fb42 	bl	8003b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b01      	cmp	r3, #1
 8003502:	d001      	beq.n	8003508 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e03c      	b.n	8003582 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1e      	ldr	r2, [pc, #120]	@ (8003590 <HAL_TIM_Base_Start+0xa0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d018      	beq.n	800354c <HAL_TIM_Base_Start+0x5c>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003522:	d013      	beq.n	800354c <HAL_TIM_Base_Start+0x5c>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1a      	ldr	r2, [pc, #104]	@ (8003594 <HAL_TIM_Base_Start+0xa4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00e      	beq.n	800354c <HAL_TIM_Base_Start+0x5c>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a19      	ldr	r2, [pc, #100]	@ (8003598 <HAL_TIM_Base_Start+0xa8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d009      	beq.n	800354c <HAL_TIM_Base_Start+0x5c>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a17      	ldr	r2, [pc, #92]	@ (800359c <HAL_TIM_Base_Start+0xac>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d004      	beq.n	800354c <HAL_TIM_Base_Start+0x5c>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a16      	ldr	r2, [pc, #88]	@ (80035a0 <HAL_TIM_Base_Start+0xb0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d111      	bne.n	8003570 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b06      	cmp	r3, #6
 800355c:	d010      	beq.n	8003580 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0201 	orr.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356e:	e007      	b.n	8003580 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0201 	orr.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40010000 	.word	0x40010000
 8003594:	40000400 	.word	0x40000400
 8003598:	40000800 	.word	0x40000800
 800359c:	40000c00 	.word	0x40000c00
 80035a0:	40014000 	.word	0x40014000

080035a4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6a1a      	ldr	r2, [r3, #32]
 80035b2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80035b6:	4013      	ands	r3, r2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10f      	bne.n	80035dc <HAL_TIM_Base_Stop+0x38>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6a1a      	ldr	r2, [r3, #32]
 80035c2:	f240 4344 	movw	r3, #1092	@ 0x444
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d107      	bne.n	80035dc <HAL_TIM_Base_Stop+0x38>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0201 	bic.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b082      	sub	sp, #8
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e041      	b.n	8003688 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d106      	bne.n	800361e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f839 	bl	8003690 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2202      	movs	r2, #2
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3304      	adds	r3, #4
 800362e:	4619      	mov	r1, r3
 8003630:	4610      	mov	r0, r2
 8003632:	f000 fa71 	bl	8003b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d109      	bne.n	80036c8 <HAL_TIM_PWM_Start+0x24>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	bf14      	ite	ne
 80036c0:	2301      	movne	r3, #1
 80036c2:	2300      	moveq	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	e022      	b.n	800370e <HAL_TIM_PWM_Start+0x6a>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d109      	bne.n	80036e2 <HAL_TIM_PWM_Start+0x3e>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	bf14      	ite	ne
 80036da:	2301      	movne	r3, #1
 80036dc:	2300      	moveq	r3, #0
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	e015      	b.n	800370e <HAL_TIM_PWM_Start+0x6a>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d109      	bne.n	80036fc <HAL_TIM_PWM_Start+0x58>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	bf14      	ite	ne
 80036f4:	2301      	movne	r3, #1
 80036f6:	2300      	moveq	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	e008      	b.n	800370e <HAL_TIM_PWM_Start+0x6a>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b01      	cmp	r3, #1
 8003706:	bf14      	ite	ne
 8003708:	2301      	movne	r3, #1
 800370a:	2300      	moveq	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e068      	b.n	80037e8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d104      	bne.n	8003726 <HAL_TIM_PWM_Start+0x82>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003724:	e013      	b.n	800374e <HAL_TIM_PWM_Start+0xaa>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b04      	cmp	r3, #4
 800372a:	d104      	bne.n	8003736 <HAL_TIM_PWM_Start+0x92>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003734:	e00b      	b.n	800374e <HAL_TIM_PWM_Start+0xaa>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b08      	cmp	r3, #8
 800373a:	d104      	bne.n	8003746 <HAL_TIM_PWM_Start+0xa2>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003744:	e003      	b.n	800374e <HAL_TIM_PWM_Start+0xaa>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2202      	movs	r2, #2
 800374a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2201      	movs	r2, #1
 8003754:	6839      	ldr	r1, [r7, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f000 fc90 	bl	800407c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a23      	ldr	r2, [pc, #140]	@ (80037f0 <HAL_TIM_PWM_Start+0x14c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d107      	bne.n	8003776 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003774:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a1d      	ldr	r2, [pc, #116]	@ (80037f0 <HAL_TIM_PWM_Start+0x14c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d018      	beq.n	80037b2 <HAL_TIM_PWM_Start+0x10e>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003788:	d013      	beq.n	80037b2 <HAL_TIM_PWM_Start+0x10e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a19      	ldr	r2, [pc, #100]	@ (80037f4 <HAL_TIM_PWM_Start+0x150>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d00e      	beq.n	80037b2 <HAL_TIM_PWM_Start+0x10e>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a17      	ldr	r2, [pc, #92]	@ (80037f8 <HAL_TIM_PWM_Start+0x154>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d009      	beq.n	80037b2 <HAL_TIM_PWM_Start+0x10e>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a16      	ldr	r2, [pc, #88]	@ (80037fc <HAL_TIM_PWM_Start+0x158>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d004      	beq.n	80037b2 <HAL_TIM_PWM_Start+0x10e>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a14      	ldr	r2, [pc, #80]	@ (8003800 <HAL_TIM_PWM_Start+0x15c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d111      	bne.n	80037d6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b06      	cmp	r3, #6
 80037c2:	d010      	beq.n	80037e6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d4:	e007      	b.n	80037e6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 0201 	orr.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40010000 	.word	0x40010000
 80037f4:	40000400 	.word	0x40000400
 80037f8:	40000800 	.word	0x40000800
 80037fc:	40000c00 	.word	0x40000c00
 8003800:	40014000 	.word	0x40014000

08003804 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800381e:	2302      	movs	r3, #2
 8003820:	e0ae      	b.n	8003980 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b0c      	cmp	r3, #12
 800382e:	f200 809f 	bhi.w	8003970 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003832:	a201      	add	r2, pc, #4	@ (adr r2, 8003838 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003838:	0800386d 	.word	0x0800386d
 800383c:	08003971 	.word	0x08003971
 8003840:	08003971 	.word	0x08003971
 8003844:	08003971 	.word	0x08003971
 8003848:	080038ad 	.word	0x080038ad
 800384c:	08003971 	.word	0x08003971
 8003850:	08003971 	.word	0x08003971
 8003854:	08003971 	.word	0x08003971
 8003858:	080038ef 	.word	0x080038ef
 800385c:	08003971 	.word	0x08003971
 8003860:	08003971 	.word	0x08003971
 8003864:	08003971 	.word	0x08003971
 8003868:	0800392f 	.word	0x0800392f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68b9      	ldr	r1, [r7, #8]
 8003872:	4618      	mov	r0, r3
 8003874:	f000 f9dc 	bl	8003c30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699a      	ldr	r2, [r3, #24]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0208 	orr.w	r2, r2, #8
 8003886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699a      	ldr	r2, [r3, #24]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0204 	bic.w	r2, r2, #4
 8003896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6999      	ldr	r1, [r3, #24]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	619a      	str	r2, [r3, #24]
      break;
 80038aa:	e064      	b.n	8003976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 fa22 	bl	8003cfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699a      	ldr	r2, [r3, #24]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699a      	ldr	r2, [r3, #24]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6999      	ldr	r1, [r3, #24]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	021a      	lsls	r2, r3, #8
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	619a      	str	r2, [r3, #24]
      break;
 80038ec:	e043      	b.n	8003976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fa6d 	bl	8003dd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69da      	ldr	r2, [r3, #28]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f042 0208 	orr.w	r2, r2, #8
 8003908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69da      	ldr	r2, [r3, #28]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0204 	bic.w	r2, r2, #4
 8003918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69d9      	ldr	r1, [r3, #28]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	61da      	str	r2, [r3, #28]
      break;
 800392c:	e023      	b.n	8003976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68b9      	ldr	r1, [r7, #8]
 8003934:	4618      	mov	r0, r3
 8003936:	f000 fab7 	bl	8003ea8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69da      	ldr	r2, [r3, #28]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69d9      	ldr	r1, [r3, #28]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	021a      	lsls	r2, r3, #8
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	61da      	str	r2, [r3, #28]
      break;
 800396e:	e002      	b.n	8003976 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	75fb      	strb	r3, [r7, #23]
      break;
 8003974:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800397e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <HAL_TIM_ConfigClockSource+0x1c>
 80039a0:	2302      	movs	r3, #2
 80039a2:	e0b4      	b.n	8003b0e <HAL_TIM_ConfigClockSource+0x186>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80039c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039dc:	d03e      	beq.n	8003a5c <HAL_TIM_ConfigClockSource+0xd4>
 80039de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039e2:	f200 8087 	bhi.w	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 80039e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ea:	f000 8086 	beq.w	8003afa <HAL_TIM_ConfigClockSource+0x172>
 80039ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039f2:	d87f      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 80039f4:	2b70      	cmp	r3, #112	@ 0x70
 80039f6:	d01a      	beq.n	8003a2e <HAL_TIM_ConfigClockSource+0xa6>
 80039f8:	2b70      	cmp	r3, #112	@ 0x70
 80039fa:	d87b      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 80039fc:	2b60      	cmp	r3, #96	@ 0x60
 80039fe:	d050      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x11a>
 8003a00:	2b60      	cmp	r3, #96	@ 0x60
 8003a02:	d877      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a04:	2b50      	cmp	r3, #80	@ 0x50
 8003a06:	d03c      	beq.n	8003a82 <HAL_TIM_ConfigClockSource+0xfa>
 8003a08:	2b50      	cmp	r3, #80	@ 0x50
 8003a0a:	d873      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a0c:	2b40      	cmp	r3, #64	@ 0x40
 8003a0e:	d058      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0x13a>
 8003a10:	2b40      	cmp	r3, #64	@ 0x40
 8003a12:	d86f      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a14:	2b30      	cmp	r3, #48	@ 0x30
 8003a16:	d064      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a18:	2b30      	cmp	r3, #48	@ 0x30
 8003a1a:	d86b      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d060      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d867      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d05c      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a28:	2b10      	cmp	r3, #16
 8003a2a:	d05a      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a2c:	e062      	b.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a3e:	f000 fafd 	bl	800403c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	609a      	str	r2, [r3, #8]
      break;
 8003a5a:	e04f      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a6c:	f000 fae6 	bl	800403c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a7e:	609a      	str	r2, [r3, #8]
      break;
 8003a80:	e03c      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f000 fa5a 	bl	8003f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2150      	movs	r1, #80	@ 0x50
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fab3 	bl	8004006 <TIM_ITRx_SetConfig>
      break;
 8003aa0:	e02c      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f000 fa79 	bl	8003fa6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2160      	movs	r1, #96	@ 0x60
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 faa3 	bl	8004006 <TIM_ITRx_SetConfig>
      break;
 8003ac0:	e01c      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f000 fa3a 	bl	8003f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2140      	movs	r1, #64	@ 0x40
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fa93 	bl	8004006 <TIM_ITRx_SetConfig>
      break;
 8003ae0:	e00c      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4619      	mov	r1, r3
 8003aec:	4610      	mov	r0, r2
 8003aee:	f000 fa8a 	bl	8004006 <TIM_ITRx_SetConfig>
      break;
 8003af2:	e003      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
      break;
 8003af8:	e000      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003afa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a3a      	ldr	r2, [pc, #232]	@ (8003c14 <TIM_Base_SetConfig+0xfc>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00f      	beq.n	8003b50 <TIM_Base_SetConfig+0x38>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b36:	d00b      	beq.n	8003b50 <TIM_Base_SetConfig+0x38>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a37      	ldr	r2, [pc, #220]	@ (8003c18 <TIM_Base_SetConfig+0x100>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d007      	beq.n	8003b50 <TIM_Base_SetConfig+0x38>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a36      	ldr	r2, [pc, #216]	@ (8003c1c <TIM_Base_SetConfig+0x104>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d003      	beq.n	8003b50 <TIM_Base_SetConfig+0x38>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a35      	ldr	r2, [pc, #212]	@ (8003c20 <TIM_Base_SetConfig+0x108>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d108      	bne.n	8003b62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a2b      	ldr	r2, [pc, #172]	@ (8003c14 <TIM_Base_SetConfig+0xfc>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d01b      	beq.n	8003ba2 <TIM_Base_SetConfig+0x8a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b70:	d017      	beq.n	8003ba2 <TIM_Base_SetConfig+0x8a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a28      	ldr	r2, [pc, #160]	@ (8003c18 <TIM_Base_SetConfig+0x100>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d013      	beq.n	8003ba2 <TIM_Base_SetConfig+0x8a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a27      	ldr	r2, [pc, #156]	@ (8003c1c <TIM_Base_SetConfig+0x104>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00f      	beq.n	8003ba2 <TIM_Base_SetConfig+0x8a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a26      	ldr	r2, [pc, #152]	@ (8003c20 <TIM_Base_SetConfig+0x108>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00b      	beq.n	8003ba2 <TIM_Base_SetConfig+0x8a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a25      	ldr	r2, [pc, #148]	@ (8003c24 <TIM_Base_SetConfig+0x10c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d007      	beq.n	8003ba2 <TIM_Base_SetConfig+0x8a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a24      	ldr	r2, [pc, #144]	@ (8003c28 <TIM_Base_SetConfig+0x110>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d003      	beq.n	8003ba2 <TIM_Base_SetConfig+0x8a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a23      	ldr	r2, [pc, #140]	@ (8003c2c <TIM_Base_SetConfig+0x114>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d108      	bne.n	8003bb4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a0e      	ldr	r2, [pc, #56]	@ (8003c14 <TIM_Base_SetConfig+0xfc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d103      	bne.n	8003be8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d105      	bne.n	8003c06 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f023 0201 	bic.w	r2, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	611a      	str	r2, [r3, #16]
  }
}
 8003c06:	bf00      	nop
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40010000 	.word	0x40010000
 8003c18:	40000400 	.word	0x40000400
 8003c1c:	40000800 	.word	0x40000800
 8003c20:	40000c00 	.word	0x40000c00
 8003c24:	40014000 	.word	0x40014000
 8003c28:	40014400 	.word	0x40014400
 8003c2c:	40014800 	.word	0x40014800

08003c30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	f023 0201 	bic.w	r2, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0303 	bic.w	r3, r3, #3
 8003c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f023 0302 	bic.w	r3, r3, #2
 8003c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a1c      	ldr	r2, [pc, #112]	@ (8003cf8 <TIM_OC1_SetConfig+0xc8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d10c      	bne.n	8003ca6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f023 0308 	bic.w	r3, r3, #8
 8003c92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f023 0304 	bic.w	r3, r3, #4
 8003ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a13      	ldr	r2, [pc, #76]	@ (8003cf8 <TIM_OC1_SetConfig+0xc8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d111      	bne.n	8003cd2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	621a      	str	r2, [r3, #32]
}
 8003cec:	bf00      	nop
 8003cee:	371c      	adds	r7, #28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	40010000 	.word	0x40010000

08003cfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	f023 0210 	bic.w	r2, r3, #16
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	021b      	lsls	r3, r3, #8
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f023 0320 	bic.w	r3, r3, #32
 8003d46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a1e      	ldr	r2, [pc, #120]	@ (8003dd0 <TIM_OC2_SetConfig+0xd4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d10d      	bne.n	8003d78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a15      	ldr	r2, [pc, #84]	@ (8003dd0 <TIM_OC2_SetConfig+0xd4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d113      	bne.n	8003da8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	621a      	str	r2, [r3, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40010000 	.word	0x40010000

08003dd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 0303 	bic.w	r3, r3, #3
 8003e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ea4 <TIM_OC3_SetConfig+0xd0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d10d      	bne.n	8003e4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a14      	ldr	r2, [pc, #80]	@ (8003ea4 <TIM_OC3_SetConfig+0xd0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d113      	bne.n	8003e7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	621a      	str	r2, [r3, #32]
}
 8003e98:	bf00      	nop
 8003e9a:	371c      	adds	r7, #28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	40010000 	.word	0x40010000

08003ea8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ef2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	031b      	lsls	r3, r3, #12
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a10      	ldr	r2, [pc, #64]	@ (8003f44 <TIM_OC4_SetConfig+0x9c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d109      	bne.n	8003f1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	019b      	lsls	r3, r3, #6
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	621a      	str	r2, [r3, #32]
}
 8003f36:	bf00      	nop
 8003f38:	371c      	adds	r7, #28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	40010000 	.word	0x40010000

08003f48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	f023 0201 	bic.w	r2, r3, #1
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f023 030a 	bic.w	r3, r3, #10
 8003f84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	621a      	str	r2, [r3, #32]
}
 8003f9a:	bf00      	nop
 8003f9c:	371c      	adds	r7, #28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b087      	sub	sp, #28
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	f023 0210 	bic.w	r2, r3, #16
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	031b      	lsls	r3, r3, #12
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003fe2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	621a      	str	r2, [r3, #32]
}
 8003ffa:	bf00      	nop
 8003ffc:	371c      	adds	r7, #28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004006:	b480      	push	{r7}
 8004008:	b085      	sub	sp, #20
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800401c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	f043 0307 	orr.w	r3, r3, #7
 8004028:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	609a      	str	r2, [r3, #8]
}
 8004030:	bf00      	nop
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
 8004048:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004056:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	021a      	lsls	r2, r3, #8
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	431a      	orrs	r2, r3
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4313      	orrs	r3, r2
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	609a      	str	r2, [r3, #8]
}
 8004070:	bf00      	nop
 8004072:	371c      	adds	r7, #28
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f003 031f 	and.w	r3, r3, #31
 800408e:	2201      	movs	r2, #1
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a1a      	ldr	r2, [r3, #32]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	43db      	mvns	r3, r3
 800409e:	401a      	ands	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a1a      	ldr	r2, [r3, #32]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f003 031f 	and.w	r3, r3, #31
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	fa01 f303 	lsl.w	r3, r1, r3
 80040b4:	431a      	orrs	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	621a      	str	r2, [r3, #32]
}
 80040ba:	bf00      	nop
 80040bc:	371c      	adds	r7, #28
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
	...

080040c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040dc:	2302      	movs	r3, #2
 80040de:	e050      	b.n	8004182 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004106:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a1c      	ldr	r2, [pc, #112]	@ (8004190 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d018      	beq.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800412c:	d013      	beq.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a18      	ldr	r2, [pc, #96]	@ (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d00e      	beq.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a16      	ldr	r2, [pc, #88]	@ (8004198 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d009      	beq.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a15      	ldr	r2, [pc, #84]	@ (800419c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d004      	beq.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a13      	ldr	r2, [pc, #76]	@ (80041a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d10c      	bne.n	8004170 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800415c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	4313      	orrs	r3, r2
 8004166:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40010000 	.word	0x40010000
 8004194:	40000400 	.word	0x40000400
 8004198:	40000800 	.word	0x40000800
 800419c:	40000c00 	.word	0x40000c00
 80041a0:	40014000 	.word	0x40014000

080041a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e042      	b.n	800423c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d106      	bne.n	80041d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7fd fee4 	bl	8001f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2224      	movs	r2, #36	@ 0x24
 80041d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 fdbd 	bl	8004d68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695a      	ldr	r2, [r3, #20]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800420c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800421c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b08a      	sub	sp, #40	@ 0x28
 8004248:	af02      	add	r7, sp, #8
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	603b      	str	r3, [r7, #0]
 8004250:	4613      	mov	r3, r2
 8004252:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b20      	cmp	r3, #32
 8004262:	d175      	bne.n	8004350 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <HAL_UART_Transmit+0x2c>
 800426a:	88fb      	ldrh	r3, [r7, #6]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e06e      	b.n	8004352 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2221      	movs	r2, #33	@ 0x21
 800427e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004282:	f7fe f8c3 	bl	800240c <HAL_GetTick>
 8004286:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	88fa      	ldrh	r2, [r7, #6]
 800428c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	88fa      	ldrh	r2, [r7, #6]
 8004292:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800429c:	d108      	bne.n	80042b0 <HAL_UART_Transmit+0x6c>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d104      	bne.n	80042b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	61bb      	str	r3, [r7, #24]
 80042ae:	e003      	b.n	80042b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042b8:	e02e      	b.n	8004318 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2200      	movs	r2, #0
 80042c2:	2180      	movs	r1, #128	@ 0x80
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 fb1f 	bl	8004908 <UART_WaitOnFlagUntilTimeout>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d005      	beq.n	80042dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e03a      	b.n	8004352 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10b      	bne.n	80042fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	461a      	mov	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	3302      	adds	r3, #2
 80042f6:	61bb      	str	r3, [r7, #24]
 80042f8:	e007      	b.n	800430a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	781a      	ldrb	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	3301      	adds	r3, #1
 8004308:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1cb      	bne.n	80042ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2200      	movs	r2, #0
 800432a:	2140      	movs	r1, #64	@ 0x40
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 faeb 	bl	8004908 <UART_WaitOnFlagUntilTimeout>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d005      	beq.n	8004344 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e006      	b.n	8004352 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800434c:	2300      	movs	r3, #0
 800434e:	e000      	b.n	8004352 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004350:	2302      	movs	r3, #2
  }
}
 8004352:	4618      	mov	r0, r3
 8004354:	3720      	adds	r7, #32
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b084      	sub	sp, #16
 800435e:	af00      	add	r7, sp, #0
 8004360:	60f8      	str	r0, [r7, #12]
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	4613      	mov	r3, r2
 8004366:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b20      	cmp	r3, #32
 8004372:	d112      	bne.n	800439a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <HAL_UART_Receive_IT+0x26>
 800437a:	88fb      	ldrh	r3, [r7, #6]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e00b      	b.n	800439c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800438a:	88fb      	ldrh	r3, [r7, #6]
 800438c:	461a      	mov	r2, r3
 800438e:	68b9      	ldr	r1, [r7, #8]
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 fb12 	bl	80049ba <UART_Start_Receive_IT>
 8004396:	4603      	mov	r3, r0
 8004398:	e000      	b.n	800439c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800439a:	2302      	movs	r3, #2
  }
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b0ba      	sub	sp, #232	@ 0xe8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80043e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10f      	bne.n	800440a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043ee:	f003 0320 	and.w	r3, r3, #32
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <HAL_UART_IRQHandler+0x66>
 80043f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fbf2 	bl	8004bec <UART_Receive_IT>
      return;
 8004408:	e25b      	b.n	80048c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800440a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 80de 	beq.w	80045d0 <HAL_UART_IRQHandler+0x22c>
 8004414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d106      	bne.n	800442e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004424:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 80d1 	beq.w	80045d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800442e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00b      	beq.n	8004452 <HAL_UART_IRQHandler+0xae>
 800443a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800443e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004442:	2b00      	cmp	r3, #0
 8004444:	d005      	beq.n	8004452 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444a:	f043 0201 	orr.w	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00b      	beq.n	8004476 <HAL_UART_IRQHandler+0xd2>
 800445e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d005      	beq.n	8004476 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446e:	f043 0202 	orr.w	r2, r3, #2
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00b      	beq.n	800449a <HAL_UART_IRQHandler+0xf6>
 8004482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d005      	beq.n	800449a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004492:	f043 0204 	orr.w	r2, r3, #4
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800449a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d011      	beq.n	80044ca <HAL_UART_IRQHandler+0x126>
 80044a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d105      	bne.n	80044be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80044b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d005      	beq.n	80044ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c2:	f043 0208 	orr.w	r2, r3, #8
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 81f2 	beq.w	80048b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d008      	beq.n	80044f2 <HAL_UART_IRQHandler+0x14e>
 80044e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fb7d 	bl	8004bec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044fc:	2b40      	cmp	r3, #64	@ 0x40
 80044fe:	bf0c      	ite	eq
 8004500:	2301      	moveq	r3, #1
 8004502:	2300      	movne	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	d103      	bne.n	800451e <HAL_UART_IRQHandler+0x17a>
 8004516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800451a:	2b00      	cmp	r3, #0
 800451c:	d04f      	beq.n	80045be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 fa85 	bl	8004a2e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800452e:	2b40      	cmp	r3, #64	@ 0x40
 8004530:	d141      	bne.n	80045b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3314      	adds	r3, #20
 8004538:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004540:	e853 3f00 	ldrex	r3, [r3]
 8004544:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004548:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800454c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004550:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3314      	adds	r3, #20
 800455a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800455e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004562:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004566:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800456a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800456e:	e841 2300 	strex	r3, r2, [r1]
 8004572:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1d9      	bne.n	8004532 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004582:	2b00      	cmp	r3, #0
 8004584:	d013      	beq.n	80045ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800458a:	4a7e      	ldr	r2, [pc, #504]	@ (8004784 <HAL_UART_IRQHandler+0x3e0>)
 800458c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004592:	4618      	mov	r0, r3
 8004594:	f7fe f8eb 	bl	800276e <HAL_DMA_Abort_IT>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d016      	beq.n	80045cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80045a8:	4610      	mov	r0, r2
 80045aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ac:	e00e      	b.n	80045cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f994 	bl	80048dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b4:	e00a      	b.n	80045cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f990 	bl	80048dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045bc:	e006      	b.n	80045cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f98c 	bl	80048dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80045ca:	e175      	b.n	80048b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045cc:	bf00      	nop
    return;
 80045ce:	e173      	b.n	80048b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	f040 814f 	bne.w	8004878 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80045da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045de:	f003 0310 	and.w	r3, r3, #16
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 8148 	beq.w	8004878 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80045e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045ec:	f003 0310 	and.w	r3, r3, #16
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 8141 	beq.w	8004878 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045f6:	2300      	movs	r3, #0
 80045f8:	60bb      	str	r3, [r7, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	60bb      	str	r3, [r7, #8]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	60bb      	str	r3, [r7, #8]
 800460a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004616:	2b40      	cmp	r3, #64	@ 0x40
 8004618:	f040 80b6 	bne.w	8004788 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004628:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 8145 	beq.w	80048bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800463a:	429a      	cmp	r2, r3
 800463c:	f080 813e 	bcs.w	80048bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004646:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004652:	f000 8088 	beq.w	8004766 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	330c      	adds	r3, #12
 800465c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004660:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004664:	e853 3f00 	ldrex	r3, [r3]
 8004668:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800466c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004670:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004674:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	330c      	adds	r3, #12
 800467e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004682:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004686:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800468e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004692:	e841 2300 	strex	r3, r2, [r1]
 8004696:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800469a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1d9      	bne.n	8004656 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3314      	adds	r3, #20
 80046a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80046b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046b4:	f023 0301 	bic.w	r3, r3, #1
 80046b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3314      	adds	r3, #20
 80046c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80046c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80046ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80046ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80046d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e1      	bne.n	80046a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3314      	adds	r3, #20
 80046e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80046ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3314      	adds	r3, #20
 80046fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004702:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004704:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004708:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004710:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e3      	bne.n	80046de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	330c      	adds	r3, #12
 800472a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800472e:	e853 3f00 	ldrex	r3, [r3]
 8004732:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004734:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004736:	f023 0310 	bic.w	r3, r3, #16
 800473a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	330c      	adds	r3, #12
 8004744:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004748:	65ba      	str	r2, [r7, #88]	@ 0x58
 800474a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800474e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004750:	e841 2300 	strex	r3, r2, [r1]
 8004754:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004756:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e3      	bne.n	8004724 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004760:	4618      	mov	r0, r3
 8004762:	f7fd ff94 	bl	800268e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2202      	movs	r2, #2
 800476a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004774:	b29b      	uxth	r3, r3
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	b29b      	uxth	r3, r3
 800477a:	4619      	mov	r1, r3
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f8b7 	bl	80048f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004782:	e09b      	b.n	80048bc <HAL_UART_IRQHandler+0x518>
 8004784:	08004af5 	.word	0x08004af5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004790:	b29b      	uxth	r3, r3
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 808e 	beq.w	80048c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80047a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 8089 	beq.w	80048c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	330c      	adds	r3, #12
 80047b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b8:	e853 3f00 	ldrex	r3, [r3]
 80047bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	330c      	adds	r3, #12
 80047ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80047d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80047d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047da:	e841 2300 	strex	r3, r2, [r1]
 80047de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1e3      	bne.n	80047ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3314      	adds	r3, #20
 80047ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f0:	e853 3f00 	ldrex	r3, [r3]
 80047f4:	623b      	str	r3, [r7, #32]
   return(result);
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	f023 0301 	bic.w	r3, r3, #1
 80047fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3314      	adds	r3, #20
 8004806:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800480a:	633a      	str	r2, [r7, #48]	@ 0x30
 800480c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004812:	e841 2300 	strex	r3, r2, [r1]
 8004816:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1e3      	bne.n	80047e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	330c      	adds	r3, #12
 8004832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	e853 3f00 	ldrex	r3, [r3]
 800483a:	60fb      	str	r3, [r7, #12]
   return(result);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0310 	bic.w	r3, r3, #16
 8004842:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	330c      	adds	r3, #12
 800484c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004850:	61fa      	str	r2, [r7, #28]
 8004852:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004854:	69b9      	ldr	r1, [r7, #24]
 8004856:	69fa      	ldr	r2, [r7, #28]
 8004858:	e841 2300 	strex	r3, r2, [r1]
 800485c:	617b      	str	r3, [r7, #20]
   return(result);
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1e3      	bne.n	800482c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800486a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800486e:	4619      	mov	r1, r3
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f83d 	bl	80048f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004876:	e023      	b.n	80048c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800487c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004880:	2b00      	cmp	r3, #0
 8004882:	d009      	beq.n	8004898 <HAL_UART_IRQHandler+0x4f4>
 8004884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f943 	bl	8004b1c <UART_Transmit_IT>
    return;
 8004896:	e014      	b.n	80048c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800489c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00e      	beq.n	80048c2 <HAL_UART_IRQHandler+0x51e>
 80048a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d008      	beq.n	80048c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f983 	bl	8004bbc <UART_EndTransmit_IT>
    return;
 80048b6:	e004      	b.n	80048c2 <HAL_UART_IRQHandler+0x51e>
    return;
 80048b8:	bf00      	nop
 80048ba:	e002      	b.n	80048c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80048bc:	bf00      	nop
 80048be:	e000      	b.n	80048c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80048c0:	bf00      	nop
  }
}
 80048c2:	37e8      	adds	r7, #232	@ 0xe8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	4613      	mov	r3, r2
 8004916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004918:	e03b      	b.n	8004992 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004920:	d037      	beq.n	8004992 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004922:	f7fd fd73 	bl	800240c <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	6a3a      	ldr	r2, [r7, #32]
 800492e:	429a      	cmp	r2, r3
 8004930:	d302      	bcc.n	8004938 <UART_WaitOnFlagUntilTimeout+0x30>
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e03a      	b.n	80049b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f003 0304 	and.w	r3, r3, #4
 8004946:	2b00      	cmp	r3, #0
 8004948:	d023      	beq.n	8004992 <UART_WaitOnFlagUntilTimeout+0x8a>
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2b80      	cmp	r3, #128	@ 0x80
 800494e:	d020      	beq.n	8004992 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b40      	cmp	r3, #64	@ 0x40
 8004954:	d01d      	beq.n	8004992 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0308 	and.w	r3, r3, #8
 8004960:	2b08      	cmp	r3, #8
 8004962:	d116      	bne.n	8004992 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004964:	2300      	movs	r3, #0
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 f857 	bl	8004a2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2208      	movs	r2, #8
 8004984:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e00f      	b.n	80049b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4013      	ands	r3, r2
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	429a      	cmp	r2, r3
 80049a0:	bf0c      	ite	eq
 80049a2:	2301      	moveq	r3, #1
 80049a4:	2300      	movne	r3, #0
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	461a      	mov	r2, r3
 80049aa:	79fb      	ldrb	r3, [r7, #7]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d0b4      	beq.n	800491a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b085      	sub	sp, #20
 80049be:	af00      	add	r7, sp, #0
 80049c0:	60f8      	str	r0, [r7, #12]
 80049c2:	60b9      	str	r1, [r7, #8]
 80049c4:	4613      	mov	r3, r2
 80049c6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	88fa      	ldrh	r2, [r7, #6]
 80049d2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	88fa      	ldrh	r2, [r7, #6]
 80049d8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2222      	movs	r2, #34	@ 0x22
 80049e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d007      	beq.n	8004a00 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049fe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695a      	ldr	r2, [r3, #20]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0201 	orr.w	r2, r2, #1
 8004a0e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0220 	orr.w	r2, r2, #32
 8004a1e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b095      	sub	sp, #84	@ 0x54
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	330c      	adds	r3, #12
 8004a3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a40:	e853 3f00 	ldrex	r3, [r3]
 8004a44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	330c      	adds	r3, #12
 8004a54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a56:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a5e:	e841 2300 	strex	r3, r2, [r1]
 8004a62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1e5      	bne.n	8004a36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3314      	adds	r3, #20
 8004a70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	e853 3f00 	ldrex	r3, [r3]
 8004a78:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	f023 0301 	bic.w	r3, r3, #1
 8004a80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3314      	adds	r3, #20
 8004a88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a92:	e841 2300 	strex	r3, r2, [r1]
 8004a96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1e5      	bne.n	8004a6a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d119      	bne.n	8004ada <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	330c      	adds	r3, #12
 8004aac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	e853 3f00 	ldrex	r3, [r3]
 8004ab4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	f023 0310 	bic.w	r3, r3, #16
 8004abc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	330c      	adds	r3, #12
 8004ac4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ac6:	61ba      	str	r2, [r7, #24]
 8004ac8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aca:	6979      	ldr	r1, [r7, #20]
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	e841 2300 	strex	r3, r2, [r1]
 8004ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1e5      	bne.n	8004aa6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ae8:	bf00      	nop
 8004aea:	3754      	adds	r7, #84	@ 0x54
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f7ff fee4 	bl	80048dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b14:	bf00      	nop
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b21      	cmp	r3, #33	@ 0x21
 8004b2e:	d13e      	bne.n	8004bae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b38:	d114      	bne.n	8004b64 <UART_Transmit_IT+0x48>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d110      	bne.n	8004b64 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	1c9a      	adds	r2, r3, #2
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	621a      	str	r2, [r3, #32]
 8004b62:	e008      	b.n	8004b76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	1c59      	adds	r1, r3, #1
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6211      	str	r1, [r2, #32]
 8004b6e:	781a      	ldrb	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	4619      	mov	r1, r3
 8004b84:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10f      	bne.n	8004baa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68da      	ldr	r2, [r3, #12]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ba8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004baa:	2300      	movs	r3, #0
 8004bac:	e000      	b.n	8004bb0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004bae:	2302      	movs	r3, #2
  }
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bd2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff fe73 	bl	80048c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08c      	sub	sp, #48	@ 0x30
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b22      	cmp	r3, #34	@ 0x22
 8004bfe:	f040 80ae 	bne.w	8004d5e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c0a:	d117      	bne.n	8004c3c <UART_Receive_IT+0x50>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d113      	bne.n	8004c3c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c34:	1c9a      	adds	r2, r3, #2
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c3a:	e026      	b.n	8004c8a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004c42:	2300      	movs	r3, #0
 8004c44:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c4e:	d007      	beq.n	8004c60 <UART_Receive_IT+0x74>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10a      	bne.n	8004c6e <UART_Receive_IT+0x82>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d106      	bne.n	8004c6e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c6a:	701a      	strb	r2, [r3, #0]
 8004c6c:	e008      	b.n	8004c80 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c7e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c84:	1c5a      	adds	r2, r3, #1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	4619      	mov	r1, r3
 8004c98:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d15d      	bne.n	8004d5a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0220 	bic.w	r2, r2, #32
 8004cac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68da      	ldr	r2, [r3, #12]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004cbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	695a      	ldr	r2, [r3, #20]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0201 	bic.w	r2, r2, #1
 8004ccc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d135      	bne.n	8004d50 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	330c      	adds	r3, #12
 8004cf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	e853 3f00 	ldrex	r3, [r3]
 8004cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f023 0310 	bic.w	r3, r3, #16
 8004d00:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	330c      	adds	r3, #12
 8004d08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d0a:	623a      	str	r2, [r7, #32]
 8004d0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0e:	69f9      	ldr	r1, [r7, #28]
 8004d10:	6a3a      	ldr	r2, [r7, #32]
 8004d12:	e841 2300 	strex	r3, r2, [r1]
 8004d16:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1e5      	bne.n	8004cea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	2b10      	cmp	r3, #16
 8004d2a:	d10a      	bne.n	8004d42 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d46:	4619      	mov	r1, r3
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7ff fdd1 	bl	80048f0 <HAL_UARTEx_RxEventCallback>
 8004d4e:	e002      	b.n	8004d56 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7fc fa99 	bl	8001288 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	e002      	b.n	8004d60 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	e000      	b.n	8004d60 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004d5e:	2302      	movs	r3, #2
  }
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3730      	adds	r7, #48	@ 0x30
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d6c:	b0c0      	sub	sp, #256	@ 0x100
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d84:	68d9      	ldr	r1, [r3, #12]
 8004d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	ea40 0301 	orr.w	r3, r0, r1
 8004d90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	431a      	orrs	r2, r3
 8004da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004dc0:	f021 010c 	bic.w	r1, r1, #12
 8004dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004dce:	430b      	orrs	r3, r1
 8004dd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de2:	6999      	ldr	r1, [r3, #24]
 8004de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	ea40 0301 	orr.w	r3, r0, r1
 8004dee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	4b8f      	ldr	r3, [pc, #572]	@ (8005034 <UART_SetConfig+0x2cc>)
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d005      	beq.n	8004e08 <UART_SetConfig+0xa0>
 8004dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	4b8d      	ldr	r3, [pc, #564]	@ (8005038 <UART_SetConfig+0x2d0>)
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d104      	bne.n	8004e12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e08:	f7fe fb0e 	bl	8003428 <HAL_RCC_GetPCLK2Freq>
 8004e0c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e10:	e003      	b.n	8004e1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e12:	f7fe faf5 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 8004e16:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e24:	f040 810c 	bne.w	8005040 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e32:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e3a:	4622      	mov	r2, r4
 8004e3c:	462b      	mov	r3, r5
 8004e3e:	1891      	adds	r1, r2, r2
 8004e40:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e42:	415b      	adcs	r3, r3
 8004e44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e4a:	4621      	mov	r1, r4
 8004e4c:	eb12 0801 	adds.w	r8, r2, r1
 8004e50:	4629      	mov	r1, r5
 8004e52:	eb43 0901 	adc.w	r9, r3, r1
 8004e56:	f04f 0200 	mov.w	r2, #0
 8004e5a:	f04f 0300 	mov.w	r3, #0
 8004e5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e6a:	4690      	mov	r8, r2
 8004e6c:	4699      	mov	r9, r3
 8004e6e:	4623      	mov	r3, r4
 8004e70:	eb18 0303 	adds.w	r3, r8, r3
 8004e74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e78:	462b      	mov	r3, r5
 8004e7a:	eb49 0303 	adc.w	r3, r9, r3
 8004e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e8e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004e92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e96:	460b      	mov	r3, r1
 8004e98:	18db      	adds	r3, r3, r3
 8004e9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	eb42 0303 	adc.w	r3, r2, r3
 8004ea2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ea4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ea8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004eac:	f7fb fe94 	bl	8000bd8 <__aeabi_uldivmod>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4b61      	ldr	r3, [pc, #388]	@ (800503c <UART_SetConfig+0x2d4>)
 8004eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8004eba:	095b      	lsrs	r3, r3, #5
 8004ebc:	011c      	lsls	r4, r3, #4
 8004ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ec8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ecc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ed0:	4642      	mov	r2, r8
 8004ed2:	464b      	mov	r3, r9
 8004ed4:	1891      	adds	r1, r2, r2
 8004ed6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ed8:	415b      	adcs	r3, r3
 8004eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004edc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ee0:	4641      	mov	r1, r8
 8004ee2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ee6:	4649      	mov	r1, r9
 8004ee8:	eb43 0b01 	adc.w	fp, r3, r1
 8004eec:	f04f 0200 	mov.w	r2, #0
 8004ef0:	f04f 0300 	mov.w	r3, #0
 8004ef4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ef8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004efc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f00:	4692      	mov	sl, r2
 8004f02:	469b      	mov	fp, r3
 8004f04:	4643      	mov	r3, r8
 8004f06:	eb1a 0303 	adds.w	r3, sl, r3
 8004f0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f0e:	464b      	mov	r3, r9
 8004f10:	eb4b 0303 	adc.w	r3, fp, r3
 8004f14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f24:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	18db      	adds	r3, r3, r3
 8004f30:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f32:	4613      	mov	r3, r2
 8004f34:	eb42 0303 	adc.w	r3, r2, r3
 8004f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f42:	f7fb fe49 	bl	8000bd8 <__aeabi_uldivmod>
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800503c <UART_SetConfig+0x2d4>)
 8004f4e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f52:	095b      	lsrs	r3, r3, #5
 8004f54:	2264      	movs	r2, #100	@ 0x64
 8004f56:	fb02 f303 	mul.w	r3, r2, r3
 8004f5a:	1acb      	subs	r3, r1, r3
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f62:	4b36      	ldr	r3, [pc, #216]	@ (800503c <UART_SetConfig+0x2d4>)
 8004f64:	fba3 2302 	umull	r2, r3, r3, r2
 8004f68:	095b      	lsrs	r3, r3, #5
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004f70:	441c      	add	r4, r3
 8004f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f76:	2200      	movs	r2, #0
 8004f78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f7c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004f80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004f84:	4642      	mov	r2, r8
 8004f86:	464b      	mov	r3, r9
 8004f88:	1891      	adds	r1, r2, r2
 8004f8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f8c:	415b      	adcs	r3, r3
 8004f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004f94:	4641      	mov	r1, r8
 8004f96:	1851      	adds	r1, r2, r1
 8004f98:	6339      	str	r1, [r7, #48]	@ 0x30
 8004f9a:	4649      	mov	r1, r9
 8004f9c:	414b      	adcs	r3, r1
 8004f9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fa0:	f04f 0200 	mov.w	r2, #0
 8004fa4:	f04f 0300 	mov.w	r3, #0
 8004fa8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004fac:	4659      	mov	r1, fp
 8004fae:	00cb      	lsls	r3, r1, #3
 8004fb0:	4651      	mov	r1, sl
 8004fb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fb6:	4651      	mov	r1, sl
 8004fb8:	00ca      	lsls	r2, r1, #3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	4642      	mov	r2, r8
 8004fc2:	189b      	adds	r3, r3, r2
 8004fc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fc8:	464b      	mov	r3, r9
 8004fca:	460a      	mov	r2, r1
 8004fcc:	eb42 0303 	adc.w	r3, r2, r3
 8004fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004fe0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004fe4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004fe8:	460b      	mov	r3, r1
 8004fea:	18db      	adds	r3, r3, r3
 8004fec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fee:	4613      	mov	r3, r2
 8004ff0:	eb42 0303 	adc.w	r3, r2, r3
 8004ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ff6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ffa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004ffe:	f7fb fdeb 	bl	8000bd8 <__aeabi_uldivmod>
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	4b0d      	ldr	r3, [pc, #52]	@ (800503c <UART_SetConfig+0x2d4>)
 8005008:	fba3 1302 	umull	r1, r3, r3, r2
 800500c:	095b      	lsrs	r3, r3, #5
 800500e:	2164      	movs	r1, #100	@ 0x64
 8005010:	fb01 f303 	mul.w	r3, r1, r3
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	3332      	adds	r3, #50	@ 0x32
 800501a:	4a08      	ldr	r2, [pc, #32]	@ (800503c <UART_SetConfig+0x2d4>)
 800501c:	fba2 2303 	umull	r2, r3, r2, r3
 8005020:	095b      	lsrs	r3, r3, #5
 8005022:	f003 0207 	and.w	r2, r3, #7
 8005026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4422      	add	r2, r4
 800502e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005030:	e106      	b.n	8005240 <UART_SetConfig+0x4d8>
 8005032:	bf00      	nop
 8005034:	40011000 	.word	0x40011000
 8005038:	40011400 	.word	0x40011400
 800503c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005044:	2200      	movs	r2, #0
 8005046:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800504a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800504e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005052:	4642      	mov	r2, r8
 8005054:	464b      	mov	r3, r9
 8005056:	1891      	adds	r1, r2, r2
 8005058:	6239      	str	r1, [r7, #32]
 800505a:	415b      	adcs	r3, r3
 800505c:	627b      	str	r3, [r7, #36]	@ 0x24
 800505e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005062:	4641      	mov	r1, r8
 8005064:	1854      	adds	r4, r2, r1
 8005066:	4649      	mov	r1, r9
 8005068:	eb43 0501 	adc.w	r5, r3, r1
 800506c:	f04f 0200 	mov.w	r2, #0
 8005070:	f04f 0300 	mov.w	r3, #0
 8005074:	00eb      	lsls	r3, r5, #3
 8005076:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800507a:	00e2      	lsls	r2, r4, #3
 800507c:	4614      	mov	r4, r2
 800507e:	461d      	mov	r5, r3
 8005080:	4643      	mov	r3, r8
 8005082:	18e3      	adds	r3, r4, r3
 8005084:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005088:	464b      	mov	r3, r9
 800508a:	eb45 0303 	adc.w	r3, r5, r3
 800508e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800509e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050a2:	f04f 0200 	mov.w	r2, #0
 80050a6:	f04f 0300 	mov.w	r3, #0
 80050aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80050ae:	4629      	mov	r1, r5
 80050b0:	008b      	lsls	r3, r1, #2
 80050b2:	4621      	mov	r1, r4
 80050b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050b8:	4621      	mov	r1, r4
 80050ba:	008a      	lsls	r2, r1, #2
 80050bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80050c0:	f7fb fd8a 	bl	8000bd8 <__aeabi_uldivmod>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4b60      	ldr	r3, [pc, #384]	@ (800524c <UART_SetConfig+0x4e4>)
 80050ca:	fba3 2302 	umull	r2, r3, r3, r2
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	011c      	lsls	r4, r3, #4
 80050d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050d6:	2200      	movs	r2, #0
 80050d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80050dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80050e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80050e4:	4642      	mov	r2, r8
 80050e6:	464b      	mov	r3, r9
 80050e8:	1891      	adds	r1, r2, r2
 80050ea:	61b9      	str	r1, [r7, #24]
 80050ec:	415b      	adcs	r3, r3
 80050ee:	61fb      	str	r3, [r7, #28]
 80050f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050f4:	4641      	mov	r1, r8
 80050f6:	1851      	adds	r1, r2, r1
 80050f8:	6139      	str	r1, [r7, #16]
 80050fa:	4649      	mov	r1, r9
 80050fc:	414b      	adcs	r3, r1
 80050fe:	617b      	str	r3, [r7, #20]
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	f04f 0300 	mov.w	r3, #0
 8005108:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800510c:	4659      	mov	r1, fp
 800510e:	00cb      	lsls	r3, r1, #3
 8005110:	4651      	mov	r1, sl
 8005112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005116:	4651      	mov	r1, sl
 8005118:	00ca      	lsls	r2, r1, #3
 800511a:	4610      	mov	r0, r2
 800511c:	4619      	mov	r1, r3
 800511e:	4603      	mov	r3, r0
 8005120:	4642      	mov	r2, r8
 8005122:	189b      	adds	r3, r3, r2
 8005124:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005128:	464b      	mov	r3, r9
 800512a:	460a      	mov	r2, r1
 800512c:	eb42 0303 	adc.w	r3, r2, r3
 8005130:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800513e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005140:	f04f 0200 	mov.w	r2, #0
 8005144:	f04f 0300 	mov.w	r3, #0
 8005148:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800514c:	4649      	mov	r1, r9
 800514e:	008b      	lsls	r3, r1, #2
 8005150:	4641      	mov	r1, r8
 8005152:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005156:	4641      	mov	r1, r8
 8005158:	008a      	lsls	r2, r1, #2
 800515a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800515e:	f7fb fd3b 	bl	8000bd8 <__aeabi_uldivmod>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	4611      	mov	r1, r2
 8005168:	4b38      	ldr	r3, [pc, #224]	@ (800524c <UART_SetConfig+0x4e4>)
 800516a:	fba3 2301 	umull	r2, r3, r3, r1
 800516e:	095b      	lsrs	r3, r3, #5
 8005170:	2264      	movs	r2, #100	@ 0x64
 8005172:	fb02 f303 	mul.w	r3, r2, r3
 8005176:	1acb      	subs	r3, r1, r3
 8005178:	011b      	lsls	r3, r3, #4
 800517a:	3332      	adds	r3, #50	@ 0x32
 800517c:	4a33      	ldr	r2, [pc, #204]	@ (800524c <UART_SetConfig+0x4e4>)
 800517e:	fba2 2303 	umull	r2, r3, r2, r3
 8005182:	095b      	lsrs	r3, r3, #5
 8005184:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005188:	441c      	add	r4, r3
 800518a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800518e:	2200      	movs	r2, #0
 8005190:	673b      	str	r3, [r7, #112]	@ 0x70
 8005192:	677a      	str	r2, [r7, #116]	@ 0x74
 8005194:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005198:	4642      	mov	r2, r8
 800519a:	464b      	mov	r3, r9
 800519c:	1891      	adds	r1, r2, r2
 800519e:	60b9      	str	r1, [r7, #8]
 80051a0:	415b      	adcs	r3, r3
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051a8:	4641      	mov	r1, r8
 80051aa:	1851      	adds	r1, r2, r1
 80051ac:	6039      	str	r1, [r7, #0]
 80051ae:	4649      	mov	r1, r9
 80051b0:	414b      	adcs	r3, r1
 80051b2:	607b      	str	r3, [r7, #4]
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051c0:	4659      	mov	r1, fp
 80051c2:	00cb      	lsls	r3, r1, #3
 80051c4:	4651      	mov	r1, sl
 80051c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ca:	4651      	mov	r1, sl
 80051cc:	00ca      	lsls	r2, r1, #3
 80051ce:	4610      	mov	r0, r2
 80051d0:	4619      	mov	r1, r3
 80051d2:	4603      	mov	r3, r0
 80051d4:	4642      	mov	r2, r8
 80051d6:	189b      	adds	r3, r3, r2
 80051d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051da:	464b      	mov	r3, r9
 80051dc:	460a      	mov	r2, r1
 80051de:	eb42 0303 	adc.w	r3, r2, r3
 80051e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80051ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80051fc:	4649      	mov	r1, r9
 80051fe:	008b      	lsls	r3, r1, #2
 8005200:	4641      	mov	r1, r8
 8005202:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005206:	4641      	mov	r1, r8
 8005208:	008a      	lsls	r2, r1, #2
 800520a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800520e:	f7fb fce3 	bl	8000bd8 <__aeabi_uldivmod>
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	4b0d      	ldr	r3, [pc, #52]	@ (800524c <UART_SetConfig+0x4e4>)
 8005218:	fba3 1302 	umull	r1, r3, r3, r2
 800521c:	095b      	lsrs	r3, r3, #5
 800521e:	2164      	movs	r1, #100	@ 0x64
 8005220:	fb01 f303 	mul.w	r3, r1, r3
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	3332      	adds	r3, #50	@ 0x32
 800522a:	4a08      	ldr	r2, [pc, #32]	@ (800524c <UART_SetConfig+0x4e4>)
 800522c:	fba2 2303 	umull	r2, r3, r2, r3
 8005230:	095b      	lsrs	r3, r3, #5
 8005232:	f003 020f 	and.w	r2, r3, #15
 8005236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4422      	add	r2, r4
 800523e:	609a      	str	r2, [r3, #8]
}
 8005240:	bf00      	nop
 8005242:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005246:	46bd      	mov	sp, r7
 8005248:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800524c:	51eb851f 	.word	0x51eb851f

08005250 <__cvt>:
 8005250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005254:	ec57 6b10 	vmov	r6, r7, d0
 8005258:	2f00      	cmp	r7, #0
 800525a:	460c      	mov	r4, r1
 800525c:	4619      	mov	r1, r3
 800525e:	463b      	mov	r3, r7
 8005260:	bfbb      	ittet	lt
 8005262:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005266:	461f      	movlt	r7, r3
 8005268:	2300      	movge	r3, #0
 800526a:	232d      	movlt	r3, #45	@ 0x2d
 800526c:	700b      	strb	r3, [r1, #0]
 800526e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005270:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005274:	4691      	mov	r9, r2
 8005276:	f023 0820 	bic.w	r8, r3, #32
 800527a:	bfbc      	itt	lt
 800527c:	4632      	movlt	r2, r6
 800527e:	4616      	movlt	r6, r2
 8005280:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005284:	d005      	beq.n	8005292 <__cvt+0x42>
 8005286:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800528a:	d100      	bne.n	800528e <__cvt+0x3e>
 800528c:	3401      	adds	r4, #1
 800528e:	2102      	movs	r1, #2
 8005290:	e000      	b.n	8005294 <__cvt+0x44>
 8005292:	2103      	movs	r1, #3
 8005294:	ab03      	add	r3, sp, #12
 8005296:	9301      	str	r3, [sp, #4]
 8005298:	ab02      	add	r3, sp, #8
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	ec47 6b10 	vmov	d0, r6, r7
 80052a0:	4653      	mov	r3, sl
 80052a2:	4622      	mov	r2, r4
 80052a4:	f001 f82c 	bl	8006300 <_dtoa_r>
 80052a8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80052ac:	4605      	mov	r5, r0
 80052ae:	d119      	bne.n	80052e4 <__cvt+0x94>
 80052b0:	f019 0f01 	tst.w	r9, #1
 80052b4:	d00e      	beq.n	80052d4 <__cvt+0x84>
 80052b6:	eb00 0904 	add.w	r9, r0, r4
 80052ba:	2200      	movs	r2, #0
 80052bc:	2300      	movs	r3, #0
 80052be:	4630      	mov	r0, r6
 80052c0:	4639      	mov	r1, r7
 80052c2:	f7fb fc19 	bl	8000af8 <__aeabi_dcmpeq>
 80052c6:	b108      	cbz	r0, 80052cc <__cvt+0x7c>
 80052c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80052cc:	2230      	movs	r2, #48	@ 0x30
 80052ce:	9b03      	ldr	r3, [sp, #12]
 80052d0:	454b      	cmp	r3, r9
 80052d2:	d31e      	bcc.n	8005312 <__cvt+0xc2>
 80052d4:	9b03      	ldr	r3, [sp, #12]
 80052d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80052d8:	1b5b      	subs	r3, r3, r5
 80052da:	4628      	mov	r0, r5
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	b004      	add	sp, #16
 80052e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80052e8:	eb00 0904 	add.w	r9, r0, r4
 80052ec:	d1e5      	bne.n	80052ba <__cvt+0x6a>
 80052ee:	7803      	ldrb	r3, [r0, #0]
 80052f0:	2b30      	cmp	r3, #48	@ 0x30
 80052f2:	d10a      	bne.n	800530a <__cvt+0xba>
 80052f4:	2200      	movs	r2, #0
 80052f6:	2300      	movs	r3, #0
 80052f8:	4630      	mov	r0, r6
 80052fa:	4639      	mov	r1, r7
 80052fc:	f7fb fbfc 	bl	8000af8 <__aeabi_dcmpeq>
 8005300:	b918      	cbnz	r0, 800530a <__cvt+0xba>
 8005302:	f1c4 0401 	rsb	r4, r4, #1
 8005306:	f8ca 4000 	str.w	r4, [sl]
 800530a:	f8da 3000 	ldr.w	r3, [sl]
 800530e:	4499      	add	r9, r3
 8005310:	e7d3      	b.n	80052ba <__cvt+0x6a>
 8005312:	1c59      	adds	r1, r3, #1
 8005314:	9103      	str	r1, [sp, #12]
 8005316:	701a      	strb	r2, [r3, #0]
 8005318:	e7d9      	b.n	80052ce <__cvt+0x7e>

0800531a <__exponent>:
 800531a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800531c:	2900      	cmp	r1, #0
 800531e:	bfba      	itte	lt
 8005320:	4249      	neglt	r1, r1
 8005322:	232d      	movlt	r3, #45	@ 0x2d
 8005324:	232b      	movge	r3, #43	@ 0x2b
 8005326:	2909      	cmp	r1, #9
 8005328:	7002      	strb	r2, [r0, #0]
 800532a:	7043      	strb	r3, [r0, #1]
 800532c:	dd29      	ble.n	8005382 <__exponent+0x68>
 800532e:	f10d 0307 	add.w	r3, sp, #7
 8005332:	461d      	mov	r5, r3
 8005334:	270a      	movs	r7, #10
 8005336:	461a      	mov	r2, r3
 8005338:	fbb1 f6f7 	udiv	r6, r1, r7
 800533c:	fb07 1416 	mls	r4, r7, r6, r1
 8005340:	3430      	adds	r4, #48	@ 0x30
 8005342:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005346:	460c      	mov	r4, r1
 8005348:	2c63      	cmp	r4, #99	@ 0x63
 800534a:	f103 33ff 	add.w	r3, r3, #4294967295
 800534e:	4631      	mov	r1, r6
 8005350:	dcf1      	bgt.n	8005336 <__exponent+0x1c>
 8005352:	3130      	adds	r1, #48	@ 0x30
 8005354:	1e94      	subs	r4, r2, #2
 8005356:	f803 1c01 	strb.w	r1, [r3, #-1]
 800535a:	1c41      	adds	r1, r0, #1
 800535c:	4623      	mov	r3, r4
 800535e:	42ab      	cmp	r3, r5
 8005360:	d30a      	bcc.n	8005378 <__exponent+0x5e>
 8005362:	f10d 0309 	add.w	r3, sp, #9
 8005366:	1a9b      	subs	r3, r3, r2
 8005368:	42ac      	cmp	r4, r5
 800536a:	bf88      	it	hi
 800536c:	2300      	movhi	r3, #0
 800536e:	3302      	adds	r3, #2
 8005370:	4403      	add	r3, r0
 8005372:	1a18      	subs	r0, r3, r0
 8005374:	b003      	add	sp, #12
 8005376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005378:	f813 6b01 	ldrb.w	r6, [r3], #1
 800537c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005380:	e7ed      	b.n	800535e <__exponent+0x44>
 8005382:	2330      	movs	r3, #48	@ 0x30
 8005384:	3130      	adds	r1, #48	@ 0x30
 8005386:	7083      	strb	r3, [r0, #2]
 8005388:	70c1      	strb	r1, [r0, #3]
 800538a:	1d03      	adds	r3, r0, #4
 800538c:	e7f1      	b.n	8005372 <__exponent+0x58>
	...

08005390 <_printf_float>:
 8005390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005394:	b08d      	sub	sp, #52	@ 0x34
 8005396:	460c      	mov	r4, r1
 8005398:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800539c:	4616      	mov	r6, r2
 800539e:	461f      	mov	r7, r3
 80053a0:	4605      	mov	r5, r0
 80053a2:	f000 fe79 	bl	8006098 <_localeconv_r>
 80053a6:	6803      	ldr	r3, [r0, #0]
 80053a8:	9304      	str	r3, [sp, #16]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fa ff78 	bl	80002a0 <strlen>
 80053b0:	2300      	movs	r3, #0
 80053b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80053b4:	f8d8 3000 	ldr.w	r3, [r8]
 80053b8:	9005      	str	r0, [sp, #20]
 80053ba:	3307      	adds	r3, #7
 80053bc:	f023 0307 	bic.w	r3, r3, #7
 80053c0:	f103 0208 	add.w	r2, r3, #8
 80053c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80053c8:	f8d4 b000 	ldr.w	fp, [r4]
 80053cc:	f8c8 2000 	str.w	r2, [r8]
 80053d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80053d8:	9307      	str	r3, [sp, #28]
 80053da:	f8cd 8018 	str.w	r8, [sp, #24]
 80053de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80053e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053e6:	4b9c      	ldr	r3, [pc, #624]	@ (8005658 <_printf_float+0x2c8>)
 80053e8:	f04f 32ff 	mov.w	r2, #4294967295
 80053ec:	f7fb fbb6 	bl	8000b5c <__aeabi_dcmpun>
 80053f0:	bb70      	cbnz	r0, 8005450 <_printf_float+0xc0>
 80053f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053f6:	4b98      	ldr	r3, [pc, #608]	@ (8005658 <_printf_float+0x2c8>)
 80053f8:	f04f 32ff 	mov.w	r2, #4294967295
 80053fc:	f7fb fb90 	bl	8000b20 <__aeabi_dcmple>
 8005400:	bb30      	cbnz	r0, 8005450 <_printf_float+0xc0>
 8005402:	2200      	movs	r2, #0
 8005404:	2300      	movs	r3, #0
 8005406:	4640      	mov	r0, r8
 8005408:	4649      	mov	r1, r9
 800540a:	f7fb fb7f 	bl	8000b0c <__aeabi_dcmplt>
 800540e:	b110      	cbz	r0, 8005416 <_printf_float+0x86>
 8005410:	232d      	movs	r3, #45	@ 0x2d
 8005412:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005416:	4a91      	ldr	r2, [pc, #580]	@ (800565c <_printf_float+0x2cc>)
 8005418:	4b91      	ldr	r3, [pc, #580]	@ (8005660 <_printf_float+0x2d0>)
 800541a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800541e:	bf94      	ite	ls
 8005420:	4690      	movls	r8, r2
 8005422:	4698      	movhi	r8, r3
 8005424:	2303      	movs	r3, #3
 8005426:	6123      	str	r3, [r4, #16]
 8005428:	f02b 0304 	bic.w	r3, fp, #4
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	f04f 0900 	mov.w	r9, #0
 8005432:	9700      	str	r7, [sp, #0]
 8005434:	4633      	mov	r3, r6
 8005436:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005438:	4621      	mov	r1, r4
 800543a:	4628      	mov	r0, r5
 800543c:	f000 f9d2 	bl	80057e4 <_printf_common>
 8005440:	3001      	adds	r0, #1
 8005442:	f040 808d 	bne.w	8005560 <_printf_float+0x1d0>
 8005446:	f04f 30ff 	mov.w	r0, #4294967295
 800544a:	b00d      	add	sp, #52	@ 0x34
 800544c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005450:	4642      	mov	r2, r8
 8005452:	464b      	mov	r3, r9
 8005454:	4640      	mov	r0, r8
 8005456:	4649      	mov	r1, r9
 8005458:	f7fb fb80 	bl	8000b5c <__aeabi_dcmpun>
 800545c:	b140      	cbz	r0, 8005470 <_printf_float+0xe0>
 800545e:	464b      	mov	r3, r9
 8005460:	2b00      	cmp	r3, #0
 8005462:	bfbc      	itt	lt
 8005464:	232d      	movlt	r3, #45	@ 0x2d
 8005466:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800546a:	4a7e      	ldr	r2, [pc, #504]	@ (8005664 <_printf_float+0x2d4>)
 800546c:	4b7e      	ldr	r3, [pc, #504]	@ (8005668 <_printf_float+0x2d8>)
 800546e:	e7d4      	b.n	800541a <_printf_float+0x8a>
 8005470:	6863      	ldr	r3, [r4, #4]
 8005472:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005476:	9206      	str	r2, [sp, #24]
 8005478:	1c5a      	adds	r2, r3, #1
 800547a:	d13b      	bne.n	80054f4 <_printf_float+0x164>
 800547c:	2306      	movs	r3, #6
 800547e:	6063      	str	r3, [r4, #4]
 8005480:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005484:	2300      	movs	r3, #0
 8005486:	6022      	str	r2, [r4, #0]
 8005488:	9303      	str	r3, [sp, #12]
 800548a:	ab0a      	add	r3, sp, #40	@ 0x28
 800548c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005490:	ab09      	add	r3, sp, #36	@ 0x24
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	6861      	ldr	r1, [r4, #4]
 8005496:	ec49 8b10 	vmov	d0, r8, r9
 800549a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800549e:	4628      	mov	r0, r5
 80054a0:	f7ff fed6 	bl	8005250 <__cvt>
 80054a4:	9b06      	ldr	r3, [sp, #24]
 80054a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80054a8:	2b47      	cmp	r3, #71	@ 0x47
 80054aa:	4680      	mov	r8, r0
 80054ac:	d129      	bne.n	8005502 <_printf_float+0x172>
 80054ae:	1cc8      	adds	r0, r1, #3
 80054b0:	db02      	blt.n	80054b8 <_printf_float+0x128>
 80054b2:	6863      	ldr	r3, [r4, #4]
 80054b4:	4299      	cmp	r1, r3
 80054b6:	dd41      	ble.n	800553c <_printf_float+0x1ac>
 80054b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80054bc:	fa5f fa8a 	uxtb.w	sl, sl
 80054c0:	3901      	subs	r1, #1
 80054c2:	4652      	mov	r2, sl
 80054c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80054c8:	9109      	str	r1, [sp, #36]	@ 0x24
 80054ca:	f7ff ff26 	bl	800531a <__exponent>
 80054ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80054d0:	1813      	adds	r3, r2, r0
 80054d2:	2a01      	cmp	r2, #1
 80054d4:	4681      	mov	r9, r0
 80054d6:	6123      	str	r3, [r4, #16]
 80054d8:	dc02      	bgt.n	80054e0 <_printf_float+0x150>
 80054da:	6822      	ldr	r2, [r4, #0]
 80054dc:	07d2      	lsls	r2, r2, #31
 80054de:	d501      	bpl.n	80054e4 <_printf_float+0x154>
 80054e0:	3301      	adds	r3, #1
 80054e2:	6123      	str	r3, [r4, #16]
 80054e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0a2      	beq.n	8005432 <_printf_float+0xa2>
 80054ec:	232d      	movs	r3, #45	@ 0x2d
 80054ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054f2:	e79e      	b.n	8005432 <_printf_float+0xa2>
 80054f4:	9a06      	ldr	r2, [sp, #24]
 80054f6:	2a47      	cmp	r2, #71	@ 0x47
 80054f8:	d1c2      	bne.n	8005480 <_printf_float+0xf0>
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1c0      	bne.n	8005480 <_printf_float+0xf0>
 80054fe:	2301      	movs	r3, #1
 8005500:	e7bd      	b.n	800547e <_printf_float+0xee>
 8005502:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005506:	d9db      	bls.n	80054c0 <_printf_float+0x130>
 8005508:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800550c:	d118      	bne.n	8005540 <_printf_float+0x1b0>
 800550e:	2900      	cmp	r1, #0
 8005510:	6863      	ldr	r3, [r4, #4]
 8005512:	dd0b      	ble.n	800552c <_printf_float+0x19c>
 8005514:	6121      	str	r1, [r4, #16]
 8005516:	b913      	cbnz	r3, 800551e <_printf_float+0x18e>
 8005518:	6822      	ldr	r2, [r4, #0]
 800551a:	07d0      	lsls	r0, r2, #31
 800551c:	d502      	bpl.n	8005524 <_printf_float+0x194>
 800551e:	3301      	adds	r3, #1
 8005520:	440b      	add	r3, r1
 8005522:	6123      	str	r3, [r4, #16]
 8005524:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005526:	f04f 0900 	mov.w	r9, #0
 800552a:	e7db      	b.n	80054e4 <_printf_float+0x154>
 800552c:	b913      	cbnz	r3, 8005534 <_printf_float+0x1a4>
 800552e:	6822      	ldr	r2, [r4, #0]
 8005530:	07d2      	lsls	r2, r2, #31
 8005532:	d501      	bpl.n	8005538 <_printf_float+0x1a8>
 8005534:	3302      	adds	r3, #2
 8005536:	e7f4      	b.n	8005522 <_printf_float+0x192>
 8005538:	2301      	movs	r3, #1
 800553a:	e7f2      	b.n	8005522 <_printf_float+0x192>
 800553c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005542:	4299      	cmp	r1, r3
 8005544:	db05      	blt.n	8005552 <_printf_float+0x1c2>
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	6121      	str	r1, [r4, #16]
 800554a:	07d8      	lsls	r0, r3, #31
 800554c:	d5ea      	bpl.n	8005524 <_printf_float+0x194>
 800554e:	1c4b      	adds	r3, r1, #1
 8005550:	e7e7      	b.n	8005522 <_printf_float+0x192>
 8005552:	2900      	cmp	r1, #0
 8005554:	bfd4      	ite	le
 8005556:	f1c1 0202 	rsble	r2, r1, #2
 800555a:	2201      	movgt	r2, #1
 800555c:	4413      	add	r3, r2
 800555e:	e7e0      	b.n	8005522 <_printf_float+0x192>
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	055a      	lsls	r2, r3, #21
 8005564:	d407      	bmi.n	8005576 <_printf_float+0x1e6>
 8005566:	6923      	ldr	r3, [r4, #16]
 8005568:	4642      	mov	r2, r8
 800556a:	4631      	mov	r1, r6
 800556c:	4628      	mov	r0, r5
 800556e:	47b8      	blx	r7
 8005570:	3001      	adds	r0, #1
 8005572:	d12b      	bne.n	80055cc <_printf_float+0x23c>
 8005574:	e767      	b.n	8005446 <_printf_float+0xb6>
 8005576:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800557a:	f240 80dd 	bls.w	8005738 <_printf_float+0x3a8>
 800557e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005582:	2200      	movs	r2, #0
 8005584:	2300      	movs	r3, #0
 8005586:	f7fb fab7 	bl	8000af8 <__aeabi_dcmpeq>
 800558a:	2800      	cmp	r0, #0
 800558c:	d033      	beq.n	80055f6 <_printf_float+0x266>
 800558e:	4a37      	ldr	r2, [pc, #220]	@ (800566c <_printf_float+0x2dc>)
 8005590:	2301      	movs	r3, #1
 8005592:	4631      	mov	r1, r6
 8005594:	4628      	mov	r0, r5
 8005596:	47b8      	blx	r7
 8005598:	3001      	adds	r0, #1
 800559a:	f43f af54 	beq.w	8005446 <_printf_float+0xb6>
 800559e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80055a2:	4543      	cmp	r3, r8
 80055a4:	db02      	blt.n	80055ac <_printf_float+0x21c>
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	07d8      	lsls	r0, r3, #31
 80055aa:	d50f      	bpl.n	80055cc <_printf_float+0x23c>
 80055ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055b0:	4631      	mov	r1, r6
 80055b2:	4628      	mov	r0, r5
 80055b4:	47b8      	blx	r7
 80055b6:	3001      	adds	r0, #1
 80055b8:	f43f af45 	beq.w	8005446 <_printf_float+0xb6>
 80055bc:	f04f 0900 	mov.w	r9, #0
 80055c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80055c4:	f104 0a1a 	add.w	sl, r4, #26
 80055c8:	45c8      	cmp	r8, r9
 80055ca:	dc09      	bgt.n	80055e0 <_printf_float+0x250>
 80055cc:	6823      	ldr	r3, [r4, #0]
 80055ce:	079b      	lsls	r3, r3, #30
 80055d0:	f100 8103 	bmi.w	80057da <_printf_float+0x44a>
 80055d4:	68e0      	ldr	r0, [r4, #12]
 80055d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055d8:	4298      	cmp	r0, r3
 80055da:	bfb8      	it	lt
 80055dc:	4618      	movlt	r0, r3
 80055de:	e734      	b.n	800544a <_printf_float+0xba>
 80055e0:	2301      	movs	r3, #1
 80055e2:	4652      	mov	r2, sl
 80055e4:	4631      	mov	r1, r6
 80055e6:	4628      	mov	r0, r5
 80055e8:	47b8      	blx	r7
 80055ea:	3001      	adds	r0, #1
 80055ec:	f43f af2b 	beq.w	8005446 <_printf_float+0xb6>
 80055f0:	f109 0901 	add.w	r9, r9, #1
 80055f4:	e7e8      	b.n	80055c8 <_printf_float+0x238>
 80055f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	dc39      	bgt.n	8005670 <_printf_float+0x2e0>
 80055fc:	4a1b      	ldr	r2, [pc, #108]	@ (800566c <_printf_float+0x2dc>)
 80055fe:	2301      	movs	r3, #1
 8005600:	4631      	mov	r1, r6
 8005602:	4628      	mov	r0, r5
 8005604:	47b8      	blx	r7
 8005606:	3001      	adds	r0, #1
 8005608:	f43f af1d 	beq.w	8005446 <_printf_float+0xb6>
 800560c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005610:	ea59 0303 	orrs.w	r3, r9, r3
 8005614:	d102      	bne.n	800561c <_printf_float+0x28c>
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	07d9      	lsls	r1, r3, #31
 800561a:	d5d7      	bpl.n	80055cc <_printf_float+0x23c>
 800561c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005620:	4631      	mov	r1, r6
 8005622:	4628      	mov	r0, r5
 8005624:	47b8      	blx	r7
 8005626:	3001      	adds	r0, #1
 8005628:	f43f af0d 	beq.w	8005446 <_printf_float+0xb6>
 800562c:	f04f 0a00 	mov.w	sl, #0
 8005630:	f104 0b1a 	add.w	fp, r4, #26
 8005634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005636:	425b      	negs	r3, r3
 8005638:	4553      	cmp	r3, sl
 800563a:	dc01      	bgt.n	8005640 <_printf_float+0x2b0>
 800563c:	464b      	mov	r3, r9
 800563e:	e793      	b.n	8005568 <_printf_float+0x1d8>
 8005640:	2301      	movs	r3, #1
 8005642:	465a      	mov	r2, fp
 8005644:	4631      	mov	r1, r6
 8005646:	4628      	mov	r0, r5
 8005648:	47b8      	blx	r7
 800564a:	3001      	adds	r0, #1
 800564c:	f43f aefb 	beq.w	8005446 <_printf_float+0xb6>
 8005650:	f10a 0a01 	add.w	sl, sl, #1
 8005654:	e7ee      	b.n	8005634 <_printf_float+0x2a4>
 8005656:	bf00      	nop
 8005658:	7fefffff 	.word	0x7fefffff
 800565c:	08008774 	.word	0x08008774
 8005660:	08008778 	.word	0x08008778
 8005664:	0800877c 	.word	0x0800877c
 8005668:	08008780 	.word	0x08008780
 800566c:	08008784 	.word	0x08008784
 8005670:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005672:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005676:	4553      	cmp	r3, sl
 8005678:	bfa8      	it	ge
 800567a:	4653      	movge	r3, sl
 800567c:	2b00      	cmp	r3, #0
 800567e:	4699      	mov	r9, r3
 8005680:	dc36      	bgt.n	80056f0 <_printf_float+0x360>
 8005682:	f04f 0b00 	mov.w	fp, #0
 8005686:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800568a:	f104 021a 	add.w	r2, r4, #26
 800568e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005690:	9306      	str	r3, [sp, #24]
 8005692:	eba3 0309 	sub.w	r3, r3, r9
 8005696:	455b      	cmp	r3, fp
 8005698:	dc31      	bgt.n	80056fe <_printf_float+0x36e>
 800569a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800569c:	459a      	cmp	sl, r3
 800569e:	dc3a      	bgt.n	8005716 <_printf_float+0x386>
 80056a0:	6823      	ldr	r3, [r4, #0]
 80056a2:	07da      	lsls	r2, r3, #31
 80056a4:	d437      	bmi.n	8005716 <_printf_float+0x386>
 80056a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056a8:	ebaa 0903 	sub.w	r9, sl, r3
 80056ac:	9b06      	ldr	r3, [sp, #24]
 80056ae:	ebaa 0303 	sub.w	r3, sl, r3
 80056b2:	4599      	cmp	r9, r3
 80056b4:	bfa8      	it	ge
 80056b6:	4699      	movge	r9, r3
 80056b8:	f1b9 0f00 	cmp.w	r9, #0
 80056bc:	dc33      	bgt.n	8005726 <_printf_float+0x396>
 80056be:	f04f 0800 	mov.w	r8, #0
 80056c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056c6:	f104 0b1a 	add.w	fp, r4, #26
 80056ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056cc:	ebaa 0303 	sub.w	r3, sl, r3
 80056d0:	eba3 0309 	sub.w	r3, r3, r9
 80056d4:	4543      	cmp	r3, r8
 80056d6:	f77f af79 	ble.w	80055cc <_printf_float+0x23c>
 80056da:	2301      	movs	r3, #1
 80056dc:	465a      	mov	r2, fp
 80056de:	4631      	mov	r1, r6
 80056e0:	4628      	mov	r0, r5
 80056e2:	47b8      	blx	r7
 80056e4:	3001      	adds	r0, #1
 80056e6:	f43f aeae 	beq.w	8005446 <_printf_float+0xb6>
 80056ea:	f108 0801 	add.w	r8, r8, #1
 80056ee:	e7ec      	b.n	80056ca <_printf_float+0x33a>
 80056f0:	4642      	mov	r2, r8
 80056f2:	4631      	mov	r1, r6
 80056f4:	4628      	mov	r0, r5
 80056f6:	47b8      	blx	r7
 80056f8:	3001      	adds	r0, #1
 80056fa:	d1c2      	bne.n	8005682 <_printf_float+0x2f2>
 80056fc:	e6a3      	b.n	8005446 <_printf_float+0xb6>
 80056fe:	2301      	movs	r3, #1
 8005700:	4631      	mov	r1, r6
 8005702:	4628      	mov	r0, r5
 8005704:	9206      	str	r2, [sp, #24]
 8005706:	47b8      	blx	r7
 8005708:	3001      	adds	r0, #1
 800570a:	f43f ae9c 	beq.w	8005446 <_printf_float+0xb6>
 800570e:	9a06      	ldr	r2, [sp, #24]
 8005710:	f10b 0b01 	add.w	fp, fp, #1
 8005714:	e7bb      	b.n	800568e <_printf_float+0x2fe>
 8005716:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800571a:	4631      	mov	r1, r6
 800571c:	4628      	mov	r0, r5
 800571e:	47b8      	blx	r7
 8005720:	3001      	adds	r0, #1
 8005722:	d1c0      	bne.n	80056a6 <_printf_float+0x316>
 8005724:	e68f      	b.n	8005446 <_printf_float+0xb6>
 8005726:	9a06      	ldr	r2, [sp, #24]
 8005728:	464b      	mov	r3, r9
 800572a:	4442      	add	r2, r8
 800572c:	4631      	mov	r1, r6
 800572e:	4628      	mov	r0, r5
 8005730:	47b8      	blx	r7
 8005732:	3001      	adds	r0, #1
 8005734:	d1c3      	bne.n	80056be <_printf_float+0x32e>
 8005736:	e686      	b.n	8005446 <_printf_float+0xb6>
 8005738:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800573c:	f1ba 0f01 	cmp.w	sl, #1
 8005740:	dc01      	bgt.n	8005746 <_printf_float+0x3b6>
 8005742:	07db      	lsls	r3, r3, #31
 8005744:	d536      	bpl.n	80057b4 <_printf_float+0x424>
 8005746:	2301      	movs	r3, #1
 8005748:	4642      	mov	r2, r8
 800574a:	4631      	mov	r1, r6
 800574c:	4628      	mov	r0, r5
 800574e:	47b8      	blx	r7
 8005750:	3001      	adds	r0, #1
 8005752:	f43f ae78 	beq.w	8005446 <_printf_float+0xb6>
 8005756:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800575a:	4631      	mov	r1, r6
 800575c:	4628      	mov	r0, r5
 800575e:	47b8      	blx	r7
 8005760:	3001      	adds	r0, #1
 8005762:	f43f ae70 	beq.w	8005446 <_printf_float+0xb6>
 8005766:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800576a:	2200      	movs	r2, #0
 800576c:	2300      	movs	r3, #0
 800576e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005772:	f7fb f9c1 	bl	8000af8 <__aeabi_dcmpeq>
 8005776:	b9c0      	cbnz	r0, 80057aa <_printf_float+0x41a>
 8005778:	4653      	mov	r3, sl
 800577a:	f108 0201 	add.w	r2, r8, #1
 800577e:	4631      	mov	r1, r6
 8005780:	4628      	mov	r0, r5
 8005782:	47b8      	blx	r7
 8005784:	3001      	adds	r0, #1
 8005786:	d10c      	bne.n	80057a2 <_printf_float+0x412>
 8005788:	e65d      	b.n	8005446 <_printf_float+0xb6>
 800578a:	2301      	movs	r3, #1
 800578c:	465a      	mov	r2, fp
 800578e:	4631      	mov	r1, r6
 8005790:	4628      	mov	r0, r5
 8005792:	47b8      	blx	r7
 8005794:	3001      	adds	r0, #1
 8005796:	f43f ae56 	beq.w	8005446 <_printf_float+0xb6>
 800579a:	f108 0801 	add.w	r8, r8, #1
 800579e:	45d0      	cmp	r8, sl
 80057a0:	dbf3      	blt.n	800578a <_printf_float+0x3fa>
 80057a2:	464b      	mov	r3, r9
 80057a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80057a8:	e6df      	b.n	800556a <_printf_float+0x1da>
 80057aa:	f04f 0800 	mov.w	r8, #0
 80057ae:	f104 0b1a 	add.w	fp, r4, #26
 80057b2:	e7f4      	b.n	800579e <_printf_float+0x40e>
 80057b4:	2301      	movs	r3, #1
 80057b6:	4642      	mov	r2, r8
 80057b8:	e7e1      	b.n	800577e <_printf_float+0x3ee>
 80057ba:	2301      	movs	r3, #1
 80057bc:	464a      	mov	r2, r9
 80057be:	4631      	mov	r1, r6
 80057c0:	4628      	mov	r0, r5
 80057c2:	47b8      	blx	r7
 80057c4:	3001      	adds	r0, #1
 80057c6:	f43f ae3e 	beq.w	8005446 <_printf_float+0xb6>
 80057ca:	f108 0801 	add.w	r8, r8, #1
 80057ce:	68e3      	ldr	r3, [r4, #12]
 80057d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80057d2:	1a5b      	subs	r3, r3, r1
 80057d4:	4543      	cmp	r3, r8
 80057d6:	dcf0      	bgt.n	80057ba <_printf_float+0x42a>
 80057d8:	e6fc      	b.n	80055d4 <_printf_float+0x244>
 80057da:	f04f 0800 	mov.w	r8, #0
 80057de:	f104 0919 	add.w	r9, r4, #25
 80057e2:	e7f4      	b.n	80057ce <_printf_float+0x43e>

080057e4 <_printf_common>:
 80057e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e8:	4616      	mov	r6, r2
 80057ea:	4698      	mov	r8, r3
 80057ec:	688a      	ldr	r2, [r1, #8]
 80057ee:	690b      	ldr	r3, [r1, #16]
 80057f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057f4:	4293      	cmp	r3, r2
 80057f6:	bfb8      	it	lt
 80057f8:	4613      	movlt	r3, r2
 80057fa:	6033      	str	r3, [r6, #0]
 80057fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005800:	4607      	mov	r7, r0
 8005802:	460c      	mov	r4, r1
 8005804:	b10a      	cbz	r2, 800580a <_printf_common+0x26>
 8005806:	3301      	adds	r3, #1
 8005808:	6033      	str	r3, [r6, #0]
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	0699      	lsls	r1, r3, #26
 800580e:	bf42      	ittt	mi
 8005810:	6833      	ldrmi	r3, [r6, #0]
 8005812:	3302      	addmi	r3, #2
 8005814:	6033      	strmi	r3, [r6, #0]
 8005816:	6825      	ldr	r5, [r4, #0]
 8005818:	f015 0506 	ands.w	r5, r5, #6
 800581c:	d106      	bne.n	800582c <_printf_common+0x48>
 800581e:	f104 0a19 	add.w	sl, r4, #25
 8005822:	68e3      	ldr	r3, [r4, #12]
 8005824:	6832      	ldr	r2, [r6, #0]
 8005826:	1a9b      	subs	r3, r3, r2
 8005828:	42ab      	cmp	r3, r5
 800582a:	dc26      	bgt.n	800587a <_printf_common+0x96>
 800582c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005830:	6822      	ldr	r2, [r4, #0]
 8005832:	3b00      	subs	r3, #0
 8005834:	bf18      	it	ne
 8005836:	2301      	movne	r3, #1
 8005838:	0692      	lsls	r2, r2, #26
 800583a:	d42b      	bmi.n	8005894 <_printf_common+0xb0>
 800583c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005840:	4641      	mov	r1, r8
 8005842:	4638      	mov	r0, r7
 8005844:	47c8      	blx	r9
 8005846:	3001      	adds	r0, #1
 8005848:	d01e      	beq.n	8005888 <_printf_common+0xa4>
 800584a:	6823      	ldr	r3, [r4, #0]
 800584c:	6922      	ldr	r2, [r4, #16]
 800584e:	f003 0306 	and.w	r3, r3, #6
 8005852:	2b04      	cmp	r3, #4
 8005854:	bf02      	ittt	eq
 8005856:	68e5      	ldreq	r5, [r4, #12]
 8005858:	6833      	ldreq	r3, [r6, #0]
 800585a:	1aed      	subeq	r5, r5, r3
 800585c:	68a3      	ldr	r3, [r4, #8]
 800585e:	bf0c      	ite	eq
 8005860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005864:	2500      	movne	r5, #0
 8005866:	4293      	cmp	r3, r2
 8005868:	bfc4      	itt	gt
 800586a:	1a9b      	subgt	r3, r3, r2
 800586c:	18ed      	addgt	r5, r5, r3
 800586e:	2600      	movs	r6, #0
 8005870:	341a      	adds	r4, #26
 8005872:	42b5      	cmp	r5, r6
 8005874:	d11a      	bne.n	80058ac <_printf_common+0xc8>
 8005876:	2000      	movs	r0, #0
 8005878:	e008      	b.n	800588c <_printf_common+0xa8>
 800587a:	2301      	movs	r3, #1
 800587c:	4652      	mov	r2, sl
 800587e:	4641      	mov	r1, r8
 8005880:	4638      	mov	r0, r7
 8005882:	47c8      	blx	r9
 8005884:	3001      	adds	r0, #1
 8005886:	d103      	bne.n	8005890 <_printf_common+0xac>
 8005888:	f04f 30ff 	mov.w	r0, #4294967295
 800588c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005890:	3501      	adds	r5, #1
 8005892:	e7c6      	b.n	8005822 <_printf_common+0x3e>
 8005894:	18e1      	adds	r1, r4, r3
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	2030      	movs	r0, #48	@ 0x30
 800589a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800589e:	4422      	add	r2, r4
 80058a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80058a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80058a8:	3302      	adds	r3, #2
 80058aa:	e7c7      	b.n	800583c <_printf_common+0x58>
 80058ac:	2301      	movs	r3, #1
 80058ae:	4622      	mov	r2, r4
 80058b0:	4641      	mov	r1, r8
 80058b2:	4638      	mov	r0, r7
 80058b4:	47c8      	blx	r9
 80058b6:	3001      	adds	r0, #1
 80058b8:	d0e6      	beq.n	8005888 <_printf_common+0xa4>
 80058ba:	3601      	adds	r6, #1
 80058bc:	e7d9      	b.n	8005872 <_printf_common+0x8e>
	...

080058c0 <_printf_i>:
 80058c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058c4:	7e0f      	ldrb	r7, [r1, #24]
 80058c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80058c8:	2f78      	cmp	r7, #120	@ 0x78
 80058ca:	4691      	mov	r9, r2
 80058cc:	4680      	mov	r8, r0
 80058ce:	460c      	mov	r4, r1
 80058d0:	469a      	mov	sl, r3
 80058d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80058d6:	d807      	bhi.n	80058e8 <_printf_i+0x28>
 80058d8:	2f62      	cmp	r7, #98	@ 0x62
 80058da:	d80a      	bhi.n	80058f2 <_printf_i+0x32>
 80058dc:	2f00      	cmp	r7, #0
 80058de:	f000 80d2 	beq.w	8005a86 <_printf_i+0x1c6>
 80058e2:	2f58      	cmp	r7, #88	@ 0x58
 80058e4:	f000 80b9 	beq.w	8005a5a <_printf_i+0x19a>
 80058e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80058f0:	e03a      	b.n	8005968 <_printf_i+0xa8>
 80058f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80058f6:	2b15      	cmp	r3, #21
 80058f8:	d8f6      	bhi.n	80058e8 <_printf_i+0x28>
 80058fa:	a101      	add	r1, pc, #4	@ (adr r1, 8005900 <_printf_i+0x40>)
 80058fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005900:	08005959 	.word	0x08005959
 8005904:	0800596d 	.word	0x0800596d
 8005908:	080058e9 	.word	0x080058e9
 800590c:	080058e9 	.word	0x080058e9
 8005910:	080058e9 	.word	0x080058e9
 8005914:	080058e9 	.word	0x080058e9
 8005918:	0800596d 	.word	0x0800596d
 800591c:	080058e9 	.word	0x080058e9
 8005920:	080058e9 	.word	0x080058e9
 8005924:	080058e9 	.word	0x080058e9
 8005928:	080058e9 	.word	0x080058e9
 800592c:	08005a6d 	.word	0x08005a6d
 8005930:	08005997 	.word	0x08005997
 8005934:	08005a27 	.word	0x08005a27
 8005938:	080058e9 	.word	0x080058e9
 800593c:	080058e9 	.word	0x080058e9
 8005940:	08005a8f 	.word	0x08005a8f
 8005944:	080058e9 	.word	0x080058e9
 8005948:	08005997 	.word	0x08005997
 800594c:	080058e9 	.word	0x080058e9
 8005950:	080058e9 	.word	0x080058e9
 8005954:	08005a2f 	.word	0x08005a2f
 8005958:	6833      	ldr	r3, [r6, #0]
 800595a:	1d1a      	adds	r2, r3, #4
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	6032      	str	r2, [r6, #0]
 8005960:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005964:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005968:	2301      	movs	r3, #1
 800596a:	e09d      	b.n	8005aa8 <_printf_i+0x1e8>
 800596c:	6833      	ldr	r3, [r6, #0]
 800596e:	6820      	ldr	r0, [r4, #0]
 8005970:	1d19      	adds	r1, r3, #4
 8005972:	6031      	str	r1, [r6, #0]
 8005974:	0606      	lsls	r6, r0, #24
 8005976:	d501      	bpl.n	800597c <_printf_i+0xbc>
 8005978:	681d      	ldr	r5, [r3, #0]
 800597a:	e003      	b.n	8005984 <_printf_i+0xc4>
 800597c:	0645      	lsls	r5, r0, #25
 800597e:	d5fb      	bpl.n	8005978 <_printf_i+0xb8>
 8005980:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005984:	2d00      	cmp	r5, #0
 8005986:	da03      	bge.n	8005990 <_printf_i+0xd0>
 8005988:	232d      	movs	r3, #45	@ 0x2d
 800598a:	426d      	negs	r5, r5
 800598c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005990:	4859      	ldr	r0, [pc, #356]	@ (8005af8 <_printf_i+0x238>)
 8005992:	230a      	movs	r3, #10
 8005994:	e011      	b.n	80059ba <_printf_i+0xfa>
 8005996:	6821      	ldr	r1, [r4, #0]
 8005998:	6833      	ldr	r3, [r6, #0]
 800599a:	0608      	lsls	r0, r1, #24
 800599c:	f853 5b04 	ldr.w	r5, [r3], #4
 80059a0:	d402      	bmi.n	80059a8 <_printf_i+0xe8>
 80059a2:	0649      	lsls	r1, r1, #25
 80059a4:	bf48      	it	mi
 80059a6:	b2ad      	uxthmi	r5, r5
 80059a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80059aa:	4853      	ldr	r0, [pc, #332]	@ (8005af8 <_printf_i+0x238>)
 80059ac:	6033      	str	r3, [r6, #0]
 80059ae:	bf14      	ite	ne
 80059b0:	230a      	movne	r3, #10
 80059b2:	2308      	moveq	r3, #8
 80059b4:	2100      	movs	r1, #0
 80059b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80059ba:	6866      	ldr	r6, [r4, #4]
 80059bc:	60a6      	str	r6, [r4, #8]
 80059be:	2e00      	cmp	r6, #0
 80059c0:	bfa2      	ittt	ge
 80059c2:	6821      	ldrge	r1, [r4, #0]
 80059c4:	f021 0104 	bicge.w	r1, r1, #4
 80059c8:	6021      	strge	r1, [r4, #0]
 80059ca:	b90d      	cbnz	r5, 80059d0 <_printf_i+0x110>
 80059cc:	2e00      	cmp	r6, #0
 80059ce:	d04b      	beq.n	8005a68 <_printf_i+0x1a8>
 80059d0:	4616      	mov	r6, r2
 80059d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80059d6:	fb03 5711 	mls	r7, r3, r1, r5
 80059da:	5dc7      	ldrb	r7, [r0, r7]
 80059dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059e0:	462f      	mov	r7, r5
 80059e2:	42bb      	cmp	r3, r7
 80059e4:	460d      	mov	r5, r1
 80059e6:	d9f4      	bls.n	80059d2 <_printf_i+0x112>
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d10b      	bne.n	8005a04 <_printf_i+0x144>
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	07df      	lsls	r7, r3, #31
 80059f0:	d508      	bpl.n	8005a04 <_printf_i+0x144>
 80059f2:	6923      	ldr	r3, [r4, #16]
 80059f4:	6861      	ldr	r1, [r4, #4]
 80059f6:	4299      	cmp	r1, r3
 80059f8:	bfde      	ittt	le
 80059fa:	2330      	movle	r3, #48	@ 0x30
 80059fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a04:	1b92      	subs	r2, r2, r6
 8005a06:	6122      	str	r2, [r4, #16]
 8005a08:	f8cd a000 	str.w	sl, [sp]
 8005a0c:	464b      	mov	r3, r9
 8005a0e:	aa03      	add	r2, sp, #12
 8005a10:	4621      	mov	r1, r4
 8005a12:	4640      	mov	r0, r8
 8005a14:	f7ff fee6 	bl	80057e4 <_printf_common>
 8005a18:	3001      	adds	r0, #1
 8005a1a:	d14a      	bne.n	8005ab2 <_printf_i+0x1f2>
 8005a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a20:	b004      	add	sp, #16
 8005a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	f043 0320 	orr.w	r3, r3, #32
 8005a2c:	6023      	str	r3, [r4, #0]
 8005a2e:	4833      	ldr	r0, [pc, #204]	@ (8005afc <_printf_i+0x23c>)
 8005a30:	2778      	movs	r7, #120	@ 0x78
 8005a32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	6831      	ldr	r1, [r6, #0]
 8005a3a:	061f      	lsls	r7, r3, #24
 8005a3c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a40:	d402      	bmi.n	8005a48 <_printf_i+0x188>
 8005a42:	065f      	lsls	r7, r3, #25
 8005a44:	bf48      	it	mi
 8005a46:	b2ad      	uxthmi	r5, r5
 8005a48:	6031      	str	r1, [r6, #0]
 8005a4a:	07d9      	lsls	r1, r3, #31
 8005a4c:	bf44      	itt	mi
 8005a4e:	f043 0320 	orrmi.w	r3, r3, #32
 8005a52:	6023      	strmi	r3, [r4, #0]
 8005a54:	b11d      	cbz	r5, 8005a5e <_printf_i+0x19e>
 8005a56:	2310      	movs	r3, #16
 8005a58:	e7ac      	b.n	80059b4 <_printf_i+0xf4>
 8005a5a:	4827      	ldr	r0, [pc, #156]	@ (8005af8 <_printf_i+0x238>)
 8005a5c:	e7e9      	b.n	8005a32 <_printf_i+0x172>
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	f023 0320 	bic.w	r3, r3, #32
 8005a64:	6023      	str	r3, [r4, #0]
 8005a66:	e7f6      	b.n	8005a56 <_printf_i+0x196>
 8005a68:	4616      	mov	r6, r2
 8005a6a:	e7bd      	b.n	80059e8 <_printf_i+0x128>
 8005a6c:	6833      	ldr	r3, [r6, #0]
 8005a6e:	6825      	ldr	r5, [r4, #0]
 8005a70:	6961      	ldr	r1, [r4, #20]
 8005a72:	1d18      	adds	r0, r3, #4
 8005a74:	6030      	str	r0, [r6, #0]
 8005a76:	062e      	lsls	r6, r5, #24
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	d501      	bpl.n	8005a80 <_printf_i+0x1c0>
 8005a7c:	6019      	str	r1, [r3, #0]
 8005a7e:	e002      	b.n	8005a86 <_printf_i+0x1c6>
 8005a80:	0668      	lsls	r0, r5, #25
 8005a82:	d5fb      	bpl.n	8005a7c <_printf_i+0x1bc>
 8005a84:	8019      	strh	r1, [r3, #0]
 8005a86:	2300      	movs	r3, #0
 8005a88:	6123      	str	r3, [r4, #16]
 8005a8a:	4616      	mov	r6, r2
 8005a8c:	e7bc      	b.n	8005a08 <_printf_i+0x148>
 8005a8e:	6833      	ldr	r3, [r6, #0]
 8005a90:	1d1a      	adds	r2, r3, #4
 8005a92:	6032      	str	r2, [r6, #0]
 8005a94:	681e      	ldr	r6, [r3, #0]
 8005a96:	6862      	ldr	r2, [r4, #4]
 8005a98:	2100      	movs	r1, #0
 8005a9a:	4630      	mov	r0, r6
 8005a9c:	f7fa fbb0 	bl	8000200 <memchr>
 8005aa0:	b108      	cbz	r0, 8005aa6 <_printf_i+0x1e6>
 8005aa2:	1b80      	subs	r0, r0, r6
 8005aa4:	6060      	str	r0, [r4, #4]
 8005aa6:	6863      	ldr	r3, [r4, #4]
 8005aa8:	6123      	str	r3, [r4, #16]
 8005aaa:	2300      	movs	r3, #0
 8005aac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ab0:	e7aa      	b.n	8005a08 <_printf_i+0x148>
 8005ab2:	6923      	ldr	r3, [r4, #16]
 8005ab4:	4632      	mov	r2, r6
 8005ab6:	4649      	mov	r1, r9
 8005ab8:	4640      	mov	r0, r8
 8005aba:	47d0      	blx	sl
 8005abc:	3001      	adds	r0, #1
 8005abe:	d0ad      	beq.n	8005a1c <_printf_i+0x15c>
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	079b      	lsls	r3, r3, #30
 8005ac4:	d413      	bmi.n	8005aee <_printf_i+0x22e>
 8005ac6:	68e0      	ldr	r0, [r4, #12]
 8005ac8:	9b03      	ldr	r3, [sp, #12]
 8005aca:	4298      	cmp	r0, r3
 8005acc:	bfb8      	it	lt
 8005ace:	4618      	movlt	r0, r3
 8005ad0:	e7a6      	b.n	8005a20 <_printf_i+0x160>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	4632      	mov	r2, r6
 8005ad6:	4649      	mov	r1, r9
 8005ad8:	4640      	mov	r0, r8
 8005ada:	47d0      	blx	sl
 8005adc:	3001      	adds	r0, #1
 8005ade:	d09d      	beq.n	8005a1c <_printf_i+0x15c>
 8005ae0:	3501      	adds	r5, #1
 8005ae2:	68e3      	ldr	r3, [r4, #12]
 8005ae4:	9903      	ldr	r1, [sp, #12]
 8005ae6:	1a5b      	subs	r3, r3, r1
 8005ae8:	42ab      	cmp	r3, r5
 8005aea:	dcf2      	bgt.n	8005ad2 <_printf_i+0x212>
 8005aec:	e7eb      	b.n	8005ac6 <_printf_i+0x206>
 8005aee:	2500      	movs	r5, #0
 8005af0:	f104 0619 	add.w	r6, r4, #25
 8005af4:	e7f5      	b.n	8005ae2 <_printf_i+0x222>
 8005af6:	bf00      	nop
 8005af8:	08008786 	.word	0x08008786
 8005afc:	08008797 	.word	0x08008797

08005b00 <std>:
 8005b00:	2300      	movs	r3, #0
 8005b02:	b510      	push	{r4, lr}
 8005b04:	4604      	mov	r4, r0
 8005b06:	e9c0 3300 	strd	r3, r3, [r0]
 8005b0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b0e:	6083      	str	r3, [r0, #8]
 8005b10:	8181      	strh	r1, [r0, #12]
 8005b12:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b14:	81c2      	strh	r2, [r0, #14]
 8005b16:	6183      	str	r3, [r0, #24]
 8005b18:	4619      	mov	r1, r3
 8005b1a:	2208      	movs	r2, #8
 8005b1c:	305c      	adds	r0, #92	@ 0x5c
 8005b1e:	f000 fa21 	bl	8005f64 <memset>
 8005b22:	4b0d      	ldr	r3, [pc, #52]	@ (8005b58 <std+0x58>)
 8005b24:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b26:	4b0d      	ldr	r3, [pc, #52]	@ (8005b5c <std+0x5c>)
 8005b28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b60 <std+0x60>)
 8005b2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b64 <std+0x64>)
 8005b30:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b32:	4b0d      	ldr	r3, [pc, #52]	@ (8005b68 <std+0x68>)
 8005b34:	6224      	str	r4, [r4, #32]
 8005b36:	429c      	cmp	r4, r3
 8005b38:	d006      	beq.n	8005b48 <std+0x48>
 8005b3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b3e:	4294      	cmp	r4, r2
 8005b40:	d002      	beq.n	8005b48 <std+0x48>
 8005b42:	33d0      	adds	r3, #208	@ 0xd0
 8005b44:	429c      	cmp	r4, r3
 8005b46:	d105      	bne.n	8005b54 <std+0x54>
 8005b48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b50:	f000 bb16 	b.w	8006180 <__retarget_lock_init_recursive>
 8005b54:	bd10      	pop	{r4, pc}
 8005b56:	bf00      	nop
 8005b58:	08005db5 	.word	0x08005db5
 8005b5c:	08005dd7 	.word	0x08005dd7
 8005b60:	08005e0f 	.word	0x08005e0f
 8005b64:	08005e33 	.word	0x08005e33
 8005b68:	20000c00 	.word	0x20000c00

08005b6c <stdio_exit_handler>:
 8005b6c:	4a02      	ldr	r2, [pc, #8]	@ (8005b78 <stdio_exit_handler+0xc>)
 8005b6e:	4903      	ldr	r1, [pc, #12]	@ (8005b7c <stdio_exit_handler+0x10>)
 8005b70:	4803      	ldr	r0, [pc, #12]	@ (8005b80 <stdio_exit_handler+0x14>)
 8005b72:	f000 b869 	b.w	8005c48 <_fwalk_sglue>
 8005b76:	bf00      	nop
 8005b78:	2000000c 	.word	0x2000000c
 8005b7c:	08007dc9 	.word	0x08007dc9
 8005b80:	2000001c 	.word	0x2000001c

08005b84 <cleanup_stdio>:
 8005b84:	6841      	ldr	r1, [r0, #4]
 8005b86:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb8 <cleanup_stdio+0x34>)
 8005b88:	4299      	cmp	r1, r3
 8005b8a:	b510      	push	{r4, lr}
 8005b8c:	4604      	mov	r4, r0
 8005b8e:	d001      	beq.n	8005b94 <cleanup_stdio+0x10>
 8005b90:	f002 f91a 	bl	8007dc8 <_fflush_r>
 8005b94:	68a1      	ldr	r1, [r4, #8]
 8005b96:	4b09      	ldr	r3, [pc, #36]	@ (8005bbc <cleanup_stdio+0x38>)
 8005b98:	4299      	cmp	r1, r3
 8005b9a:	d002      	beq.n	8005ba2 <cleanup_stdio+0x1e>
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	f002 f913 	bl	8007dc8 <_fflush_r>
 8005ba2:	68e1      	ldr	r1, [r4, #12]
 8005ba4:	4b06      	ldr	r3, [pc, #24]	@ (8005bc0 <cleanup_stdio+0x3c>)
 8005ba6:	4299      	cmp	r1, r3
 8005ba8:	d004      	beq.n	8005bb4 <cleanup_stdio+0x30>
 8005baa:	4620      	mov	r0, r4
 8005bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bb0:	f002 b90a 	b.w	8007dc8 <_fflush_r>
 8005bb4:	bd10      	pop	{r4, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20000c00 	.word	0x20000c00
 8005bbc:	20000c68 	.word	0x20000c68
 8005bc0:	20000cd0 	.word	0x20000cd0

08005bc4 <global_stdio_init.part.0>:
 8005bc4:	b510      	push	{r4, lr}
 8005bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf4 <global_stdio_init.part.0+0x30>)
 8005bc8:	4c0b      	ldr	r4, [pc, #44]	@ (8005bf8 <global_stdio_init.part.0+0x34>)
 8005bca:	4a0c      	ldr	r2, [pc, #48]	@ (8005bfc <global_stdio_init.part.0+0x38>)
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	4620      	mov	r0, r4
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2104      	movs	r1, #4
 8005bd4:	f7ff ff94 	bl	8005b00 <std>
 8005bd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005bdc:	2201      	movs	r2, #1
 8005bde:	2109      	movs	r1, #9
 8005be0:	f7ff ff8e 	bl	8005b00 <std>
 8005be4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005be8:	2202      	movs	r2, #2
 8005bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bee:	2112      	movs	r1, #18
 8005bf0:	f7ff bf86 	b.w	8005b00 <std>
 8005bf4:	20000d38 	.word	0x20000d38
 8005bf8:	20000c00 	.word	0x20000c00
 8005bfc:	08005b6d 	.word	0x08005b6d

08005c00 <__sfp_lock_acquire>:
 8005c00:	4801      	ldr	r0, [pc, #4]	@ (8005c08 <__sfp_lock_acquire+0x8>)
 8005c02:	f000 babe 	b.w	8006182 <__retarget_lock_acquire_recursive>
 8005c06:	bf00      	nop
 8005c08:	20000d41 	.word	0x20000d41

08005c0c <__sfp_lock_release>:
 8005c0c:	4801      	ldr	r0, [pc, #4]	@ (8005c14 <__sfp_lock_release+0x8>)
 8005c0e:	f000 bab9 	b.w	8006184 <__retarget_lock_release_recursive>
 8005c12:	bf00      	nop
 8005c14:	20000d41 	.word	0x20000d41

08005c18 <__sinit>:
 8005c18:	b510      	push	{r4, lr}
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	f7ff fff0 	bl	8005c00 <__sfp_lock_acquire>
 8005c20:	6a23      	ldr	r3, [r4, #32]
 8005c22:	b11b      	cbz	r3, 8005c2c <__sinit+0x14>
 8005c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c28:	f7ff bff0 	b.w	8005c0c <__sfp_lock_release>
 8005c2c:	4b04      	ldr	r3, [pc, #16]	@ (8005c40 <__sinit+0x28>)
 8005c2e:	6223      	str	r3, [r4, #32]
 8005c30:	4b04      	ldr	r3, [pc, #16]	@ (8005c44 <__sinit+0x2c>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1f5      	bne.n	8005c24 <__sinit+0xc>
 8005c38:	f7ff ffc4 	bl	8005bc4 <global_stdio_init.part.0>
 8005c3c:	e7f2      	b.n	8005c24 <__sinit+0xc>
 8005c3e:	bf00      	nop
 8005c40:	08005b85 	.word	0x08005b85
 8005c44:	20000d38 	.word	0x20000d38

08005c48 <_fwalk_sglue>:
 8005c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c4c:	4607      	mov	r7, r0
 8005c4e:	4688      	mov	r8, r1
 8005c50:	4614      	mov	r4, r2
 8005c52:	2600      	movs	r6, #0
 8005c54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c58:	f1b9 0901 	subs.w	r9, r9, #1
 8005c5c:	d505      	bpl.n	8005c6a <_fwalk_sglue+0x22>
 8005c5e:	6824      	ldr	r4, [r4, #0]
 8005c60:	2c00      	cmp	r4, #0
 8005c62:	d1f7      	bne.n	8005c54 <_fwalk_sglue+0xc>
 8005c64:	4630      	mov	r0, r6
 8005c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c6a:	89ab      	ldrh	r3, [r5, #12]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d907      	bls.n	8005c80 <_fwalk_sglue+0x38>
 8005c70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c74:	3301      	adds	r3, #1
 8005c76:	d003      	beq.n	8005c80 <_fwalk_sglue+0x38>
 8005c78:	4629      	mov	r1, r5
 8005c7a:	4638      	mov	r0, r7
 8005c7c:	47c0      	blx	r8
 8005c7e:	4306      	orrs	r6, r0
 8005c80:	3568      	adds	r5, #104	@ 0x68
 8005c82:	e7e9      	b.n	8005c58 <_fwalk_sglue+0x10>

08005c84 <iprintf>:
 8005c84:	b40f      	push	{r0, r1, r2, r3}
 8005c86:	b507      	push	{r0, r1, r2, lr}
 8005c88:	4906      	ldr	r1, [pc, #24]	@ (8005ca4 <iprintf+0x20>)
 8005c8a:	ab04      	add	r3, sp, #16
 8005c8c:	6808      	ldr	r0, [r1, #0]
 8005c8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c92:	6881      	ldr	r1, [r0, #8]
 8005c94:	9301      	str	r3, [sp, #4]
 8005c96:	f001 fefb 	bl	8007a90 <_vfiprintf_r>
 8005c9a:	b003      	add	sp, #12
 8005c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ca0:	b004      	add	sp, #16
 8005ca2:	4770      	bx	lr
 8005ca4:	20000018 	.word	0x20000018

08005ca8 <putchar>:
 8005ca8:	4b02      	ldr	r3, [pc, #8]	@ (8005cb4 <putchar+0xc>)
 8005caa:	4601      	mov	r1, r0
 8005cac:	6818      	ldr	r0, [r3, #0]
 8005cae:	6882      	ldr	r2, [r0, #8]
 8005cb0:	f002 b926 	b.w	8007f00 <_putc_r>
 8005cb4:	20000018 	.word	0x20000018

08005cb8 <_puts_r>:
 8005cb8:	6a03      	ldr	r3, [r0, #32]
 8005cba:	b570      	push	{r4, r5, r6, lr}
 8005cbc:	6884      	ldr	r4, [r0, #8]
 8005cbe:	4605      	mov	r5, r0
 8005cc0:	460e      	mov	r6, r1
 8005cc2:	b90b      	cbnz	r3, 8005cc8 <_puts_r+0x10>
 8005cc4:	f7ff ffa8 	bl	8005c18 <__sinit>
 8005cc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cca:	07db      	lsls	r3, r3, #31
 8005ccc:	d405      	bmi.n	8005cda <_puts_r+0x22>
 8005cce:	89a3      	ldrh	r3, [r4, #12]
 8005cd0:	0598      	lsls	r0, r3, #22
 8005cd2:	d402      	bmi.n	8005cda <_puts_r+0x22>
 8005cd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cd6:	f000 fa54 	bl	8006182 <__retarget_lock_acquire_recursive>
 8005cda:	89a3      	ldrh	r3, [r4, #12]
 8005cdc:	0719      	lsls	r1, r3, #28
 8005cde:	d502      	bpl.n	8005ce6 <_puts_r+0x2e>
 8005ce0:	6923      	ldr	r3, [r4, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d135      	bne.n	8005d52 <_puts_r+0x9a>
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	4628      	mov	r0, r5
 8005cea:	f000 f8e5 	bl	8005eb8 <__swsetup_r>
 8005cee:	b380      	cbz	r0, 8005d52 <_puts_r+0x9a>
 8005cf0:	f04f 35ff 	mov.w	r5, #4294967295
 8005cf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cf6:	07da      	lsls	r2, r3, #31
 8005cf8:	d405      	bmi.n	8005d06 <_puts_r+0x4e>
 8005cfa:	89a3      	ldrh	r3, [r4, #12]
 8005cfc:	059b      	lsls	r3, r3, #22
 8005cfe:	d402      	bmi.n	8005d06 <_puts_r+0x4e>
 8005d00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d02:	f000 fa3f 	bl	8006184 <__retarget_lock_release_recursive>
 8005d06:	4628      	mov	r0, r5
 8005d08:	bd70      	pop	{r4, r5, r6, pc}
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	da04      	bge.n	8005d18 <_puts_r+0x60>
 8005d0e:	69a2      	ldr	r2, [r4, #24]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	dc17      	bgt.n	8005d44 <_puts_r+0x8c>
 8005d14:	290a      	cmp	r1, #10
 8005d16:	d015      	beq.n	8005d44 <_puts_r+0x8c>
 8005d18:	6823      	ldr	r3, [r4, #0]
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	6022      	str	r2, [r4, #0]
 8005d1e:	7019      	strb	r1, [r3, #0]
 8005d20:	68a3      	ldr	r3, [r4, #8]
 8005d22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d26:	3b01      	subs	r3, #1
 8005d28:	60a3      	str	r3, [r4, #8]
 8005d2a:	2900      	cmp	r1, #0
 8005d2c:	d1ed      	bne.n	8005d0a <_puts_r+0x52>
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	da11      	bge.n	8005d56 <_puts_r+0x9e>
 8005d32:	4622      	mov	r2, r4
 8005d34:	210a      	movs	r1, #10
 8005d36:	4628      	mov	r0, r5
 8005d38:	f000 f87f 	bl	8005e3a <__swbuf_r>
 8005d3c:	3001      	adds	r0, #1
 8005d3e:	d0d7      	beq.n	8005cf0 <_puts_r+0x38>
 8005d40:	250a      	movs	r5, #10
 8005d42:	e7d7      	b.n	8005cf4 <_puts_r+0x3c>
 8005d44:	4622      	mov	r2, r4
 8005d46:	4628      	mov	r0, r5
 8005d48:	f000 f877 	bl	8005e3a <__swbuf_r>
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	d1e7      	bne.n	8005d20 <_puts_r+0x68>
 8005d50:	e7ce      	b.n	8005cf0 <_puts_r+0x38>
 8005d52:	3e01      	subs	r6, #1
 8005d54:	e7e4      	b.n	8005d20 <_puts_r+0x68>
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	6022      	str	r2, [r4, #0]
 8005d5c:	220a      	movs	r2, #10
 8005d5e:	701a      	strb	r2, [r3, #0]
 8005d60:	e7ee      	b.n	8005d40 <_puts_r+0x88>
	...

08005d64 <puts>:
 8005d64:	4b02      	ldr	r3, [pc, #8]	@ (8005d70 <puts+0xc>)
 8005d66:	4601      	mov	r1, r0
 8005d68:	6818      	ldr	r0, [r3, #0]
 8005d6a:	f7ff bfa5 	b.w	8005cb8 <_puts_r>
 8005d6e:	bf00      	nop
 8005d70:	20000018 	.word	0x20000018

08005d74 <siprintf>:
 8005d74:	b40e      	push	{r1, r2, r3}
 8005d76:	b500      	push	{lr}
 8005d78:	b09c      	sub	sp, #112	@ 0x70
 8005d7a:	ab1d      	add	r3, sp, #116	@ 0x74
 8005d7c:	9002      	str	r0, [sp, #8]
 8005d7e:	9006      	str	r0, [sp, #24]
 8005d80:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d84:	4809      	ldr	r0, [pc, #36]	@ (8005dac <siprintf+0x38>)
 8005d86:	9107      	str	r1, [sp, #28]
 8005d88:	9104      	str	r1, [sp, #16]
 8005d8a:	4909      	ldr	r1, [pc, #36]	@ (8005db0 <siprintf+0x3c>)
 8005d8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d90:	9105      	str	r1, [sp, #20]
 8005d92:	6800      	ldr	r0, [r0, #0]
 8005d94:	9301      	str	r3, [sp, #4]
 8005d96:	a902      	add	r1, sp, #8
 8005d98:	f001 fd54 	bl	8007844 <_svfiprintf_r>
 8005d9c:	9b02      	ldr	r3, [sp, #8]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	701a      	strb	r2, [r3, #0]
 8005da2:	b01c      	add	sp, #112	@ 0x70
 8005da4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005da8:	b003      	add	sp, #12
 8005daa:	4770      	bx	lr
 8005dac:	20000018 	.word	0x20000018
 8005db0:	ffff0208 	.word	0xffff0208

08005db4 <__sread>:
 8005db4:	b510      	push	{r4, lr}
 8005db6:	460c      	mov	r4, r1
 8005db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dbc:	f000 f992 	bl	80060e4 <_read_r>
 8005dc0:	2800      	cmp	r0, #0
 8005dc2:	bfab      	itete	ge
 8005dc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005dc6:	89a3      	ldrhlt	r3, [r4, #12]
 8005dc8:	181b      	addge	r3, r3, r0
 8005dca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005dce:	bfac      	ite	ge
 8005dd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005dd2:	81a3      	strhlt	r3, [r4, #12]
 8005dd4:	bd10      	pop	{r4, pc}

08005dd6 <__swrite>:
 8005dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dda:	461f      	mov	r7, r3
 8005ddc:	898b      	ldrh	r3, [r1, #12]
 8005dde:	05db      	lsls	r3, r3, #23
 8005de0:	4605      	mov	r5, r0
 8005de2:	460c      	mov	r4, r1
 8005de4:	4616      	mov	r6, r2
 8005de6:	d505      	bpl.n	8005df4 <__swrite+0x1e>
 8005de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dec:	2302      	movs	r3, #2
 8005dee:	2200      	movs	r2, #0
 8005df0:	f000 f966 	bl	80060c0 <_lseek_r>
 8005df4:	89a3      	ldrh	r3, [r4, #12]
 8005df6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005dfe:	81a3      	strh	r3, [r4, #12]
 8005e00:	4632      	mov	r2, r6
 8005e02:	463b      	mov	r3, r7
 8005e04:	4628      	mov	r0, r5
 8005e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0a:	f000 b97d 	b.w	8006108 <_write_r>

08005e0e <__sseek>:
 8005e0e:	b510      	push	{r4, lr}
 8005e10:	460c      	mov	r4, r1
 8005e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e16:	f000 f953 	bl	80060c0 <_lseek_r>
 8005e1a:	1c43      	adds	r3, r0, #1
 8005e1c:	89a3      	ldrh	r3, [r4, #12]
 8005e1e:	bf15      	itete	ne
 8005e20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e2a:	81a3      	strheq	r3, [r4, #12]
 8005e2c:	bf18      	it	ne
 8005e2e:	81a3      	strhne	r3, [r4, #12]
 8005e30:	bd10      	pop	{r4, pc}

08005e32 <__sclose>:
 8005e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e36:	f000 b933 	b.w	80060a0 <_close_r>

08005e3a <__swbuf_r>:
 8005e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3c:	460e      	mov	r6, r1
 8005e3e:	4614      	mov	r4, r2
 8005e40:	4605      	mov	r5, r0
 8005e42:	b118      	cbz	r0, 8005e4c <__swbuf_r+0x12>
 8005e44:	6a03      	ldr	r3, [r0, #32]
 8005e46:	b90b      	cbnz	r3, 8005e4c <__swbuf_r+0x12>
 8005e48:	f7ff fee6 	bl	8005c18 <__sinit>
 8005e4c:	69a3      	ldr	r3, [r4, #24]
 8005e4e:	60a3      	str	r3, [r4, #8]
 8005e50:	89a3      	ldrh	r3, [r4, #12]
 8005e52:	071a      	lsls	r2, r3, #28
 8005e54:	d501      	bpl.n	8005e5a <__swbuf_r+0x20>
 8005e56:	6923      	ldr	r3, [r4, #16]
 8005e58:	b943      	cbnz	r3, 8005e6c <__swbuf_r+0x32>
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	f000 f82b 	bl	8005eb8 <__swsetup_r>
 8005e62:	b118      	cbz	r0, 8005e6c <__swbuf_r+0x32>
 8005e64:	f04f 37ff 	mov.w	r7, #4294967295
 8005e68:	4638      	mov	r0, r7
 8005e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e6c:	6823      	ldr	r3, [r4, #0]
 8005e6e:	6922      	ldr	r2, [r4, #16]
 8005e70:	1a98      	subs	r0, r3, r2
 8005e72:	6963      	ldr	r3, [r4, #20]
 8005e74:	b2f6      	uxtb	r6, r6
 8005e76:	4283      	cmp	r3, r0
 8005e78:	4637      	mov	r7, r6
 8005e7a:	dc05      	bgt.n	8005e88 <__swbuf_r+0x4e>
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	4628      	mov	r0, r5
 8005e80:	f001 ffa2 	bl	8007dc8 <_fflush_r>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	d1ed      	bne.n	8005e64 <__swbuf_r+0x2a>
 8005e88:	68a3      	ldr	r3, [r4, #8]
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	60a3      	str	r3, [r4, #8]
 8005e8e:	6823      	ldr	r3, [r4, #0]
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	6022      	str	r2, [r4, #0]
 8005e94:	701e      	strb	r6, [r3, #0]
 8005e96:	6962      	ldr	r2, [r4, #20]
 8005e98:	1c43      	adds	r3, r0, #1
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d004      	beq.n	8005ea8 <__swbuf_r+0x6e>
 8005e9e:	89a3      	ldrh	r3, [r4, #12]
 8005ea0:	07db      	lsls	r3, r3, #31
 8005ea2:	d5e1      	bpl.n	8005e68 <__swbuf_r+0x2e>
 8005ea4:	2e0a      	cmp	r6, #10
 8005ea6:	d1df      	bne.n	8005e68 <__swbuf_r+0x2e>
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	4628      	mov	r0, r5
 8005eac:	f001 ff8c 	bl	8007dc8 <_fflush_r>
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	d0d9      	beq.n	8005e68 <__swbuf_r+0x2e>
 8005eb4:	e7d6      	b.n	8005e64 <__swbuf_r+0x2a>
	...

08005eb8 <__swsetup_r>:
 8005eb8:	b538      	push	{r3, r4, r5, lr}
 8005eba:	4b29      	ldr	r3, [pc, #164]	@ (8005f60 <__swsetup_r+0xa8>)
 8005ebc:	4605      	mov	r5, r0
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	460c      	mov	r4, r1
 8005ec2:	b118      	cbz	r0, 8005ecc <__swsetup_r+0x14>
 8005ec4:	6a03      	ldr	r3, [r0, #32]
 8005ec6:	b90b      	cbnz	r3, 8005ecc <__swsetup_r+0x14>
 8005ec8:	f7ff fea6 	bl	8005c18 <__sinit>
 8005ecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ed0:	0719      	lsls	r1, r3, #28
 8005ed2:	d422      	bmi.n	8005f1a <__swsetup_r+0x62>
 8005ed4:	06da      	lsls	r2, r3, #27
 8005ed6:	d407      	bmi.n	8005ee8 <__swsetup_r+0x30>
 8005ed8:	2209      	movs	r2, #9
 8005eda:	602a      	str	r2, [r5, #0]
 8005edc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ee0:	81a3      	strh	r3, [r4, #12]
 8005ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee6:	e033      	b.n	8005f50 <__swsetup_r+0x98>
 8005ee8:	0758      	lsls	r0, r3, #29
 8005eea:	d512      	bpl.n	8005f12 <__swsetup_r+0x5a>
 8005eec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005eee:	b141      	cbz	r1, 8005f02 <__swsetup_r+0x4a>
 8005ef0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ef4:	4299      	cmp	r1, r3
 8005ef6:	d002      	beq.n	8005efe <__swsetup_r+0x46>
 8005ef8:	4628      	mov	r0, r5
 8005efa:	f000 ffc5 	bl	8006e88 <_free_r>
 8005efe:	2300      	movs	r3, #0
 8005f00:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f02:	89a3      	ldrh	r3, [r4, #12]
 8005f04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f08:	81a3      	strh	r3, [r4, #12]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	6063      	str	r3, [r4, #4]
 8005f0e:	6923      	ldr	r3, [r4, #16]
 8005f10:	6023      	str	r3, [r4, #0]
 8005f12:	89a3      	ldrh	r3, [r4, #12]
 8005f14:	f043 0308 	orr.w	r3, r3, #8
 8005f18:	81a3      	strh	r3, [r4, #12]
 8005f1a:	6923      	ldr	r3, [r4, #16]
 8005f1c:	b94b      	cbnz	r3, 8005f32 <__swsetup_r+0x7a>
 8005f1e:	89a3      	ldrh	r3, [r4, #12]
 8005f20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f28:	d003      	beq.n	8005f32 <__swsetup_r+0x7a>
 8005f2a:	4621      	mov	r1, r4
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	f001 ffab 	bl	8007e88 <__smakebuf_r>
 8005f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f36:	f013 0201 	ands.w	r2, r3, #1
 8005f3a:	d00a      	beq.n	8005f52 <__swsetup_r+0x9a>
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	60a2      	str	r2, [r4, #8]
 8005f40:	6962      	ldr	r2, [r4, #20]
 8005f42:	4252      	negs	r2, r2
 8005f44:	61a2      	str	r2, [r4, #24]
 8005f46:	6922      	ldr	r2, [r4, #16]
 8005f48:	b942      	cbnz	r2, 8005f5c <__swsetup_r+0xa4>
 8005f4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005f4e:	d1c5      	bne.n	8005edc <__swsetup_r+0x24>
 8005f50:	bd38      	pop	{r3, r4, r5, pc}
 8005f52:	0799      	lsls	r1, r3, #30
 8005f54:	bf58      	it	pl
 8005f56:	6962      	ldrpl	r2, [r4, #20]
 8005f58:	60a2      	str	r2, [r4, #8]
 8005f5a:	e7f4      	b.n	8005f46 <__swsetup_r+0x8e>
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	e7f7      	b.n	8005f50 <__swsetup_r+0x98>
 8005f60:	20000018 	.word	0x20000018

08005f64 <memset>:
 8005f64:	4402      	add	r2, r0
 8005f66:	4603      	mov	r3, r0
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d100      	bne.n	8005f6e <memset+0xa>
 8005f6c:	4770      	bx	lr
 8005f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f72:	e7f9      	b.n	8005f68 <memset+0x4>

08005f74 <strchr>:
 8005f74:	b2c9      	uxtb	r1, r1
 8005f76:	4603      	mov	r3, r0
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f7e:	b112      	cbz	r2, 8005f86 <strchr+0x12>
 8005f80:	428a      	cmp	r2, r1
 8005f82:	d1f9      	bne.n	8005f78 <strchr+0x4>
 8005f84:	4770      	bx	lr
 8005f86:	2900      	cmp	r1, #0
 8005f88:	bf18      	it	ne
 8005f8a:	2000      	movne	r0, #0
 8005f8c:	4770      	bx	lr

08005f8e <strncmp>:
 8005f8e:	b510      	push	{r4, lr}
 8005f90:	b16a      	cbz	r2, 8005fae <strncmp+0x20>
 8005f92:	3901      	subs	r1, #1
 8005f94:	1884      	adds	r4, r0, r2
 8005f96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f9a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d103      	bne.n	8005faa <strncmp+0x1c>
 8005fa2:	42a0      	cmp	r0, r4
 8005fa4:	d001      	beq.n	8005faa <strncmp+0x1c>
 8005fa6:	2a00      	cmp	r2, #0
 8005fa8:	d1f5      	bne.n	8005f96 <strncmp+0x8>
 8005faa:	1ad0      	subs	r0, r2, r3
 8005fac:	bd10      	pop	{r4, pc}
 8005fae:	4610      	mov	r0, r2
 8005fb0:	e7fc      	b.n	8005fac <strncmp+0x1e>
	...

08005fb4 <strtok>:
 8005fb4:	4b16      	ldr	r3, [pc, #88]	@ (8006010 <strtok+0x5c>)
 8005fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fba:	681f      	ldr	r7, [r3, #0]
 8005fbc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8005fbe:	4605      	mov	r5, r0
 8005fc0:	460e      	mov	r6, r1
 8005fc2:	b9ec      	cbnz	r4, 8006000 <strtok+0x4c>
 8005fc4:	2050      	movs	r0, #80	@ 0x50
 8005fc6:	f000 ffa9 	bl	8006f1c <malloc>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	6478      	str	r0, [r7, #68]	@ 0x44
 8005fce:	b920      	cbnz	r0, 8005fda <strtok+0x26>
 8005fd0:	4b10      	ldr	r3, [pc, #64]	@ (8006014 <strtok+0x60>)
 8005fd2:	4811      	ldr	r0, [pc, #68]	@ (8006018 <strtok+0x64>)
 8005fd4:	215b      	movs	r1, #91	@ 0x5b
 8005fd6:	f000 f8ed 	bl	80061b4 <__assert_func>
 8005fda:	e9c0 4400 	strd	r4, r4, [r0]
 8005fde:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005fe2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005fe6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8005fea:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8005fee:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8005ff2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8005ff6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8005ffa:	6184      	str	r4, [r0, #24]
 8005ffc:	7704      	strb	r4, [r0, #28]
 8005ffe:	6244      	str	r4, [r0, #36]	@ 0x24
 8006000:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006002:	4631      	mov	r1, r6
 8006004:	4628      	mov	r0, r5
 8006006:	2301      	movs	r3, #1
 8006008:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800600c:	f000 b806 	b.w	800601c <__strtok_r>
 8006010:	20000018 	.word	0x20000018
 8006014:	080087a8 	.word	0x080087a8
 8006018:	080087bf 	.word	0x080087bf

0800601c <__strtok_r>:
 800601c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800601e:	4604      	mov	r4, r0
 8006020:	b908      	cbnz	r0, 8006026 <__strtok_r+0xa>
 8006022:	6814      	ldr	r4, [r2, #0]
 8006024:	b144      	cbz	r4, 8006038 <__strtok_r+0x1c>
 8006026:	4620      	mov	r0, r4
 8006028:	f814 5b01 	ldrb.w	r5, [r4], #1
 800602c:	460f      	mov	r7, r1
 800602e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006032:	b91e      	cbnz	r6, 800603c <__strtok_r+0x20>
 8006034:	b965      	cbnz	r5, 8006050 <__strtok_r+0x34>
 8006036:	6015      	str	r5, [r2, #0]
 8006038:	2000      	movs	r0, #0
 800603a:	e005      	b.n	8006048 <__strtok_r+0x2c>
 800603c:	42b5      	cmp	r5, r6
 800603e:	d1f6      	bne.n	800602e <__strtok_r+0x12>
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1f0      	bne.n	8006026 <__strtok_r+0xa>
 8006044:	6014      	str	r4, [r2, #0]
 8006046:	7003      	strb	r3, [r0, #0]
 8006048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800604a:	461c      	mov	r4, r3
 800604c:	e00c      	b.n	8006068 <__strtok_r+0x4c>
 800604e:	b915      	cbnz	r5, 8006056 <__strtok_r+0x3a>
 8006050:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006054:	460e      	mov	r6, r1
 8006056:	f816 5b01 	ldrb.w	r5, [r6], #1
 800605a:	42ab      	cmp	r3, r5
 800605c:	d1f7      	bne.n	800604e <__strtok_r+0x32>
 800605e:	2b00      	cmp	r3, #0
 8006060:	d0f3      	beq.n	800604a <__strtok_r+0x2e>
 8006062:	2300      	movs	r3, #0
 8006064:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006068:	6014      	str	r4, [r2, #0]
 800606a:	e7ed      	b.n	8006048 <__strtok_r+0x2c>

0800606c <strstr>:
 800606c:	780a      	ldrb	r2, [r1, #0]
 800606e:	b570      	push	{r4, r5, r6, lr}
 8006070:	b96a      	cbnz	r2, 800608e <strstr+0x22>
 8006072:	bd70      	pop	{r4, r5, r6, pc}
 8006074:	429a      	cmp	r2, r3
 8006076:	d109      	bne.n	800608c <strstr+0x20>
 8006078:	460c      	mov	r4, r1
 800607a:	4605      	mov	r5, r0
 800607c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006080:	2b00      	cmp	r3, #0
 8006082:	d0f6      	beq.n	8006072 <strstr+0x6>
 8006084:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006088:	429e      	cmp	r6, r3
 800608a:	d0f7      	beq.n	800607c <strstr+0x10>
 800608c:	3001      	adds	r0, #1
 800608e:	7803      	ldrb	r3, [r0, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1ef      	bne.n	8006074 <strstr+0x8>
 8006094:	4618      	mov	r0, r3
 8006096:	e7ec      	b.n	8006072 <strstr+0x6>

08006098 <_localeconv_r>:
 8006098:	4800      	ldr	r0, [pc, #0]	@ (800609c <_localeconv_r+0x4>)
 800609a:	4770      	bx	lr
 800609c:	20000158 	.word	0x20000158

080060a0 <_close_r>:
 80060a0:	b538      	push	{r3, r4, r5, lr}
 80060a2:	4d06      	ldr	r5, [pc, #24]	@ (80060bc <_close_r+0x1c>)
 80060a4:	2300      	movs	r3, #0
 80060a6:	4604      	mov	r4, r0
 80060a8:	4608      	mov	r0, r1
 80060aa:	602b      	str	r3, [r5, #0]
 80060ac:	f7fc f8a2 	bl	80021f4 <_close>
 80060b0:	1c43      	adds	r3, r0, #1
 80060b2:	d102      	bne.n	80060ba <_close_r+0x1a>
 80060b4:	682b      	ldr	r3, [r5, #0]
 80060b6:	b103      	cbz	r3, 80060ba <_close_r+0x1a>
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	bd38      	pop	{r3, r4, r5, pc}
 80060bc:	20000d3c 	.word	0x20000d3c

080060c0 <_lseek_r>:
 80060c0:	b538      	push	{r3, r4, r5, lr}
 80060c2:	4d07      	ldr	r5, [pc, #28]	@ (80060e0 <_lseek_r+0x20>)
 80060c4:	4604      	mov	r4, r0
 80060c6:	4608      	mov	r0, r1
 80060c8:	4611      	mov	r1, r2
 80060ca:	2200      	movs	r2, #0
 80060cc:	602a      	str	r2, [r5, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	f7fc f8b7 	bl	8002242 <_lseek>
 80060d4:	1c43      	adds	r3, r0, #1
 80060d6:	d102      	bne.n	80060de <_lseek_r+0x1e>
 80060d8:	682b      	ldr	r3, [r5, #0]
 80060da:	b103      	cbz	r3, 80060de <_lseek_r+0x1e>
 80060dc:	6023      	str	r3, [r4, #0]
 80060de:	bd38      	pop	{r3, r4, r5, pc}
 80060e0:	20000d3c 	.word	0x20000d3c

080060e4 <_read_r>:
 80060e4:	b538      	push	{r3, r4, r5, lr}
 80060e6:	4d07      	ldr	r5, [pc, #28]	@ (8006104 <_read_r+0x20>)
 80060e8:	4604      	mov	r4, r0
 80060ea:	4608      	mov	r0, r1
 80060ec:	4611      	mov	r1, r2
 80060ee:	2200      	movs	r2, #0
 80060f0:	602a      	str	r2, [r5, #0]
 80060f2:	461a      	mov	r2, r3
 80060f4:	f7fc f845 	bl	8002182 <_read>
 80060f8:	1c43      	adds	r3, r0, #1
 80060fa:	d102      	bne.n	8006102 <_read_r+0x1e>
 80060fc:	682b      	ldr	r3, [r5, #0]
 80060fe:	b103      	cbz	r3, 8006102 <_read_r+0x1e>
 8006100:	6023      	str	r3, [r4, #0]
 8006102:	bd38      	pop	{r3, r4, r5, pc}
 8006104:	20000d3c 	.word	0x20000d3c

08006108 <_write_r>:
 8006108:	b538      	push	{r3, r4, r5, lr}
 800610a:	4d07      	ldr	r5, [pc, #28]	@ (8006128 <_write_r+0x20>)
 800610c:	4604      	mov	r4, r0
 800610e:	4608      	mov	r0, r1
 8006110:	4611      	mov	r1, r2
 8006112:	2200      	movs	r2, #0
 8006114:	602a      	str	r2, [r5, #0]
 8006116:	461a      	mov	r2, r3
 8006118:	f7fc f850 	bl	80021bc <_write>
 800611c:	1c43      	adds	r3, r0, #1
 800611e:	d102      	bne.n	8006126 <_write_r+0x1e>
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	b103      	cbz	r3, 8006126 <_write_r+0x1e>
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	bd38      	pop	{r3, r4, r5, pc}
 8006128:	20000d3c 	.word	0x20000d3c

0800612c <__errno>:
 800612c:	4b01      	ldr	r3, [pc, #4]	@ (8006134 <__errno+0x8>)
 800612e:	6818      	ldr	r0, [r3, #0]
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	20000018 	.word	0x20000018

08006138 <__libc_init_array>:
 8006138:	b570      	push	{r4, r5, r6, lr}
 800613a:	4d0d      	ldr	r5, [pc, #52]	@ (8006170 <__libc_init_array+0x38>)
 800613c:	4c0d      	ldr	r4, [pc, #52]	@ (8006174 <__libc_init_array+0x3c>)
 800613e:	1b64      	subs	r4, r4, r5
 8006140:	10a4      	asrs	r4, r4, #2
 8006142:	2600      	movs	r6, #0
 8006144:	42a6      	cmp	r6, r4
 8006146:	d109      	bne.n	800615c <__libc_init_array+0x24>
 8006148:	4d0b      	ldr	r5, [pc, #44]	@ (8006178 <__libc_init_array+0x40>)
 800614a:	4c0c      	ldr	r4, [pc, #48]	@ (800617c <__libc_init_array+0x44>)
 800614c:	f002 f80c 	bl	8008168 <_init>
 8006150:	1b64      	subs	r4, r4, r5
 8006152:	10a4      	asrs	r4, r4, #2
 8006154:	2600      	movs	r6, #0
 8006156:	42a6      	cmp	r6, r4
 8006158:	d105      	bne.n	8006166 <__libc_init_array+0x2e>
 800615a:	bd70      	pop	{r4, r5, r6, pc}
 800615c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006160:	4798      	blx	r3
 8006162:	3601      	adds	r6, #1
 8006164:	e7ee      	b.n	8006144 <__libc_init_array+0xc>
 8006166:	f855 3b04 	ldr.w	r3, [r5], #4
 800616a:	4798      	blx	r3
 800616c:	3601      	adds	r6, #1
 800616e:	e7f2      	b.n	8006156 <__libc_init_array+0x1e>
 8006170:	08008b44 	.word	0x08008b44
 8006174:	08008b44 	.word	0x08008b44
 8006178:	08008b44 	.word	0x08008b44
 800617c:	08008b48 	.word	0x08008b48

08006180 <__retarget_lock_init_recursive>:
 8006180:	4770      	bx	lr

08006182 <__retarget_lock_acquire_recursive>:
 8006182:	4770      	bx	lr

08006184 <__retarget_lock_release_recursive>:
 8006184:	4770      	bx	lr

08006186 <strcpy>:
 8006186:	4603      	mov	r3, r0
 8006188:	f811 2b01 	ldrb.w	r2, [r1], #1
 800618c:	f803 2b01 	strb.w	r2, [r3], #1
 8006190:	2a00      	cmp	r2, #0
 8006192:	d1f9      	bne.n	8006188 <strcpy+0x2>
 8006194:	4770      	bx	lr

08006196 <memcpy>:
 8006196:	440a      	add	r2, r1
 8006198:	4291      	cmp	r1, r2
 800619a:	f100 33ff 	add.w	r3, r0, #4294967295
 800619e:	d100      	bne.n	80061a2 <memcpy+0xc>
 80061a0:	4770      	bx	lr
 80061a2:	b510      	push	{r4, lr}
 80061a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061ac:	4291      	cmp	r1, r2
 80061ae:	d1f9      	bne.n	80061a4 <memcpy+0xe>
 80061b0:	bd10      	pop	{r4, pc}
	...

080061b4 <__assert_func>:
 80061b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061b6:	4614      	mov	r4, r2
 80061b8:	461a      	mov	r2, r3
 80061ba:	4b09      	ldr	r3, [pc, #36]	@ (80061e0 <__assert_func+0x2c>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4605      	mov	r5, r0
 80061c0:	68d8      	ldr	r0, [r3, #12]
 80061c2:	b954      	cbnz	r4, 80061da <__assert_func+0x26>
 80061c4:	4b07      	ldr	r3, [pc, #28]	@ (80061e4 <__assert_func+0x30>)
 80061c6:	461c      	mov	r4, r3
 80061c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80061cc:	9100      	str	r1, [sp, #0]
 80061ce:	462b      	mov	r3, r5
 80061d0:	4905      	ldr	r1, [pc, #20]	@ (80061e8 <__assert_func+0x34>)
 80061d2:	f001 fe21 	bl	8007e18 <fiprintf>
 80061d6:	f001 ff13 	bl	8008000 <abort>
 80061da:	4b04      	ldr	r3, [pc, #16]	@ (80061ec <__assert_func+0x38>)
 80061dc:	e7f4      	b.n	80061c8 <__assert_func+0x14>
 80061de:	bf00      	nop
 80061e0:	20000018 	.word	0x20000018
 80061e4:	08008854 	.word	0x08008854
 80061e8:	08008826 	.word	0x08008826
 80061ec:	08008819 	.word	0x08008819

080061f0 <quorem>:
 80061f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f4:	6903      	ldr	r3, [r0, #16]
 80061f6:	690c      	ldr	r4, [r1, #16]
 80061f8:	42a3      	cmp	r3, r4
 80061fa:	4607      	mov	r7, r0
 80061fc:	db7e      	blt.n	80062fc <quorem+0x10c>
 80061fe:	3c01      	subs	r4, #1
 8006200:	f101 0814 	add.w	r8, r1, #20
 8006204:	00a3      	lsls	r3, r4, #2
 8006206:	f100 0514 	add.w	r5, r0, #20
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006210:	9301      	str	r3, [sp, #4]
 8006212:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006216:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800621a:	3301      	adds	r3, #1
 800621c:	429a      	cmp	r2, r3
 800621e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006222:	fbb2 f6f3 	udiv	r6, r2, r3
 8006226:	d32e      	bcc.n	8006286 <quorem+0x96>
 8006228:	f04f 0a00 	mov.w	sl, #0
 800622c:	46c4      	mov	ip, r8
 800622e:	46ae      	mov	lr, r5
 8006230:	46d3      	mov	fp, sl
 8006232:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006236:	b298      	uxth	r0, r3
 8006238:	fb06 a000 	mla	r0, r6, r0, sl
 800623c:	0c02      	lsrs	r2, r0, #16
 800623e:	0c1b      	lsrs	r3, r3, #16
 8006240:	fb06 2303 	mla	r3, r6, r3, r2
 8006244:	f8de 2000 	ldr.w	r2, [lr]
 8006248:	b280      	uxth	r0, r0
 800624a:	b292      	uxth	r2, r2
 800624c:	1a12      	subs	r2, r2, r0
 800624e:	445a      	add	r2, fp
 8006250:	f8de 0000 	ldr.w	r0, [lr]
 8006254:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006258:	b29b      	uxth	r3, r3
 800625a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800625e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006262:	b292      	uxth	r2, r2
 8006264:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006268:	45e1      	cmp	r9, ip
 800626a:	f84e 2b04 	str.w	r2, [lr], #4
 800626e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006272:	d2de      	bcs.n	8006232 <quorem+0x42>
 8006274:	9b00      	ldr	r3, [sp, #0]
 8006276:	58eb      	ldr	r3, [r5, r3]
 8006278:	b92b      	cbnz	r3, 8006286 <quorem+0x96>
 800627a:	9b01      	ldr	r3, [sp, #4]
 800627c:	3b04      	subs	r3, #4
 800627e:	429d      	cmp	r5, r3
 8006280:	461a      	mov	r2, r3
 8006282:	d32f      	bcc.n	80062e4 <quorem+0xf4>
 8006284:	613c      	str	r4, [r7, #16]
 8006286:	4638      	mov	r0, r7
 8006288:	f001 f978 	bl	800757c <__mcmp>
 800628c:	2800      	cmp	r0, #0
 800628e:	db25      	blt.n	80062dc <quorem+0xec>
 8006290:	4629      	mov	r1, r5
 8006292:	2000      	movs	r0, #0
 8006294:	f858 2b04 	ldr.w	r2, [r8], #4
 8006298:	f8d1 c000 	ldr.w	ip, [r1]
 800629c:	fa1f fe82 	uxth.w	lr, r2
 80062a0:	fa1f f38c 	uxth.w	r3, ip
 80062a4:	eba3 030e 	sub.w	r3, r3, lr
 80062a8:	4403      	add	r3, r0
 80062aa:	0c12      	lsrs	r2, r2, #16
 80062ac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80062b0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062ba:	45c1      	cmp	r9, r8
 80062bc:	f841 3b04 	str.w	r3, [r1], #4
 80062c0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80062c4:	d2e6      	bcs.n	8006294 <quorem+0xa4>
 80062c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062ce:	b922      	cbnz	r2, 80062da <quorem+0xea>
 80062d0:	3b04      	subs	r3, #4
 80062d2:	429d      	cmp	r5, r3
 80062d4:	461a      	mov	r2, r3
 80062d6:	d30b      	bcc.n	80062f0 <quorem+0x100>
 80062d8:	613c      	str	r4, [r7, #16]
 80062da:	3601      	adds	r6, #1
 80062dc:	4630      	mov	r0, r6
 80062de:	b003      	add	sp, #12
 80062e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062e4:	6812      	ldr	r2, [r2, #0]
 80062e6:	3b04      	subs	r3, #4
 80062e8:	2a00      	cmp	r2, #0
 80062ea:	d1cb      	bne.n	8006284 <quorem+0x94>
 80062ec:	3c01      	subs	r4, #1
 80062ee:	e7c6      	b.n	800627e <quorem+0x8e>
 80062f0:	6812      	ldr	r2, [r2, #0]
 80062f2:	3b04      	subs	r3, #4
 80062f4:	2a00      	cmp	r2, #0
 80062f6:	d1ef      	bne.n	80062d8 <quorem+0xe8>
 80062f8:	3c01      	subs	r4, #1
 80062fa:	e7ea      	b.n	80062d2 <quorem+0xe2>
 80062fc:	2000      	movs	r0, #0
 80062fe:	e7ee      	b.n	80062de <quorem+0xee>

08006300 <_dtoa_r>:
 8006300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006304:	69c7      	ldr	r7, [r0, #28]
 8006306:	b099      	sub	sp, #100	@ 0x64
 8006308:	ed8d 0b02 	vstr	d0, [sp, #8]
 800630c:	ec55 4b10 	vmov	r4, r5, d0
 8006310:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006312:	9109      	str	r1, [sp, #36]	@ 0x24
 8006314:	4683      	mov	fp, r0
 8006316:	920e      	str	r2, [sp, #56]	@ 0x38
 8006318:	9313      	str	r3, [sp, #76]	@ 0x4c
 800631a:	b97f      	cbnz	r7, 800633c <_dtoa_r+0x3c>
 800631c:	2010      	movs	r0, #16
 800631e:	f000 fdfd 	bl	8006f1c <malloc>
 8006322:	4602      	mov	r2, r0
 8006324:	f8cb 001c 	str.w	r0, [fp, #28]
 8006328:	b920      	cbnz	r0, 8006334 <_dtoa_r+0x34>
 800632a:	4ba7      	ldr	r3, [pc, #668]	@ (80065c8 <_dtoa_r+0x2c8>)
 800632c:	21ef      	movs	r1, #239	@ 0xef
 800632e:	48a7      	ldr	r0, [pc, #668]	@ (80065cc <_dtoa_r+0x2cc>)
 8006330:	f7ff ff40 	bl	80061b4 <__assert_func>
 8006334:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006338:	6007      	str	r7, [r0, #0]
 800633a:	60c7      	str	r7, [r0, #12]
 800633c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006340:	6819      	ldr	r1, [r3, #0]
 8006342:	b159      	cbz	r1, 800635c <_dtoa_r+0x5c>
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	604a      	str	r2, [r1, #4]
 8006348:	2301      	movs	r3, #1
 800634a:	4093      	lsls	r3, r2
 800634c:	608b      	str	r3, [r1, #8]
 800634e:	4658      	mov	r0, fp
 8006350:	f000 feda 	bl	8007108 <_Bfree>
 8006354:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006358:	2200      	movs	r2, #0
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	1e2b      	subs	r3, r5, #0
 800635e:	bfb9      	ittee	lt
 8006360:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006364:	9303      	strlt	r3, [sp, #12]
 8006366:	2300      	movge	r3, #0
 8006368:	6033      	strge	r3, [r6, #0]
 800636a:	9f03      	ldr	r7, [sp, #12]
 800636c:	4b98      	ldr	r3, [pc, #608]	@ (80065d0 <_dtoa_r+0x2d0>)
 800636e:	bfbc      	itt	lt
 8006370:	2201      	movlt	r2, #1
 8006372:	6032      	strlt	r2, [r6, #0]
 8006374:	43bb      	bics	r3, r7
 8006376:	d112      	bne.n	800639e <_dtoa_r+0x9e>
 8006378:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800637a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800637e:	6013      	str	r3, [r2, #0]
 8006380:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006384:	4323      	orrs	r3, r4
 8006386:	f000 854d 	beq.w	8006e24 <_dtoa_r+0xb24>
 800638a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800638c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80065e4 <_dtoa_r+0x2e4>
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 854f 	beq.w	8006e34 <_dtoa_r+0xb34>
 8006396:	f10a 0303 	add.w	r3, sl, #3
 800639a:	f000 bd49 	b.w	8006e30 <_dtoa_r+0xb30>
 800639e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80063a2:	2200      	movs	r2, #0
 80063a4:	ec51 0b17 	vmov	r0, r1, d7
 80063a8:	2300      	movs	r3, #0
 80063aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80063ae:	f7fa fba3 	bl	8000af8 <__aeabi_dcmpeq>
 80063b2:	4680      	mov	r8, r0
 80063b4:	b158      	cbz	r0, 80063ce <_dtoa_r+0xce>
 80063b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80063b8:	2301      	movs	r3, #1
 80063ba:	6013      	str	r3, [r2, #0]
 80063bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80063be:	b113      	cbz	r3, 80063c6 <_dtoa_r+0xc6>
 80063c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80063c2:	4b84      	ldr	r3, [pc, #528]	@ (80065d4 <_dtoa_r+0x2d4>)
 80063c4:	6013      	str	r3, [r2, #0]
 80063c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80065e8 <_dtoa_r+0x2e8>
 80063ca:	f000 bd33 	b.w	8006e34 <_dtoa_r+0xb34>
 80063ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80063d2:	aa16      	add	r2, sp, #88	@ 0x58
 80063d4:	a917      	add	r1, sp, #92	@ 0x5c
 80063d6:	4658      	mov	r0, fp
 80063d8:	f001 f980 	bl	80076dc <__d2b>
 80063dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80063e0:	4681      	mov	r9, r0
 80063e2:	2e00      	cmp	r6, #0
 80063e4:	d077      	beq.n	80064d6 <_dtoa_r+0x1d6>
 80063e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80063ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80063f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80063f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80063fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006400:	4619      	mov	r1, r3
 8006402:	2200      	movs	r2, #0
 8006404:	4b74      	ldr	r3, [pc, #464]	@ (80065d8 <_dtoa_r+0x2d8>)
 8006406:	f7f9 ff57 	bl	80002b8 <__aeabi_dsub>
 800640a:	a369      	add	r3, pc, #420	@ (adr r3, 80065b0 <_dtoa_r+0x2b0>)
 800640c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006410:	f7fa f90a 	bl	8000628 <__aeabi_dmul>
 8006414:	a368      	add	r3, pc, #416	@ (adr r3, 80065b8 <_dtoa_r+0x2b8>)
 8006416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641a:	f7f9 ff4f 	bl	80002bc <__adddf3>
 800641e:	4604      	mov	r4, r0
 8006420:	4630      	mov	r0, r6
 8006422:	460d      	mov	r5, r1
 8006424:	f7fa f896 	bl	8000554 <__aeabi_i2d>
 8006428:	a365      	add	r3, pc, #404	@ (adr r3, 80065c0 <_dtoa_r+0x2c0>)
 800642a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642e:	f7fa f8fb 	bl	8000628 <__aeabi_dmul>
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	4620      	mov	r0, r4
 8006438:	4629      	mov	r1, r5
 800643a:	f7f9 ff3f 	bl	80002bc <__adddf3>
 800643e:	4604      	mov	r4, r0
 8006440:	460d      	mov	r5, r1
 8006442:	f7fa fba1 	bl	8000b88 <__aeabi_d2iz>
 8006446:	2200      	movs	r2, #0
 8006448:	4607      	mov	r7, r0
 800644a:	2300      	movs	r3, #0
 800644c:	4620      	mov	r0, r4
 800644e:	4629      	mov	r1, r5
 8006450:	f7fa fb5c 	bl	8000b0c <__aeabi_dcmplt>
 8006454:	b140      	cbz	r0, 8006468 <_dtoa_r+0x168>
 8006456:	4638      	mov	r0, r7
 8006458:	f7fa f87c 	bl	8000554 <__aeabi_i2d>
 800645c:	4622      	mov	r2, r4
 800645e:	462b      	mov	r3, r5
 8006460:	f7fa fb4a 	bl	8000af8 <__aeabi_dcmpeq>
 8006464:	b900      	cbnz	r0, 8006468 <_dtoa_r+0x168>
 8006466:	3f01      	subs	r7, #1
 8006468:	2f16      	cmp	r7, #22
 800646a:	d851      	bhi.n	8006510 <_dtoa_r+0x210>
 800646c:	4b5b      	ldr	r3, [pc, #364]	@ (80065dc <_dtoa_r+0x2dc>)
 800646e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006476:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800647a:	f7fa fb47 	bl	8000b0c <__aeabi_dcmplt>
 800647e:	2800      	cmp	r0, #0
 8006480:	d048      	beq.n	8006514 <_dtoa_r+0x214>
 8006482:	3f01      	subs	r7, #1
 8006484:	2300      	movs	r3, #0
 8006486:	9312      	str	r3, [sp, #72]	@ 0x48
 8006488:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800648a:	1b9b      	subs	r3, r3, r6
 800648c:	1e5a      	subs	r2, r3, #1
 800648e:	bf44      	itt	mi
 8006490:	f1c3 0801 	rsbmi	r8, r3, #1
 8006494:	2300      	movmi	r3, #0
 8006496:	9208      	str	r2, [sp, #32]
 8006498:	bf54      	ite	pl
 800649a:	f04f 0800 	movpl.w	r8, #0
 800649e:	9308      	strmi	r3, [sp, #32]
 80064a0:	2f00      	cmp	r7, #0
 80064a2:	db39      	blt.n	8006518 <_dtoa_r+0x218>
 80064a4:	9b08      	ldr	r3, [sp, #32]
 80064a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80064a8:	443b      	add	r3, r7
 80064aa:	9308      	str	r3, [sp, #32]
 80064ac:	2300      	movs	r3, #0
 80064ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80064b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064b2:	2b09      	cmp	r3, #9
 80064b4:	d864      	bhi.n	8006580 <_dtoa_r+0x280>
 80064b6:	2b05      	cmp	r3, #5
 80064b8:	bfc4      	itt	gt
 80064ba:	3b04      	subgt	r3, #4
 80064bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80064be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064c0:	f1a3 0302 	sub.w	r3, r3, #2
 80064c4:	bfcc      	ite	gt
 80064c6:	2400      	movgt	r4, #0
 80064c8:	2401      	movle	r4, #1
 80064ca:	2b03      	cmp	r3, #3
 80064cc:	d863      	bhi.n	8006596 <_dtoa_r+0x296>
 80064ce:	e8df f003 	tbb	[pc, r3]
 80064d2:	372a      	.short	0x372a
 80064d4:	5535      	.short	0x5535
 80064d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80064da:	441e      	add	r6, r3
 80064dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80064e0:	2b20      	cmp	r3, #32
 80064e2:	bfc1      	itttt	gt
 80064e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80064e8:	409f      	lslgt	r7, r3
 80064ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80064ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 80064f2:	bfd6      	itet	le
 80064f4:	f1c3 0320 	rsble	r3, r3, #32
 80064f8:	ea47 0003 	orrgt.w	r0, r7, r3
 80064fc:	fa04 f003 	lslle.w	r0, r4, r3
 8006500:	f7fa f818 	bl	8000534 <__aeabi_ui2d>
 8006504:	2201      	movs	r2, #1
 8006506:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800650a:	3e01      	subs	r6, #1
 800650c:	9214      	str	r2, [sp, #80]	@ 0x50
 800650e:	e777      	b.n	8006400 <_dtoa_r+0x100>
 8006510:	2301      	movs	r3, #1
 8006512:	e7b8      	b.n	8006486 <_dtoa_r+0x186>
 8006514:	9012      	str	r0, [sp, #72]	@ 0x48
 8006516:	e7b7      	b.n	8006488 <_dtoa_r+0x188>
 8006518:	427b      	negs	r3, r7
 800651a:	930a      	str	r3, [sp, #40]	@ 0x28
 800651c:	2300      	movs	r3, #0
 800651e:	eba8 0807 	sub.w	r8, r8, r7
 8006522:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006524:	e7c4      	b.n	80064b0 <_dtoa_r+0x1b0>
 8006526:	2300      	movs	r3, #0
 8006528:	930b      	str	r3, [sp, #44]	@ 0x2c
 800652a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800652c:	2b00      	cmp	r3, #0
 800652e:	dc35      	bgt.n	800659c <_dtoa_r+0x29c>
 8006530:	2301      	movs	r3, #1
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	9307      	str	r3, [sp, #28]
 8006536:	461a      	mov	r2, r3
 8006538:	920e      	str	r2, [sp, #56]	@ 0x38
 800653a:	e00b      	b.n	8006554 <_dtoa_r+0x254>
 800653c:	2301      	movs	r3, #1
 800653e:	e7f3      	b.n	8006528 <_dtoa_r+0x228>
 8006540:	2300      	movs	r3, #0
 8006542:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006544:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006546:	18fb      	adds	r3, r7, r3
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	3301      	adds	r3, #1
 800654c:	2b01      	cmp	r3, #1
 800654e:	9307      	str	r3, [sp, #28]
 8006550:	bfb8      	it	lt
 8006552:	2301      	movlt	r3, #1
 8006554:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006558:	2100      	movs	r1, #0
 800655a:	2204      	movs	r2, #4
 800655c:	f102 0514 	add.w	r5, r2, #20
 8006560:	429d      	cmp	r5, r3
 8006562:	d91f      	bls.n	80065a4 <_dtoa_r+0x2a4>
 8006564:	6041      	str	r1, [r0, #4]
 8006566:	4658      	mov	r0, fp
 8006568:	f000 fd8e 	bl	8007088 <_Balloc>
 800656c:	4682      	mov	sl, r0
 800656e:	2800      	cmp	r0, #0
 8006570:	d13c      	bne.n	80065ec <_dtoa_r+0x2ec>
 8006572:	4b1b      	ldr	r3, [pc, #108]	@ (80065e0 <_dtoa_r+0x2e0>)
 8006574:	4602      	mov	r2, r0
 8006576:	f240 11af 	movw	r1, #431	@ 0x1af
 800657a:	e6d8      	b.n	800632e <_dtoa_r+0x2e>
 800657c:	2301      	movs	r3, #1
 800657e:	e7e0      	b.n	8006542 <_dtoa_r+0x242>
 8006580:	2401      	movs	r4, #1
 8006582:	2300      	movs	r3, #0
 8006584:	9309      	str	r3, [sp, #36]	@ 0x24
 8006586:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006588:	f04f 33ff 	mov.w	r3, #4294967295
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	9307      	str	r3, [sp, #28]
 8006590:	2200      	movs	r2, #0
 8006592:	2312      	movs	r3, #18
 8006594:	e7d0      	b.n	8006538 <_dtoa_r+0x238>
 8006596:	2301      	movs	r3, #1
 8006598:	930b      	str	r3, [sp, #44]	@ 0x2c
 800659a:	e7f5      	b.n	8006588 <_dtoa_r+0x288>
 800659c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	9307      	str	r3, [sp, #28]
 80065a2:	e7d7      	b.n	8006554 <_dtoa_r+0x254>
 80065a4:	3101      	adds	r1, #1
 80065a6:	0052      	lsls	r2, r2, #1
 80065a8:	e7d8      	b.n	800655c <_dtoa_r+0x25c>
 80065aa:	bf00      	nop
 80065ac:	f3af 8000 	nop.w
 80065b0:	636f4361 	.word	0x636f4361
 80065b4:	3fd287a7 	.word	0x3fd287a7
 80065b8:	8b60c8b3 	.word	0x8b60c8b3
 80065bc:	3fc68a28 	.word	0x3fc68a28
 80065c0:	509f79fb 	.word	0x509f79fb
 80065c4:	3fd34413 	.word	0x3fd34413
 80065c8:	080087a8 	.word	0x080087a8
 80065cc:	08008862 	.word	0x08008862
 80065d0:	7ff00000 	.word	0x7ff00000
 80065d4:	08008785 	.word	0x08008785
 80065d8:	3ff80000 	.word	0x3ff80000
 80065dc:	08008958 	.word	0x08008958
 80065e0:	080088ba 	.word	0x080088ba
 80065e4:	0800885e 	.word	0x0800885e
 80065e8:	08008784 	.word	0x08008784
 80065ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80065f0:	6018      	str	r0, [r3, #0]
 80065f2:	9b07      	ldr	r3, [sp, #28]
 80065f4:	2b0e      	cmp	r3, #14
 80065f6:	f200 80a4 	bhi.w	8006742 <_dtoa_r+0x442>
 80065fa:	2c00      	cmp	r4, #0
 80065fc:	f000 80a1 	beq.w	8006742 <_dtoa_r+0x442>
 8006600:	2f00      	cmp	r7, #0
 8006602:	dd33      	ble.n	800666c <_dtoa_r+0x36c>
 8006604:	4bad      	ldr	r3, [pc, #692]	@ (80068bc <_dtoa_r+0x5bc>)
 8006606:	f007 020f 	and.w	r2, r7, #15
 800660a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800660e:	ed93 7b00 	vldr	d7, [r3]
 8006612:	05f8      	lsls	r0, r7, #23
 8006614:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006618:	ea4f 1427 	mov.w	r4, r7, asr #4
 800661c:	d516      	bpl.n	800664c <_dtoa_r+0x34c>
 800661e:	4ba8      	ldr	r3, [pc, #672]	@ (80068c0 <_dtoa_r+0x5c0>)
 8006620:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006624:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006628:	f7fa f928 	bl	800087c <__aeabi_ddiv>
 800662c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006630:	f004 040f 	and.w	r4, r4, #15
 8006634:	2603      	movs	r6, #3
 8006636:	4da2      	ldr	r5, [pc, #648]	@ (80068c0 <_dtoa_r+0x5c0>)
 8006638:	b954      	cbnz	r4, 8006650 <_dtoa_r+0x350>
 800663a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800663e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006642:	f7fa f91b 	bl	800087c <__aeabi_ddiv>
 8006646:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800664a:	e028      	b.n	800669e <_dtoa_r+0x39e>
 800664c:	2602      	movs	r6, #2
 800664e:	e7f2      	b.n	8006636 <_dtoa_r+0x336>
 8006650:	07e1      	lsls	r1, r4, #31
 8006652:	d508      	bpl.n	8006666 <_dtoa_r+0x366>
 8006654:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006658:	e9d5 2300 	ldrd	r2, r3, [r5]
 800665c:	f7f9 ffe4 	bl	8000628 <__aeabi_dmul>
 8006660:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006664:	3601      	adds	r6, #1
 8006666:	1064      	asrs	r4, r4, #1
 8006668:	3508      	adds	r5, #8
 800666a:	e7e5      	b.n	8006638 <_dtoa_r+0x338>
 800666c:	f000 80d2 	beq.w	8006814 <_dtoa_r+0x514>
 8006670:	427c      	negs	r4, r7
 8006672:	4b92      	ldr	r3, [pc, #584]	@ (80068bc <_dtoa_r+0x5bc>)
 8006674:	4d92      	ldr	r5, [pc, #584]	@ (80068c0 <_dtoa_r+0x5c0>)
 8006676:	f004 020f 	and.w	r2, r4, #15
 800667a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006686:	f7f9 ffcf 	bl	8000628 <__aeabi_dmul>
 800668a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800668e:	1124      	asrs	r4, r4, #4
 8006690:	2300      	movs	r3, #0
 8006692:	2602      	movs	r6, #2
 8006694:	2c00      	cmp	r4, #0
 8006696:	f040 80b2 	bne.w	80067fe <_dtoa_r+0x4fe>
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1d3      	bne.n	8006646 <_dtoa_r+0x346>
 800669e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80066a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 80b7 	beq.w	8006818 <_dtoa_r+0x518>
 80066aa:	4b86      	ldr	r3, [pc, #536]	@ (80068c4 <_dtoa_r+0x5c4>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	4620      	mov	r0, r4
 80066b0:	4629      	mov	r1, r5
 80066b2:	f7fa fa2b 	bl	8000b0c <__aeabi_dcmplt>
 80066b6:	2800      	cmp	r0, #0
 80066b8:	f000 80ae 	beq.w	8006818 <_dtoa_r+0x518>
 80066bc:	9b07      	ldr	r3, [sp, #28]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 80aa 	beq.w	8006818 <_dtoa_r+0x518>
 80066c4:	9b00      	ldr	r3, [sp, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	dd37      	ble.n	800673a <_dtoa_r+0x43a>
 80066ca:	1e7b      	subs	r3, r7, #1
 80066cc:	9304      	str	r3, [sp, #16]
 80066ce:	4620      	mov	r0, r4
 80066d0:	4b7d      	ldr	r3, [pc, #500]	@ (80068c8 <_dtoa_r+0x5c8>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	4629      	mov	r1, r5
 80066d6:	f7f9 ffa7 	bl	8000628 <__aeabi_dmul>
 80066da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066de:	9c00      	ldr	r4, [sp, #0]
 80066e0:	3601      	adds	r6, #1
 80066e2:	4630      	mov	r0, r6
 80066e4:	f7f9 ff36 	bl	8000554 <__aeabi_i2d>
 80066e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066ec:	f7f9 ff9c 	bl	8000628 <__aeabi_dmul>
 80066f0:	4b76      	ldr	r3, [pc, #472]	@ (80068cc <_dtoa_r+0x5cc>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	f7f9 fde2 	bl	80002bc <__adddf3>
 80066f8:	4605      	mov	r5, r0
 80066fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80066fe:	2c00      	cmp	r4, #0
 8006700:	f040 808d 	bne.w	800681e <_dtoa_r+0x51e>
 8006704:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006708:	4b71      	ldr	r3, [pc, #452]	@ (80068d0 <_dtoa_r+0x5d0>)
 800670a:	2200      	movs	r2, #0
 800670c:	f7f9 fdd4 	bl	80002b8 <__aeabi_dsub>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006718:	462a      	mov	r2, r5
 800671a:	4633      	mov	r3, r6
 800671c:	f7fa fa14 	bl	8000b48 <__aeabi_dcmpgt>
 8006720:	2800      	cmp	r0, #0
 8006722:	f040 828b 	bne.w	8006c3c <_dtoa_r+0x93c>
 8006726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800672a:	462a      	mov	r2, r5
 800672c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006730:	f7fa f9ec 	bl	8000b0c <__aeabi_dcmplt>
 8006734:	2800      	cmp	r0, #0
 8006736:	f040 8128 	bne.w	800698a <_dtoa_r+0x68a>
 800673a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800673e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006742:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006744:	2b00      	cmp	r3, #0
 8006746:	f2c0 815a 	blt.w	80069fe <_dtoa_r+0x6fe>
 800674a:	2f0e      	cmp	r7, #14
 800674c:	f300 8157 	bgt.w	80069fe <_dtoa_r+0x6fe>
 8006750:	4b5a      	ldr	r3, [pc, #360]	@ (80068bc <_dtoa_r+0x5bc>)
 8006752:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006756:	ed93 7b00 	vldr	d7, [r3]
 800675a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800675c:	2b00      	cmp	r3, #0
 800675e:	ed8d 7b00 	vstr	d7, [sp]
 8006762:	da03      	bge.n	800676c <_dtoa_r+0x46c>
 8006764:	9b07      	ldr	r3, [sp, #28]
 8006766:	2b00      	cmp	r3, #0
 8006768:	f340 8101 	ble.w	800696e <_dtoa_r+0x66e>
 800676c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006770:	4656      	mov	r6, sl
 8006772:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006776:	4620      	mov	r0, r4
 8006778:	4629      	mov	r1, r5
 800677a:	f7fa f87f 	bl	800087c <__aeabi_ddiv>
 800677e:	f7fa fa03 	bl	8000b88 <__aeabi_d2iz>
 8006782:	4680      	mov	r8, r0
 8006784:	f7f9 fee6 	bl	8000554 <__aeabi_i2d>
 8006788:	e9dd 2300 	ldrd	r2, r3, [sp]
 800678c:	f7f9 ff4c 	bl	8000628 <__aeabi_dmul>
 8006790:	4602      	mov	r2, r0
 8006792:	460b      	mov	r3, r1
 8006794:	4620      	mov	r0, r4
 8006796:	4629      	mov	r1, r5
 8006798:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800679c:	f7f9 fd8c 	bl	80002b8 <__aeabi_dsub>
 80067a0:	f806 4b01 	strb.w	r4, [r6], #1
 80067a4:	9d07      	ldr	r5, [sp, #28]
 80067a6:	eba6 040a 	sub.w	r4, r6, sl
 80067aa:	42a5      	cmp	r5, r4
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	f040 8117 	bne.w	80069e2 <_dtoa_r+0x6e2>
 80067b4:	f7f9 fd82 	bl	80002bc <__adddf3>
 80067b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067bc:	4604      	mov	r4, r0
 80067be:	460d      	mov	r5, r1
 80067c0:	f7fa f9c2 	bl	8000b48 <__aeabi_dcmpgt>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	f040 80f9 	bne.w	80069bc <_dtoa_r+0x6bc>
 80067ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067ce:	4620      	mov	r0, r4
 80067d0:	4629      	mov	r1, r5
 80067d2:	f7fa f991 	bl	8000af8 <__aeabi_dcmpeq>
 80067d6:	b118      	cbz	r0, 80067e0 <_dtoa_r+0x4e0>
 80067d8:	f018 0f01 	tst.w	r8, #1
 80067dc:	f040 80ee 	bne.w	80069bc <_dtoa_r+0x6bc>
 80067e0:	4649      	mov	r1, r9
 80067e2:	4658      	mov	r0, fp
 80067e4:	f000 fc90 	bl	8007108 <_Bfree>
 80067e8:	2300      	movs	r3, #0
 80067ea:	7033      	strb	r3, [r6, #0]
 80067ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80067ee:	3701      	adds	r7, #1
 80067f0:	601f      	str	r7, [r3, #0]
 80067f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 831d 	beq.w	8006e34 <_dtoa_r+0xb34>
 80067fa:	601e      	str	r6, [r3, #0]
 80067fc:	e31a      	b.n	8006e34 <_dtoa_r+0xb34>
 80067fe:	07e2      	lsls	r2, r4, #31
 8006800:	d505      	bpl.n	800680e <_dtoa_r+0x50e>
 8006802:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006806:	f7f9 ff0f 	bl	8000628 <__aeabi_dmul>
 800680a:	3601      	adds	r6, #1
 800680c:	2301      	movs	r3, #1
 800680e:	1064      	asrs	r4, r4, #1
 8006810:	3508      	adds	r5, #8
 8006812:	e73f      	b.n	8006694 <_dtoa_r+0x394>
 8006814:	2602      	movs	r6, #2
 8006816:	e742      	b.n	800669e <_dtoa_r+0x39e>
 8006818:	9c07      	ldr	r4, [sp, #28]
 800681a:	9704      	str	r7, [sp, #16]
 800681c:	e761      	b.n	80066e2 <_dtoa_r+0x3e2>
 800681e:	4b27      	ldr	r3, [pc, #156]	@ (80068bc <_dtoa_r+0x5bc>)
 8006820:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006822:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006826:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800682a:	4454      	add	r4, sl
 800682c:	2900      	cmp	r1, #0
 800682e:	d053      	beq.n	80068d8 <_dtoa_r+0x5d8>
 8006830:	4928      	ldr	r1, [pc, #160]	@ (80068d4 <_dtoa_r+0x5d4>)
 8006832:	2000      	movs	r0, #0
 8006834:	f7fa f822 	bl	800087c <__aeabi_ddiv>
 8006838:	4633      	mov	r3, r6
 800683a:	462a      	mov	r2, r5
 800683c:	f7f9 fd3c 	bl	80002b8 <__aeabi_dsub>
 8006840:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006844:	4656      	mov	r6, sl
 8006846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800684a:	f7fa f99d 	bl	8000b88 <__aeabi_d2iz>
 800684e:	4605      	mov	r5, r0
 8006850:	f7f9 fe80 	bl	8000554 <__aeabi_i2d>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800685c:	f7f9 fd2c 	bl	80002b8 <__aeabi_dsub>
 8006860:	3530      	adds	r5, #48	@ 0x30
 8006862:	4602      	mov	r2, r0
 8006864:	460b      	mov	r3, r1
 8006866:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800686a:	f806 5b01 	strb.w	r5, [r6], #1
 800686e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006872:	f7fa f94b 	bl	8000b0c <__aeabi_dcmplt>
 8006876:	2800      	cmp	r0, #0
 8006878:	d171      	bne.n	800695e <_dtoa_r+0x65e>
 800687a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800687e:	4911      	ldr	r1, [pc, #68]	@ (80068c4 <_dtoa_r+0x5c4>)
 8006880:	2000      	movs	r0, #0
 8006882:	f7f9 fd19 	bl	80002b8 <__aeabi_dsub>
 8006886:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800688a:	f7fa f93f 	bl	8000b0c <__aeabi_dcmplt>
 800688e:	2800      	cmp	r0, #0
 8006890:	f040 8095 	bne.w	80069be <_dtoa_r+0x6be>
 8006894:	42a6      	cmp	r6, r4
 8006896:	f43f af50 	beq.w	800673a <_dtoa_r+0x43a>
 800689a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800689e:	4b0a      	ldr	r3, [pc, #40]	@ (80068c8 <_dtoa_r+0x5c8>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	f7f9 fec1 	bl	8000628 <__aeabi_dmul>
 80068a6:	4b08      	ldr	r3, [pc, #32]	@ (80068c8 <_dtoa_r+0x5c8>)
 80068a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80068ac:	2200      	movs	r2, #0
 80068ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068b2:	f7f9 feb9 	bl	8000628 <__aeabi_dmul>
 80068b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068ba:	e7c4      	b.n	8006846 <_dtoa_r+0x546>
 80068bc:	08008958 	.word	0x08008958
 80068c0:	08008930 	.word	0x08008930
 80068c4:	3ff00000 	.word	0x3ff00000
 80068c8:	40240000 	.word	0x40240000
 80068cc:	401c0000 	.word	0x401c0000
 80068d0:	40140000 	.word	0x40140000
 80068d4:	3fe00000 	.word	0x3fe00000
 80068d8:	4631      	mov	r1, r6
 80068da:	4628      	mov	r0, r5
 80068dc:	f7f9 fea4 	bl	8000628 <__aeabi_dmul>
 80068e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80068e4:	9415      	str	r4, [sp, #84]	@ 0x54
 80068e6:	4656      	mov	r6, sl
 80068e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068ec:	f7fa f94c 	bl	8000b88 <__aeabi_d2iz>
 80068f0:	4605      	mov	r5, r0
 80068f2:	f7f9 fe2f 	bl	8000554 <__aeabi_i2d>
 80068f6:	4602      	mov	r2, r0
 80068f8:	460b      	mov	r3, r1
 80068fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068fe:	f7f9 fcdb 	bl	80002b8 <__aeabi_dsub>
 8006902:	3530      	adds	r5, #48	@ 0x30
 8006904:	f806 5b01 	strb.w	r5, [r6], #1
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	42a6      	cmp	r6, r4
 800690e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006912:	f04f 0200 	mov.w	r2, #0
 8006916:	d124      	bne.n	8006962 <_dtoa_r+0x662>
 8006918:	4bac      	ldr	r3, [pc, #688]	@ (8006bcc <_dtoa_r+0x8cc>)
 800691a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800691e:	f7f9 fccd 	bl	80002bc <__adddf3>
 8006922:	4602      	mov	r2, r0
 8006924:	460b      	mov	r3, r1
 8006926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800692a:	f7fa f90d 	bl	8000b48 <__aeabi_dcmpgt>
 800692e:	2800      	cmp	r0, #0
 8006930:	d145      	bne.n	80069be <_dtoa_r+0x6be>
 8006932:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006936:	49a5      	ldr	r1, [pc, #660]	@ (8006bcc <_dtoa_r+0x8cc>)
 8006938:	2000      	movs	r0, #0
 800693a:	f7f9 fcbd 	bl	80002b8 <__aeabi_dsub>
 800693e:	4602      	mov	r2, r0
 8006940:	460b      	mov	r3, r1
 8006942:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006946:	f7fa f8e1 	bl	8000b0c <__aeabi_dcmplt>
 800694a:	2800      	cmp	r0, #0
 800694c:	f43f aef5 	beq.w	800673a <_dtoa_r+0x43a>
 8006950:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006952:	1e73      	subs	r3, r6, #1
 8006954:	9315      	str	r3, [sp, #84]	@ 0x54
 8006956:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800695a:	2b30      	cmp	r3, #48	@ 0x30
 800695c:	d0f8      	beq.n	8006950 <_dtoa_r+0x650>
 800695e:	9f04      	ldr	r7, [sp, #16]
 8006960:	e73e      	b.n	80067e0 <_dtoa_r+0x4e0>
 8006962:	4b9b      	ldr	r3, [pc, #620]	@ (8006bd0 <_dtoa_r+0x8d0>)
 8006964:	f7f9 fe60 	bl	8000628 <__aeabi_dmul>
 8006968:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800696c:	e7bc      	b.n	80068e8 <_dtoa_r+0x5e8>
 800696e:	d10c      	bne.n	800698a <_dtoa_r+0x68a>
 8006970:	4b98      	ldr	r3, [pc, #608]	@ (8006bd4 <_dtoa_r+0x8d4>)
 8006972:	2200      	movs	r2, #0
 8006974:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006978:	f7f9 fe56 	bl	8000628 <__aeabi_dmul>
 800697c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006980:	f7fa f8d8 	bl	8000b34 <__aeabi_dcmpge>
 8006984:	2800      	cmp	r0, #0
 8006986:	f000 8157 	beq.w	8006c38 <_dtoa_r+0x938>
 800698a:	2400      	movs	r4, #0
 800698c:	4625      	mov	r5, r4
 800698e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006990:	43db      	mvns	r3, r3
 8006992:	9304      	str	r3, [sp, #16]
 8006994:	4656      	mov	r6, sl
 8006996:	2700      	movs	r7, #0
 8006998:	4621      	mov	r1, r4
 800699a:	4658      	mov	r0, fp
 800699c:	f000 fbb4 	bl	8007108 <_Bfree>
 80069a0:	2d00      	cmp	r5, #0
 80069a2:	d0dc      	beq.n	800695e <_dtoa_r+0x65e>
 80069a4:	b12f      	cbz	r7, 80069b2 <_dtoa_r+0x6b2>
 80069a6:	42af      	cmp	r7, r5
 80069a8:	d003      	beq.n	80069b2 <_dtoa_r+0x6b2>
 80069aa:	4639      	mov	r1, r7
 80069ac:	4658      	mov	r0, fp
 80069ae:	f000 fbab 	bl	8007108 <_Bfree>
 80069b2:	4629      	mov	r1, r5
 80069b4:	4658      	mov	r0, fp
 80069b6:	f000 fba7 	bl	8007108 <_Bfree>
 80069ba:	e7d0      	b.n	800695e <_dtoa_r+0x65e>
 80069bc:	9704      	str	r7, [sp, #16]
 80069be:	4633      	mov	r3, r6
 80069c0:	461e      	mov	r6, r3
 80069c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069c6:	2a39      	cmp	r2, #57	@ 0x39
 80069c8:	d107      	bne.n	80069da <_dtoa_r+0x6da>
 80069ca:	459a      	cmp	sl, r3
 80069cc:	d1f8      	bne.n	80069c0 <_dtoa_r+0x6c0>
 80069ce:	9a04      	ldr	r2, [sp, #16]
 80069d0:	3201      	adds	r2, #1
 80069d2:	9204      	str	r2, [sp, #16]
 80069d4:	2230      	movs	r2, #48	@ 0x30
 80069d6:	f88a 2000 	strb.w	r2, [sl]
 80069da:	781a      	ldrb	r2, [r3, #0]
 80069dc:	3201      	adds	r2, #1
 80069de:	701a      	strb	r2, [r3, #0]
 80069e0:	e7bd      	b.n	800695e <_dtoa_r+0x65e>
 80069e2:	4b7b      	ldr	r3, [pc, #492]	@ (8006bd0 <_dtoa_r+0x8d0>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	f7f9 fe1f 	bl	8000628 <__aeabi_dmul>
 80069ea:	2200      	movs	r2, #0
 80069ec:	2300      	movs	r3, #0
 80069ee:	4604      	mov	r4, r0
 80069f0:	460d      	mov	r5, r1
 80069f2:	f7fa f881 	bl	8000af8 <__aeabi_dcmpeq>
 80069f6:	2800      	cmp	r0, #0
 80069f8:	f43f aebb 	beq.w	8006772 <_dtoa_r+0x472>
 80069fc:	e6f0      	b.n	80067e0 <_dtoa_r+0x4e0>
 80069fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006a00:	2a00      	cmp	r2, #0
 8006a02:	f000 80db 	beq.w	8006bbc <_dtoa_r+0x8bc>
 8006a06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a08:	2a01      	cmp	r2, #1
 8006a0a:	f300 80bf 	bgt.w	8006b8c <_dtoa_r+0x88c>
 8006a0e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006a10:	2a00      	cmp	r2, #0
 8006a12:	f000 80b7 	beq.w	8006b84 <_dtoa_r+0x884>
 8006a16:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006a1a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006a1c:	4646      	mov	r6, r8
 8006a1e:	9a08      	ldr	r2, [sp, #32]
 8006a20:	2101      	movs	r1, #1
 8006a22:	441a      	add	r2, r3
 8006a24:	4658      	mov	r0, fp
 8006a26:	4498      	add	r8, r3
 8006a28:	9208      	str	r2, [sp, #32]
 8006a2a:	f000 fc21 	bl	8007270 <__i2b>
 8006a2e:	4605      	mov	r5, r0
 8006a30:	b15e      	cbz	r6, 8006a4a <_dtoa_r+0x74a>
 8006a32:	9b08      	ldr	r3, [sp, #32]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	dd08      	ble.n	8006a4a <_dtoa_r+0x74a>
 8006a38:	42b3      	cmp	r3, r6
 8006a3a:	9a08      	ldr	r2, [sp, #32]
 8006a3c:	bfa8      	it	ge
 8006a3e:	4633      	movge	r3, r6
 8006a40:	eba8 0803 	sub.w	r8, r8, r3
 8006a44:	1af6      	subs	r6, r6, r3
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	9308      	str	r3, [sp, #32]
 8006a4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a4c:	b1f3      	cbz	r3, 8006a8c <_dtoa_r+0x78c>
 8006a4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 80b7 	beq.w	8006bc4 <_dtoa_r+0x8c4>
 8006a56:	b18c      	cbz	r4, 8006a7c <_dtoa_r+0x77c>
 8006a58:	4629      	mov	r1, r5
 8006a5a:	4622      	mov	r2, r4
 8006a5c:	4658      	mov	r0, fp
 8006a5e:	f000 fcc7 	bl	80073f0 <__pow5mult>
 8006a62:	464a      	mov	r2, r9
 8006a64:	4601      	mov	r1, r0
 8006a66:	4605      	mov	r5, r0
 8006a68:	4658      	mov	r0, fp
 8006a6a:	f000 fc17 	bl	800729c <__multiply>
 8006a6e:	4649      	mov	r1, r9
 8006a70:	9004      	str	r0, [sp, #16]
 8006a72:	4658      	mov	r0, fp
 8006a74:	f000 fb48 	bl	8007108 <_Bfree>
 8006a78:	9b04      	ldr	r3, [sp, #16]
 8006a7a:	4699      	mov	r9, r3
 8006a7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a7e:	1b1a      	subs	r2, r3, r4
 8006a80:	d004      	beq.n	8006a8c <_dtoa_r+0x78c>
 8006a82:	4649      	mov	r1, r9
 8006a84:	4658      	mov	r0, fp
 8006a86:	f000 fcb3 	bl	80073f0 <__pow5mult>
 8006a8a:	4681      	mov	r9, r0
 8006a8c:	2101      	movs	r1, #1
 8006a8e:	4658      	mov	r0, fp
 8006a90:	f000 fbee 	bl	8007270 <__i2b>
 8006a94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a96:	4604      	mov	r4, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 81cf 	beq.w	8006e3c <_dtoa_r+0xb3c>
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	4601      	mov	r1, r0
 8006aa2:	4658      	mov	r0, fp
 8006aa4:	f000 fca4 	bl	80073f0 <__pow5mult>
 8006aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	4604      	mov	r4, r0
 8006aae:	f300 8095 	bgt.w	8006bdc <_dtoa_r+0x8dc>
 8006ab2:	9b02      	ldr	r3, [sp, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f040 8087 	bne.w	8006bc8 <_dtoa_r+0x8c8>
 8006aba:	9b03      	ldr	r3, [sp, #12]
 8006abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f040 8089 	bne.w	8006bd8 <_dtoa_r+0x8d8>
 8006ac6:	9b03      	ldr	r3, [sp, #12]
 8006ac8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006acc:	0d1b      	lsrs	r3, r3, #20
 8006ace:	051b      	lsls	r3, r3, #20
 8006ad0:	b12b      	cbz	r3, 8006ade <_dtoa_r+0x7de>
 8006ad2:	9b08      	ldr	r3, [sp, #32]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	9308      	str	r3, [sp, #32]
 8006ad8:	f108 0801 	add.w	r8, r8, #1
 8006adc:	2301      	movs	r3, #1
 8006ade:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ae0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f000 81b0 	beq.w	8006e48 <_dtoa_r+0xb48>
 8006ae8:	6923      	ldr	r3, [r4, #16]
 8006aea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006aee:	6918      	ldr	r0, [r3, #16]
 8006af0:	f000 fb72 	bl	80071d8 <__hi0bits>
 8006af4:	f1c0 0020 	rsb	r0, r0, #32
 8006af8:	9b08      	ldr	r3, [sp, #32]
 8006afa:	4418      	add	r0, r3
 8006afc:	f010 001f 	ands.w	r0, r0, #31
 8006b00:	d077      	beq.n	8006bf2 <_dtoa_r+0x8f2>
 8006b02:	f1c0 0320 	rsb	r3, r0, #32
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	dd6b      	ble.n	8006be2 <_dtoa_r+0x8e2>
 8006b0a:	9b08      	ldr	r3, [sp, #32]
 8006b0c:	f1c0 001c 	rsb	r0, r0, #28
 8006b10:	4403      	add	r3, r0
 8006b12:	4480      	add	r8, r0
 8006b14:	4406      	add	r6, r0
 8006b16:	9308      	str	r3, [sp, #32]
 8006b18:	f1b8 0f00 	cmp.w	r8, #0
 8006b1c:	dd05      	ble.n	8006b2a <_dtoa_r+0x82a>
 8006b1e:	4649      	mov	r1, r9
 8006b20:	4642      	mov	r2, r8
 8006b22:	4658      	mov	r0, fp
 8006b24:	f000 fcbe 	bl	80074a4 <__lshift>
 8006b28:	4681      	mov	r9, r0
 8006b2a:	9b08      	ldr	r3, [sp, #32]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	dd05      	ble.n	8006b3c <_dtoa_r+0x83c>
 8006b30:	4621      	mov	r1, r4
 8006b32:	461a      	mov	r2, r3
 8006b34:	4658      	mov	r0, fp
 8006b36:	f000 fcb5 	bl	80074a4 <__lshift>
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d059      	beq.n	8006bf6 <_dtoa_r+0x8f6>
 8006b42:	4621      	mov	r1, r4
 8006b44:	4648      	mov	r0, r9
 8006b46:	f000 fd19 	bl	800757c <__mcmp>
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	da53      	bge.n	8006bf6 <_dtoa_r+0x8f6>
 8006b4e:	1e7b      	subs	r3, r7, #1
 8006b50:	9304      	str	r3, [sp, #16]
 8006b52:	4649      	mov	r1, r9
 8006b54:	2300      	movs	r3, #0
 8006b56:	220a      	movs	r2, #10
 8006b58:	4658      	mov	r0, fp
 8006b5a:	f000 faf7 	bl	800714c <__multadd>
 8006b5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b60:	4681      	mov	r9, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 8172 	beq.w	8006e4c <_dtoa_r+0xb4c>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	4629      	mov	r1, r5
 8006b6c:	220a      	movs	r2, #10
 8006b6e:	4658      	mov	r0, fp
 8006b70:	f000 faec 	bl	800714c <__multadd>
 8006b74:	9b00      	ldr	r3, [sp, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	4605      	mov	r5, r0
 8006b7a:	dc67      	bgt.n	8006c4c <_dtoa_r+0x94c>
 8006b7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	dc41      	bgt.n	8006c06 <_dtoa_r+0x906>
 8006b82:	e063      	b.n	8006c4c <_dtoa_r+0x94c>
 8006b84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006b86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006b8a:	e746      	b.n	8006a1a <_dtoa_r+0x71a>
 8006b8c:	9b07      	ldr	r3, [sp, #28]
 8006b8e:	1e5c      	subs	r4, r3, #1
 8006b90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b92:	42a3      	cmp	r3, r4
 8006b94:	bfbf      	itttt	lt
 8006b96:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006b98:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006b9a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006b9c:	1ae3      	sublt	r3, r4, r3
 8006b9e:	bfb4      	ite	lt
 8006ba0:	18d2      	addlt	r2, r2, r3
 8006ba2:	1b1c      	subge	r4, r3, r4
 8006ba4:	9b07      	ldr	r3, [sp, #28]
 8006ba6:	bfbc      	itt	lt
 8006ba8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006baa:	2400      	movlt	r4, #0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	bfb5      	itete	lt
 8006bb0:	eba8 0603 	sublt.w	r6, r8, r3
 8006bb4:	9b07      	ldrge	r3, [sp, #28]
 8006bb6:	2300      	movlt	r3, #0
 8006bb8:	4646      	movge	r6, r8
 8006bba:	e730      	b.n	8006a1e <_dtoa_r+0x71e>
 8006bbc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006bbe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006bc0:	4646      	mov	r6, r8
 8006bc2:	e735      	b.n	8006a30 <_dtoa_r+0x730>
 8006bc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006bc6:	e75c      	b.n	8006a82 <_dtoa_r+0x782>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	e788      	b.n	8006ade <_dtoa_r+0x7de>
 8006bcc:	3fe00000 	.word	0x3fe00000
 8006bd0:	40240000 	.word	0x40240000
 8006bd4:	40140000 	.word	0x40140000
 8006bd8:	9b02      	ldr	r3, [sp, #8]
 8006bda:	e780      	b.n	8006ade <_dtoa_r+0x7de>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	930a      	str	r3, [sp, #40]	@ 0x28
 8006be0:	e782      	b.n	8006ae8 <_dtoa_r+0x7e8>
 8006be2:	d099      	beq.n	8006b18 <_dtoa_r+0x818>
 8006be4:	9a08      	ldr	r2, [sp, #32]
 8006be6:	331c      	adds	r3, #28
 8006be8:	441a      	add	r2, r3
 8006bea:	4498      	add	r8, r3
 8006bec:	441e      	add	r6, r3
 8006bee:	9208      	str	r2, [sp, #32]
 8006bf0:	e792      	b.n	8006b18 <_dtoa_r+0x818>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	e7f6      	b.n	8006be4 <_dtoa_r+0x8e4>
 8006bf6:	9b07      	ldr	r3, [sp, #28]
 8006bf8:	9704      	str	r7, [sp, #16]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	dc20      	bgt.n	8006c40 <_dtoa_r+0x940>
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	dd1e      	ble.n	8006c44 <_dtoa_r+0x944>
 8006c06:	9b00      	ldr	r3, [sp, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f47f aec0 	bne.w	800698e <_dtoa_r+0x68e>
 8006c0e:	4621      	mov	r1, r4
 8006c10:	2205      	movs	r2, #5
 8006c12:	4658      	mov	r0, fp
 8006c14:	f000 fa9a 	bl	800714c <__multadd>
 8006c18:	4601      	mov	r1, r0
 8006c1a:	4604      	mov	r4, r0
 8006c1c:	4648      	mov	r0, r9
 8006c1e:	f000 fcad 	bl	800757c <__mcmp>
 8006c22:	2800      	cmp	r0, #0
 8006c24:	f77f aeb3 	ble.w	800698e <_dtoa_r+0x68e>
 8006c28:	4656      	mov	r6, sl
 8006c2a:	2331      	movs	r3, #49	@ 0x31
 8006c2c:	f806 3b01 	strb.w	r3, [r6], #1
 8006c30:	9b04      	ldr	r3, [sp, #16]
 8006c32:	3301      	adds	r3, #1
 8006c34:	9304      	str	r3, [sp, #16]
 8006c36:	e6ae      	b.n	8006996 <_dtoa_r+0x696>
 8006c38:	9c07      	ldr	r4, [sp, #28]
 8006c3a:	9704      	str	r7, [sp, #16]
 8006c3c:	4625      	mov	r5, r4
 8006c3e:	e7f3      	b.n	8006c28 <_dtoa_r+0x928>
 8006c40:	9b07      	ldr	r3, [sp, #28]
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f000 8104 	beq.w	8006e54 <_dtoa_r+0xb54>
 8006c4c:	2e00      	cmp	r6, #0
 8006c4e:	dd05      	ble.n	8006c5c <_dtoa_r+0x95c>
 8006c50:	4629      	mov	r1, r5
 8006c52:	4632      	mov	r2, r6
 8006c54:	4658      	mov	r0, fp
 8006c56:	f000 fc25 	bl	80074a4 <__lshift>
 8006c5a:	4605      	mov	r5, r0
 8006c5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d05a      	beq.n	8006d18 <_dtoa_r+0xa18>
 8006c62:	6869      	ldr	r1, [r5, #4]
 8006c64:	4658      	mov	r0, fp
 8006c66:	f000 fa0f 	bl	8007088 <_Balloc>
 8006c6a:	4606      	mov	r6, r0
 8006c6c:	b928      	cbnz	r0, 8006c7a <_dtoa_r+0x97a>
 8006c6e:	4b84      	ldr	r3, [pc, #528]	@ (8006e80 <_dtoa_r+0xb80>)
 8006c70:	4602      	mov	r2, r0
 8006c72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006c76:	f7ff bb5a 	b.w	800632e <_dtoa_r+0x2e>
 8006c7a:	692a      	ldr	r2, [r5, #16]
 8006c7c:	3202      	adds	r2, #2
 8006c7e:	0092      	lsls	r2, r2, #2
 8006c80:	f105 010c 	add.w	r1, r5, #12
 8006c84:	300c      	adds	r0, #12
 8006c86:	f7ff fa86 	bl	8006196 <memcpy>
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	4631      	mov	r1, r6
 8006c8e:	4658      	mov	r0, fp
 8006c90:	f000 fc08 	bl	80074a4 <__lshift>
 8006c94:	f10a 0301 	add.w	r3, sl, #1
 8006c98:	9307      	str	r3, [sp, #28]
 8006c9a:	9b00      	ldr	r3, [sp, #0]
 8006c9c:	4453      	add	r3, sl
 8006c9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ca0:	9b02      	ldr	r3, [sp, #8]
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	462f      	mov	r7, r5
 8006ca8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006caa:	4605      	mov	r5, r0
 8006cac:	9b07      	ldr	r3, [sp, #28]
 8006cae:	4621      	mov	r1, r4
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	4648      	mov	r0, r9
 8006cb4:	9300      	str	r3, [sp, #0]
 8006cb6:	f7ff fa9b 	bl	80061f0 <quorem>
 8006cba:	4639      	mov	r1, r7
 8006cbc:	9002      	str	r0, [sp, #8]
 8006cbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006cc2:	4648      	mov	r0, r9
 8006cc4:	f000 fc5a 	bl	800757c <__mcmp>
 8006cc8:	462a      	mov	r2, r5
 8006cca:	9008      	str	r0, [sp, #32]
 8006ccc:	4621      	mov	r1, r4
 8006cce:	4658      	mov	r0, fp
 8006cd0:	f000 fc70 	bl	80075b4 <__mdiff>
 8006cd4:	68c2      	ldr	r2, [r0, #12]
 8006cd6:	4606      	mov	r6, r0
 8006cd8:	bb02      	cbnz	r2, 8006d1c <_dtoa_r+0xa1c>
 8006cda:	4601      	mov	r1, r0
 8006cdc:	4648      	mov	r0, r9
 8006cde:	f000 fc4d 	bl	800757c <__mcmp>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	4631      	mov	r1, r6
 8006ce6:	4658      	mov	r0, fp
 8006ce8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006cea:	f000 fa0d 	bl	8007108 <_Bfree>
 8006cee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006cf2:	9e07      	ldr	r6, [sp, #28]
 8006cf4:	ea43 0102 	orr.w	r1, r3, r2
 8006cf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cfa:	4319      	orrs	r1, r3
 8006cfc:	d110      	bne.n	8006d20 <_dtoa_r+0xa20>
 8006cfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006d02:	d029      	beq.n	8006d58 <_dtoa_r+0xa58>
 8006d04:	9b08      	ldr	r3, [sp, #32]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	dd02      	ble.n	8006d10 <_dtoa_r+0xa10>
 8006d0a:	9b02      	ldr	r3, [sp, #8]
 8006d0c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006d10:	9b00      	ldr	r3, [sp, #0]
 8006d12:	f883 8000 	strb.w	r8, [r3]
 8006d16:	e63f      	b.n	8006998 <_dtoa_r+0x698>
 8006d18:	4628      	mov	r0, r5
 8006d1a:	e7bb      	b.n	8006c94 <_dtoa_r+0x994>
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	e7e1      	b.n	8006ce4 <_dtoa_r+0x9e4>
 8006d20:	9b08      	ldr	r3, [sp, #32]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	db04      	blt.n	8006d30 <_dtoa_r+0xa30>
 8006d26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d28:	430b      	orrs	r3, r1
 8006d2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006d2c:	430b      	orrs	r3, r1
 8006d2e:	d120      	bne.n	8006d72 <_dtoa_r+0xa72>
 8006d30:	2a00      	cmp	r2, #0
 8006d32:	dded      	ble.n	8006d10 <_dtoa_r+0xa10>
 8006d34:	4649      	mov	r1, r9
 8006d36:	2201      	movs	r2, #1
 8006d38:	4658      	mov	r0, fp
 8006d3a:	f000 fbb3 	bl	80074a4 <__lshift>
 8006d3e:	4621      	mov	r1, r4
 8006d40:	4681      	mov	r9, r0
 8006d42:	f000 fc1b 	bl	800757c <__mcmp>
 8006d46:	2800      	cmp	r0, #0
 8006d48:	dc03      	bgt.n	8006d52 <_dtoa_r+0xa52>
 8006d4a:	d1e1      	bne.n	8006d10 <_dtoa_r+0xa10>
 8006d4c:	f018 0f01 	tst.w	r8, #1
 8006d50:	d0de      	beq.n	8006d10 <_dtoa_r+0xa10>
 8006d52:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006d56:	d1d8      	bne.n	8006d0a <_dtoa_r+0xa0a>
 8006d58:	9a00      	ldr	r2, [sp, #0]
 8006d5a:	2339      	movs	r3, #57	@ 0x39
 8006d5c:	7013      	strb	r3, [r2, #0]
 8006d5e:	4633      	mov	r3, r6
 8006d60:	461e      	mov	r6, r3
 8006d62:	3b01      	subs	r3, #1
 8006d64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006d68:	2a39      	cmp	r2, #57	@ 0x39
 8006d6a:	d052      	beq.n	8006e12 <_dtoa_r+0xb12>
 8006d6c:	3201      	adds	r2, #1
 8006d6e:	701a      	strb	r2, [r3, #0]
 8006d70:	e612      	b.n	8006998 <_dtoa_r+0x698>
 8006d72:	2a00      	cmp	r2, #0
 8006d74:	dd07      	ble.n	8006d86 <_dtoa_r+0xa86>
 8006d76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006d7a:	d0ed      	beq.n	8006d58 <_dtoa_r+0xa58>
 8006d7c:	9a00      	ldr	r2, [sp, #0]
 8006d7e:	f108 0301 	add.w	r3, r8, #1
 8006d82:	7013      	strb	r3, [r2, #0]
 8006d84:	e608      	b.n	8006998 <_dtoa_r+0x698>
 8006d86:	9b07      	ldr	r3, [sp, #28]
 8006d88:	9a07      	ldr	r2, [sp, #28]
 8006d8a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006d8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d028      	beq.n	8006de6 <_dtoa_r+0xae6>
 8006d94:	4649      	mov	r1, r9
 8006d96:	2300      	movs	r3, #0
 8006d98:	220a      	movs	r2, #10
 8006d9a:	4658      	mov	r0, fp
 8006d9c:	f000 f9d6 	bl	800714c <__multadd>
 8006da0:	42af      	cmp	r7, r5
 8006da2:	4681      	mov	r9, r0
 8006da4:	f04f 0300 	mov.w	r3, #0
 8006da8:	f04f 020a 	mov.w	r2, #10
 8006dac:	4639      	mov	r1, r7
 8006dae:	4658      	mov	r0, fp
 8006db0:	d107      	bne.n	8006dc2 <_dtoa_r+0xac2>
 8006db2:	f000 f9cb 	bl	800714c <__multadd>
 8006db6:	4607      	mov	r7, r0
 8006db8:	4605      	mov	r5, r0
 8006dba:	9b07      	ldr	r3, [sp, #28]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	9307      	str	r3, [sp, #28]
 8006dc0:	e774      	b.n	8006cac <_dtoa_r+0x9ac>
 8006dc2:	f000 f9c3 	bl	800714c <__multadd>
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	4607      	mov	r7, r0
 8006dca:	2300      	movs	r3, #0
 8006dcc:	220a      	movs	r2, #10
 8006dce:	4658      	mov	r0, fp
 8006dd0:	f000 f9bc 	bl	800714c <__multadd>
 8006dd4:	4605      	mov	r5, r0
 8006dd6:	e7f0      	b.n	8006dba <_dtoa_r+0xaba>
 8006dd8:	9b00      	ldr	r3, [sp, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	bfcc      	ite	gt
 8006dde:	461e      	movgt	r6, r3
 8006de0:	2601      	movle	r6, #1
 8006de2:	4456      	add	r6, sl
 8006de4:	2700      	movs	r7, #0
 8006de6:	4649      	mov	r1, r9
 8006de8:	2201      	movs	r2, #1
 8006dea:	4658      	mov	r0, fp
 8006dec:	f000 fb5a 	bl	80074a4 <__lshift>
 8006df0:	4621      	mov	r1, r4
 8006df2:	4681      	mov	r9, r0
 8006df4:	f000 fbc2 	bl	800757c <__mcmp>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	dcb0      	bgt.n	8006d5e <_dtoa_r+0xa5e>
 8006dfc:	d102      	bne.n	8006e04 <_dtoa_r+0xb04>
 8006dfe:	f018 0f01 	tst.w	r8, #1
 8006e02:	d1ac      	bne.n	8006d5e <_dtoa_r+0xa5e>
 8006e04:	4633      	mov	r3, r6
 8006e06:	461e      	mov	r6, r3
 8006e08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e0c:	2a30      	cmp	r2, #48	@ 0x30
 8006e0e:	d0fa      	beq.n	8006e06 <_dtoa_r+0xb06>
 8006e10:	e5c2      	b.n	8006998 <_dtoa_r+0x698>
 8006e12:	459a      	cmp	sl, r3
 8006e14:	d1a4      	bne.n	8006d60 <_dtoa_r+0xa60>
 8006e16:	9b04      	ldr	r3, [sp, #16]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	9304      	str	r3, [sp, #16]
 8006e1c:	2331      	movs	r3, #49	@ 0x31
 8006e1e:	f88a 3000 	strb.w	r3, [sl]
 8006e22:	e5b9      	b.n	8006998 <_dtoa_r+0x698>
 8006e24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006e84 <_dtoa_r+0xb84>
 8006e2a:	b11b      	cbz	r3, 8006e34 <_dtoa_r+0xb34>
 8006e2c:	f10a 0308 	add.w	r3, sl, #8
 8006e30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006e32:	6013      	str	r3, [r2, #0]
 8006e34:	4650      	mov	r0, sl
 8006e36:	b019      	add	sp, #100	@ 0x64
 8006e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	f77f ae37 	ble.w	8006ab2 <_dtoa_r+0x7b2>
 8006e44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e46:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e48:	2001      	movs	r0, #1
 8006e4a:	e655      	b.n	8006af8 <_dtoa_r+0x7f8>
 8006e4c:	9b00      	ldr	r3, [sp, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f77f aed6 	ble.w	8006c00 <_dtoa_r+0x900>
 8006e54:	4656      	mov	r6, sl
 8006e56:	4621      	mov	r1, r4
 8006e58:	4648      	mov	r0, r9
 8006e5a:	f7ff f9c9 	bl	80061f0 <quorem>
 8006e5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006e62:	f806 8b01 	strb.w	r8, [r6], #1
 8006e66:	9b00      	ldr	r3, [sp, #0]
 8006e68:	eba6 020a 	sub.w	r2, r6, sl
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	ddb3      	ble.n	8006dd8 <_dtoa_r+0xad8>
 8006e70:	4649      	mov	r1, r9
 8006e72:	2300      	movs	r3, #0
 8006e74:	220a      	movs	r2, #10
 8006e76:	4658      	mov	r0, fp
 8006e78:	f000 f968 	bl	800714c <__multadd>
 8006e7c:	4681      	mov	r9, r0
 8006e7e:	e7ea      	b.n	8006e56 <_dtoa_r+0xb56>
 8006e80:	080088ba 	.word	0x080088ba
 8006e84:	08008855 	.word	0x08008855

08006e88 <_free_r>:
 8006e88:	b538      	push	{r3, r4, r5, lr}
 8006e8a:	4605      	mov	r5, r0
 8006e8c:	2900      	cmp	r1, #0
 8006e8e:	d041      	beq.n	8006f14 <_free_r+0x8c>
 8006e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e94:	1f0c      	subs	r4, r1, #4
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	bfb8      	it	lt
 8006e9a:	18e4      	addlt	r4, r4, r3
 8006e9c:	f000 f8e8 	bl	8007070 <__malloc_lock>
 8006ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8006f18 <_free_r+0x90>)
 8006ea2:	6813      	ldr	r3, [r2, #0]
 8006ea4:	b933      	cbnz	r3, 8006eb4 <_free_r+0x2c>
 8006ea6:	6063      	str	r3, [r4, #4]
 8006ea8:	6014      	str	r4, [r2, #0]
 8006eaa:	4628      	mov	r0, r5
 8006eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006eb0:	f000 b8e4 	b.w	800707c <__malloc_unlock>
 8006eb4:	42a3      	cmp	r3, r4
 8006eb6:	d908      	bls.n	8006eca <_free_r+0x42>
 8006eb8:	6820      	ldr	r0, [r4, #0]
 8006eba:	1821      	adds	r1, r4, r0
 8006ebc:	428b      	cmp	r3, r1
 8006ebe:	bf01      	itttt	eq
 8006ec0:	6819      	ldreq	r1, [r3, #0]
 8006ec2:	685b      	ldreq	r3, [r3, #4]
 8006ec4:	1809      	addeq	r1, r1, r0
 8006ec6:	6021      	streq	r1, [r4, #0]
 8006ec8:	e7ed      	b.n	8006ea6 <_free_r+0x1e>
 8006eca:	461a      	mov	r2, r3
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	b10b      	cbz	r3, 8006ed4 <_free_r+0x4c>
 8006ed0:	42a3      	cmp	r3, r4
 8006ed2:	d9fa      	bls.n	8006eca <_free_r+0x42>
 8006ed4:	6811      	ldr	r1, [r2, #0]
 8006ed6:	1850      	adds	r0, r2, r1
 8006ed8:	42a0      	cmp	r0, r4
 8006eda:	d10b      	bne.n	8006ef4 <_free_r+0x6c>
 8006edc:	6820      	ldr	r0, [r4, #0]
 8006ede:	4401      	add	r1, r0
 8006ee0:	1850      	adds	r0, r2, r1
 8006ee2:	4283      	cmp	r3, r0
 8006ee4:	6011      	str	r1, [r2, #0]
 8006ee6:	d1e0      	bne.n	8006eaa <_free_r+0x22>
 8006ee8:	6818      	ldr	r0, [r3, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	6053      	str	r3, [r2, #4]
 8006eee:	4408      	add	r0, r1
 8006ef0:	6010      	str	r0, [r2, #0]
 8006ef2:	e7da      	b.n	8006eaa <_free_r+0x22>
 8006ef4:	d902      	bls.n	8006efc <_free_r+0x74>
 8006ef6:	230c      	movs	r3, #12
 8006ef8:	602b      	str	r3, [r5, #0]
 8006efa:	e7d6      	b.n	8006eaa <_free_r+0x22>
 8006efc:	6820      	ldr	r0, [r4, #0]
 8006efe:	1821      	adds	r1, r4, r0
 8006f00:	428b      	cmp	r3, r1
 8006f02:	bf04      	itt	eq
 8006f04:	6819      	ldreq	r1, [r3, #0]
 8006f06:	685b      	ldreq	r3, [r3, #4]
 8006f08:	6063      	str	r3, [r4, #4]
 8006f0a:	bf04      	itt	eq
 8006f0c:	1809      	addeq	r1, r1, r0
 8006f0e:	6021      	streq	r1, [r4, #0]
 8006f10:	6054      	str	r4, [r2, #4]
 8006f12:	e7ca      	b.n	8006eaa <_free_r+0x22>
 8006f14:	bd38      	pop	{r3, r4, r5, pc}
 8006f16:	bf00      	nop
 8006f18:	20000d48 	.word	0x20000d48

08006f1c <malloc>:
 8006f1c:	4b02      	ldr	r3, [pc, #8]	@ (8006f28 <malloc+0xc>)
 8006f1e:	4601      	mov	r1, r0
 8006f20:	6818      	ldr	r0, [r3, #0]
 8006f22:	f000 b825 	b.w	8006f70 <_malloc_r>
 8006f26:	bf00      	nop
 8006f28:	20000018 	.word	0x20000018

08006f2c <sbrk_aligned>:
 8006f2c:	b570      	push	{r4, r5, r6, lr}
 8006f2e:	4e0f      	ldr	r6, [pc, #60]	@ (8006f6c <sbrk_aligned+0x40>)
 8006f30:	460c      	mov	r4, r1
 8006f32:	6831      	ldr	r1, [r6, #0]
 8006f34:	4605      	mov	r5, r0
 8006f36:	b911      	cbnz	r1, 8006f3e <sbrk_aligned+0x12>
 8006f38:	f001 f852 	bl	8007fe0 <_sbrk_r>
 8006f3c:	6030      	str	r0, [r6, #0]
 8006f3e:	4621      	mov	r1, r4
 8006f40:	4628      	mov	r0, r5
 8006f42:	f001 f84d 	bl	8007fe0 <_sbrk_r>
 8006f46:	1c43      	adds	r3, r0, #1
 8006f48:	d103      	bne.n	8006f52 <sbrk_aligned+0x26>
 8006f4a:	f04f 34ff 	mov.w	r4, #4294967295
 8006f4e:	4620      	mov	r0, r4
 8006f50:	bd70      	pop	{r4, r5, r6, pc}
 8006f52:	1cc4      	adds	r4, r0, #3
 8006f54:	f024 0403 	bic.w	r4, r4, #3
 8006f58:	42a0      	cmp	r0, r4
 8006f5a:	d0f8      	beq.n	8006f4e <sbrk_aligned+0x22>
 8006f5c:	1a21      	subs	r1, r4, r0
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f001 f83e 	bl	8007fe0 <_sbrk_r>
 8006f64:	3001      	adds	r0, #1
 8006f66:	d1f2      	bne.n	8006f4e <sbrk_aligned+0x22>
 8006f68:	e7ef      	b.n	8006f4a <sbrk_aligned+0x1e>
 8006f6a:	bf00      	nop
 8006f6c:	20000d44 	.word	0x20000d44

08006f70 <_malloc_r>:
 8006f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f74:	1ccd      	adds	r5, r1, #3
 8006f76:	f025 0503 	bic.w	r5, r5, #3
 8006f7a:	3508      	adds	r5, #8
 8006f7c:	2d0c      	cmp	r5, #12
 8006f7e:	bf38      	it	cc
 8006f80:	250c      	movcc	r5, #12
 8006f82:	2d00      	cmp	r5, #0
 8006f84:	4606      	mov	r6, r0
 8006f86:	db01      	blt.n	8006f8c <_malloc_r+0x1c>
 8006f88:	42a9      	cmp	r1, r5
 8006f8a:	d904      	bls.n	8006f96 <_malloc_r+0x26>
 8006f8c:	230c      	movs	r3, #12
 8006f8e:	6033      	str	r3, [r6, #0]
 8006f90:	2000      	movs	r0, #0
 8006f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800706c <_malloc_r+0xfc>
 8006f9a:	f000 f869 	bl	8007070 <__malloc_lock>
 8006f9e:	f8d8 3000 	ldr.w	r3, [r8]
 8006fa2:	461c      	mov	r4, r3
 8006fa4:	bb44      	cbnz	r4, 8006ff8 <_malloc_r+0x88>
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	4630      	mov	r0, r6
 8006faa:	f7ff ffbf 	bl	8006f2c <sbrk_aligned>
 8006fae:	1c43      	adds	r3, r0, #1
 8006fb0:	4604      	mov	r4, r0
 8006fb2:	d158      	bne.n	8007066 <_malloc_r+0xf6>
 8006fb4:	f8d8 4000 	ldr.w	r4, [r8]
 8006fb8:	4627      	mov	r7, r4
 8006fba:	2f00      	cmp	r7, #0
 8006fbc:	d143      	bne.n	8007046 <_malloc_r+0xd6>
 8006fbe:	2c00      	cmp	r4, #0
 8006fc0:	d04b      	beq.n	800705a <_malloc_r+0xea>
 8006fc2:	6823      	ldr	r3, [r4, #0]
 8006fc4:	4639      	mov	r1, r7
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	eb04 0903 	add.w	r9, r4, r3
 8006fcc:	f001 f808 	bl	8007fe0 <_sbrk_r>
 8006fd0:	4581      	cmp	r9, r0
 8006fd2:	d142      	bne.n	800705a <_malloc_r+0xea>
 8006fd4:	6821      	ldr	r1, [r4, #0]
 8006fd6:	1a6d      	subs	r5, r5, r1
 8006fd8:	4629      	mov	r1, r5
 8006fda:	4630      	mov	r0, r6
 8006fdc:	f7ff ffa6 	bl	8006f2c <sbrk_aligned>
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	d03a      	beq.n	800705a <_malloc_r+0xea>
 8006fe4:	6823      	ldr	r3, [r4, #0]
 8006fe6:	442b      	add	r3, r5
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	f8d8 3000 	ldr.w	r3, [r8]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	bb62      	cbnz	r2, 800704c <_malloc_r+0xdc>
 8006ff2:	f8c8 7000 	str.w	r7, [r8]
 8006ff6:	e00f      	b.n	8007018 <_malloc_r+0xa8>
 8006ff8:	6822      	ldr	r2, [r4, #0]
 8006ffa:	1b52      	subs	r2, r2, r5
 8006ffc:	d420      	bmi.n	8007040 <_malloc_r+0xd0>
 8006ffe:	2a0b      	cmp	r2, #11
 8007000:	d917      	bls.n	8007032 <_malloc_r+0xc2>
 8007002:	1961      	adds	r1, r4, r5
 8007004:	42a3      	cmp	r3, r4
 8007006:	6025      	str	r5, [r4, #0]
 8007008:	bf18      	it	ne
 800700a:	6059      	strne	r1, [r3, #4]
 800700c:	6863      	ldr	r3, [r4, #4]
 800700e:	bf08      	it	eq
 8007010:	f8c8 1000 	streq.w	r1, [r8]
 8007014:	5162      	str	r2, [r4, r5]
 8007016:	604b      	str	r3, [r1, #4]
 8007018:	4630      	mov	r0, r6
 800701a:	f000 f82f 	bl	800707c <__malloc_unlock>
 800701e:	f104 000b 	add.w	r0, r4, #11
 8007022:	1d23      	adds	r3, r4, #4
 8007024:	f020 0007 	bic.w	r0, r0, #7
 8007028:	1ac2      	subs	r2, r0, r3
 800702a:	bf1c      	itt	ne
 800702c:	1a1b      	subne	r3, r3, r0
 800702e:	50a3      	strne	r3, [r4, r2]
 8007030:	e7af      	b.n	8006f92 <_malloc_r+0x22>
 8007032:	6862      	ldr	r2, [r4, #4]
 8007034:	42a3      	cmp	r3, r4
 8007036:	bf0c      	ite	eq
 8007038:	f8c8 2000 	streq.w	r2, [r8]
 800703c:	605a      	strne	r2, [r3, #4]
 800703e:	e7eb      	b.n	8007018 <_malloc_r+0xa8>
 8007040:	4623      	mov	r3, r4
 8007042:	6864      	ldr	r4, [r4, #4]
 8007044:	e7ae      	b.n	8006fa4 <_malloc_r+0x34>
 8007046:	463c      	mov	r4, r7
 8007048:	687f      	ldr	r7, [r7, #4]
 800704a:	e7b6      	b.n	8006fba <_malloc_r+0x4a>
 800704c:	461a      	mov	r2, r3
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	42a3      	cmp	r3, r4
 8007052:	d1fb      	bne.n	800704c <_malloc_r+0xdc>
 8007054:	2300      	movs	r3, #0
 8007056:	6053      	str	r3, [r2, #4]
 8007058:	e7de      	b.n	8007018 <_malloc_r+0xa8>
 800705a:	230c      	movs	r3, #12
 800705c:	6033      	str	r3, [r6, #0]
 800705e:	4630      	mov	r0, r6
 8007060:	f000 f80c 	bl	800707c <__malloc_unlock>
 8007064:	e794      	b.n	8006f90 <_malloc_r+0x20>
 8007066:	6005      	str	r5, [r0, #0]
 8007068:	e7d6      	b.n	8007018 <_malloc_r+0xa8>
 800706a:	bf00      	nop
 800706c:	20000d48 	.word	0x20000d48

08007070 <__malloc_lock>:
 8007070:	4801      	ldr	r0, [pc, #4]	@ (8007078 <__malloc_lock+0x8>)
 8007072:	f7ff b886 	b.w	8006182 <__retarget_lock_acquire_recursive>
 8007076:	bf00      	nop
 8007078:	20000d40 	.word	0x20000d40

0800707c <__malloc_unlock>:
 800707c:	4801      	ldr	r0, [pc, #4]	@ (8007084 <__malloc_unlock+0x8>)
 800707e:	f7ff b881 	b.w	8006184 <__retarget_lock_release_recursive>
 8007082:	bf00      	nop
 8007084:	20000d40 	.word	0x20000d40

08007088 <_Balloc>:
 8007088:	b570      	push	{r4, r5, r6, lr}
 800708a:	69c6      	ldr	r6, [r0, #28]
 800708c:	4604      	mov	r4, r0
 800708e:	460d      	mov	r5, r1
 8007090:	b976      	cbnz	r6, 80070b0 <_Balloc+0x28>
 8007092:	2010      	movs	r0, #16
 8007094:	f7ff ff42 	bl	8006f1c <malloc>
 8007098:	4602      	mov	r2, r0
 800709a:	61e0      	str	r0, [r4, #28]
 800709c:	b920      	cbnz	r0, 80070a8 <_Balloc+0x20>
 800709e:	4b18      	ldr	r3, [pc, #96]	@ (8007100 <_Balloc+0x78>)
 80070a0:	4818      	ldr	r0, [pc, #96]	@ (8007104 <_Balloc+0x7c>)
 80070a2:	216b      	movs	r1, #107	@ 0x6b
 80070a4:	f7ff f886 	bl	80061b4 <__assert_func>
 80070a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070ac:	6006      	str	r6, [r0, #0]
 80070ae:	60c6      	str	r6, [r0, #12]
 80070b0:	69e6      	ldr	r6, [r4, #28]
 80070b2:	68f3      	ldr	r3, [r6, #12]
 80070b4:	b183      	cbz	r3, 80070d8 <_Balloc+0x50>
 80070b6:	69e3      	ldr	r3, [r4, #28]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070be:	b9b8      	cbnz	r0, 80070f0 <_Balloc+0x68>
 80070c0:	2101      	movs	r1, #1
 80070c2:	fa01 f605 	lsl.w	r6, r1, r5
 80070c6:	1d72      	adds	r2, r6, #5
 80070c8:	0092      	lsls	r2, r2, #2
 80070ca:	4620      	mov	r0, r4
 80070cc:	f000 ff9f 	bl	800800e <_calloc_r>
 80070d0:	b160      	cbz	r0, 80070ec <_Balloc+0x64>
 80070d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070d6:	e00e      	b.n	80070f6 <_Balloc+0x6e>
 80070d8:	2221      	movs	r2, #33	@ 0x21
 80070da:	2104      	movs	r1, #4
 80070dc:	4620      	mov	r0, r4
 80070de:	f000 ff96 	bl	800800e <_calloc_r>
 80070e2:	69e3      	ldr	r3, [r4, #28]
 80070e4:	60f0      	str	r0, [r6, #12]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e4      	bne.n	80070b6 <_Balloc+0x2e>
 80070ec:	2000      	movs	r0, #0
 80070ee:	bd70      	pop	{r4, r5, r6, pc}
 80070f0:	6802      	ldr	r2, [r0, #0]
 80070f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80070f6:	2300      	movs	r3, #0
 80070f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80070fc:	e7f7      	b.n	80070ee <_Balloc+0x66>
 80070fe:	bf00      	nop
 8007100:	080087a8 	.word	0x080087a8
 8007104:	080088cb 	.word	0x080088cb

08007108 <_Bfree>:
 8007108:	b570      	push	{r4, r5, r6, lr}
 800710a:	69c6      	ldr	r6, [r0, #28]
 800710c:	4605      	mov	r5, r0
 800710e:	460c      	mov	r4, r1
 8007110:	b976      	cbnz	r6, 8007130 <_Bfree+0x28>
 8007112:	2010      	movs	r0, #16
 8007114:	f7ff ff02 	bl	8006f1c <malloc>
 8007118:	4602      	mov	r2, r0
 800711a:	61e8      	str	r0, [r5, #28]
 800711c:	b920      	cbnz	r0, 8007128 <_Bfree+0x20>
 800711e:	4b09      	ldr	r3, [pc, #36]	@ (8007144 <_Bfree+0x3c>)
 8007120:	4809      	ldr	r0, [pc, #36]	@ (8007148 <_Bfree+0x40>)
 8007122:	218f      	movs	r1, #143	@ 0x8f
 8007124:	f7ff f846 	bl	80061b4 <__assert_func>
 8007128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800712c:	6006      	str	r6, [r0, #0]
 800712e:	60c6      	str	r6, [r0, #12]
 8007130:	b13c      	cbz	r4, 8007142 <_Bfree+0x3a>
 8007132:	69eb      	ldr	r3, [r5, #28]
 8007134:	6862      	ldr	r2, [r4, #4]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800713c:	6021      	str	r1, [r4, #0]
 800713e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007142:	bd70      	pop	{r4, r5, r6, pc}
 8007144:	080087a8 	.word	0x080087a8
 8007148:	080088cb 	.word	0x080088cb

0800714c <__multadd>:
 800714c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007150:	690d      	ldr	r5, [r1, #16]
 8007152:	4607      	mov	r7, r0
 8007154:	460c      	mov	r4, r1
 8007156:	461e      	mov	r6, r3
 8007158:	f101 0c14 	add.w	ip, r1, #20
 800715c:	2000      	movs	r0, #0
 800715e:	f8dc 3000 	ldr.w	r3, [ip]
 8007162:	b299      	uxth	r1, r3
 8007164:	fb02 6101 	mla	r1, r2, r1, r6
 8007168:	0c1e      	lsrs	r6, r3, #16
 800716a:	0c0b      	lsrs	r3, r1, #16
 800716c:	fb02 3306 	mla	r3, r2, r6, r3
 8007170:	b289      	uxth	r1, r1
 8007172:	3001      	adds	r0, #1
 8007174:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007178:	4285      	cmp	r5, r0
 800717a:	f84c 1b04 	str.w	r1, [ip], #4
 800717e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007182:	dcec      	bgt.n	800715e <__multadd+0x12>
 8007184:	b30e      	cbz	r6, 80071ca <__multadd+0x7e>
 8007186:	68a3      	ldr	r3, [r4, #8]
 8007188:	42ab      	cmp	r3, r5
 800718a:	dc19      	bgt.n	80071c0 <__multadd+0x74>
 800718c:	6861      	ldr	r1, [r4, #4]
 800718e:	4638      	mov	r0, r7
 8007190:	3101      	adds	r1, #1
 8007192:	f7ff ff79 	bl	8007088 <_Balloc>
 8007196:	4680      	mov	r8, r0
 8007198:	b928      	cbnz	r0, 80071a6 <__multadd+0x5a>
 800719a:	4602      	mov	r2, r0
 800719c:	4b0c      	ldr	r3, [pc, #48]	@ (80071d0 <__multadd+0x84>)
 800719e:	480d      	ldr	r0, [pc, #52]	@ (80071d4 <__multadd+0x88>)
 80071a0:	21ba      	movs	r1, #186	@ 0xba
 80071a2:	f7ff f807 	bl	80061b4 <__assert_func>
 80071a6:	6922      	ldr	r2, [r4, #16]
 80071a8:	3202      	adds	r2, #2
 80071aa:	f104 010c 	add.w	r1, r4, #12
 80071ae:	0092      	lsls	r2, r2, #2
 80071b0:	300c      	adds	r0, #12
 80071b2:	f7fe fff0 	bl	8006196 <memcpy>
 80071b6:	4621      	mov	r1, r4
 80071b8:	4638      	mov	r0, r7
 80071ba:	f7ff ffa5 	bl	8007108 <_Bfree>
 80071be:	4644      	mov	r4, r8
 80071c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071c4:	3501      	adds	r5, #1
 80071c6:	615e      	str	r6, [r3, #20]
 80071c8:	6125      	str	r5, [r4, #16]
 80071ca:	4620      	mov	r0, r4
 80071cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071d0:	080088ba 	.word	0x080088ba
 80071d4:	080088cb 	.word	0x080088cb

080071d8 <__hi0bits>:
 80071d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80071dc:	4603      	mov	r3, r0
 80071de:	bf36      	itet	cc
 80071e0:	0403      	lslcc	r3, r0, #16
 80071e2:	2000      	movcs	r0, #0
 80071e4:	2010      	movcc	r0, #16
 80071e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071ea:	bf3c      	itt	cc
 80071ec:	021b      	lslcc	r3, r3, #8
 80071ee:	3008      	addcc	r0, #8
 80071f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071f4:	bf3c      	itt	cc
 80071f6:	011b      	lslcc	r3, r3, #4
 80071f8:	3004      	addcc	r0, #4
 80071fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071fe:	bf3c      	itt	cc
 8007200:	009b      	lslcc	r3, r3, #2
 8007202:	3002      	addcc	r0, #2
 8007204:	2b00      	cmp	r3, #0
 8007206:	db05      	blt.n	8007214 <__hi0bits+0x3c>
 8007208:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800720c:	f100 0001 	add.w	r0, r0, #1
 8007210:	bf08      	it	eq
 8007212:	2020      	moveq	r0, #32
 8007214:	4770      	bx	lr

08007216 <__lo0bits>:
 8007216:	6803      	ldr	r3, [r0, #0]
 8007218:	4602      	mov	r2, r0
 800721a:	f013 0007 	ands.w	r0, r3, #7
 800721e:	d00b      	beq.n	8007238 <__lo0bits+0x22>
 8007220:	07d9      	lsls	r1, r3, #31
 8007222:	d421      	bmi.n	8007268 <__lo0bits+0x52>
 8007224:	0798      	lsls	r0, r3, #30
 8007226:	bf49      	itett	mi
 8007228:	085b      	lsrmi	r3, r3, #1
 800722a:	089b      	lsrpl	r3, r3, #2
 800722c:	2001      	movmi	r0, #1
 800722e:	6013      	strmi	r3, [r2, #0]
 8007230:	bf5c      	itt	pl
 8007232:	6013      	strpl	r3, [r2, #0]
 8007234:	2002      	movpl	r0, #2
 8007236:	4770      	bx	lr
 8007238:	b299      	uxth	r1, r3
 800723a:	b909      	cbnz	r1, 8007240 <__lo0bits+0x2a>
 800723c:	0c1b      	lsrs	r3, r3, #16
 800723e:	2010      	movs	r0, #16
 8007240:	b2d9      	uxtb	r1, r3
 8007242:	b909      	cbnz	r1, 8007248 <__lo0bits+0x32>
 8007244:	3008      	adds	r0, #8
 8007246:	0a1b      	lsrs	r3, r3, #8
 8007248:	0719      	lsls	r1, r3, #28
 800724a:	bf04      	itt	eq
 800724c:	091b      	lsreq	r3, r3, #4
 800724e:	3004      	addeq	r0, #4
 8007250:	0799      	lsls	r1, r3, #30
 8007252:	bf04      	itt	eq
 8007254:	089b      	lsreq	r3, r3, #2
 8007256:	3002      	addeq	r0, #2
 8007258:	07d9      	lsls	r1, r3, #31
 800725a:	d403      	bmi.n	8007264 <__lo0bits+0x4e>
 800725c:	085b      	lsrs	r3, r3, #1
 800725e:	f100 0001 	add.w	r0, r0, #1
 8007262:	d003      	beq.n	800726c <__lo0bits+0x56>
 8007264:	6013      	str	r3, [r2, #0]
 8007266:	4770      	bx	lr
 8007268:	2000      	movs	r0, #0
 800726a:	4770      	bx	lr
 800726c:	2020      	movs	r0, #32
 800726e:	4770      	bx	lr

08007270 <__i2b>:
 8007270:	b510      	push	{r4, lr}
 8007272:	460c      	mov	r4, r1
 8007274:	2101      	movs	r1, #1
 8007276:	f7ff ff07 	bl	8007088 <_Balloc>
 800727a:	4602      	mov	r2, r0
 800727c:	b928      	cbnz	r0, 800728a <__i2b+0x1a>
 800727e:	4b05      	ldr	r3, [pc, #20]	@ (8007294 <__i2b+0x24>)
 8007280:	4805      	ldr	r0, [pc, #20]	@ (8007298 <__i2b+0x28>)
 8007282:	f240 1145 	movw	r1, #325	@ 0x145
 8007286:	f7fe ff95 	bl	80061b4 <__assert_func>
 800728a:	2301      	movs	r3, #1
 800728c:	6144      	str	r4, [r0, #20]
 800728e:	6103      	str	r3, [r0, #16]
 8007290:	bd10      	pop	{r4, pc}
 8007292:	bf00      	nop
 8007294:	080088ba 	.word	0x080088ba
 8007298:	080088cb 	.word	0x080088cb

0800729c <__multiply>:
 800729c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a0:	4614      	mov	r4, r2
 80072a2:	690a      	ldr	r2, [r1, #16]
 80072a4:	6923      	ldr	r3, [r4, #16]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	bfa8      	it	ge
 80072aa:	4623      	movge	r3, r4
 80072ac:	460f      	mov	r7, r1
 80072ae:	bfa4      	itt	ge
 80072b0:	460c      	movge	r4, r1
 80072b2:	461f      	movge	r7, r3
 80072b4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80072b8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80072bc:	68a3      	ldr	r3, [r4, #8]
 80072be:	6861      	ldr	r1, [r4, #4]
 80072c0:	eb0a 0609 	add.w	r6, sl, r9
 80072c4:	42b3      	cmp	r3, r6
 80072c6:	b085      	sub	sp, #20
 80072c8:	bfb8      	it	lt
 80072ca:	3101      	addlt	r1, #1
 80072cc:	f7ff fedc 	bl	8007088 <_Balloc>
 80072d0:	b930      	cbnz	r0, 80072e0 <__multiply+0x44>
 80072d2:	4602      	mov	r2, r0
 80072d4:	4b44      	ldr	r3, [pc, #272]	@ (80073e8 <__multiply+0x14c>)
 80072d6:	4845      	ldr	r0, [pc, #276]	@ (80073ec <__multiply+0x150>)
 80072d8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80072dc:	f7fe ff6a 	bl	80061b4 <__assert_func>
 80072e0:	f100 0514 	add.w	r5, r0, #20
 80072e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80072e8:	462b      	mov	r3, r5
 80072ea:	2200      	movs	r2, #0
 80072ec:	4543      	cmp	r3, r8
 80072ee:	d321      	bcc.n	8007334 <__multiply+0x98>
 80072f0:	f107 0114 	add.w	r1, r7, #20
 80072f4:	f104 0214 	add.w	r2, r4, #20
 80072f8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80072fc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007300:	9302      	str	r3, [sp, #8]
 8007302:	1b13      	subs	r3, r2, r4
 8007304:	3b15      	subs	r3, #21
 8007306:	f023 0303 	bic.w	r3, r3, #3
 800730a:	3304      	adds	r3, #4
 800730c:	f104 0715 	add.w	r7, r4, #21
 8007310:	42ba      	cmp	r2, r7
 8007312:	bf38      	it	cc
 8007314:	2304      	movcc	r3, #4
 8007316:	9301      	str	r3, [sp, #4]
 8007318:	9b02      	ldr	r3, [sp, #8]
 800731a:	9103      	str	r1, [sp, #12]
 800731c:	428b      	cmp	r3, r1
 800731e:	d80c      	bhi.n	800733a <__multiply+0x9e>
 8007320:	2e00      	cmp	r6, #0
 8007322:	dd03      	ble.n	800732c <__multiply+0x90>
 8007324:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007328:	2b00      	cmp	r3, #0
 800732a:	d05b      	beq.n	80073e4 <__multiply+0x148>
 800732c:	6106      	str	r6, [r0, #16]
 800732e:	b005      	add	sp, #20
 8007330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007334:	f843 2b04 	str.w	r2, [r3], #4
 8007338:	e7d8      	b.n	80072ec <__multiply+0x50>
 800733a:	f8b1 a000 	ldrh.w	sl, [r1]
 800733e:	f1ba 0f00 	cmp.w	sl, #0
 8007342:	d024      	beq.n	800738e <__multiply+0xf2>
 8007344:	f104 0e14 	add.w	lr, r4, #20
 8007348:	46a9      	mov	r9, r5
 800734a:	f04f 0c00 	mov.w	ip, #0
 800734e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007352:	f8d9 3000 	ldr.w	r3, [r9]
 8007356:	fa1f fb87 	uxth.w	fp, r7
 800735a:	b29b      	uxth	r3, r3
 800735c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007360:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007364:	f8d9 7000 	ldr.w	r7, [r9]
 8007368:	4463      	add	r3, ip
 800736a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800736e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007372:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007376:	b29b      	uxth	r3, r3
 8007378:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800737c:	4572      	cmp	r2, lr
 800737e:	f849 3b04 	str.w	r3, [r9], #4
 8007382:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007386:	d8e2      	bhi.n	800734e <__multiply+0xb2>
 8007388:	9b01      	ldr	r3, [sp, #4]
 800738a:	f845 c003 	str.w	ip, [r5, r3]
 800738e:	9b03      	ldr	r3, [sp, #12]
 8007390:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007394:	3104      	adds	r1, #4
 8007396:	f1b9 0f00 	cmp.w	r9, #0
 800739a:	d021      	beq.n	80073e0 <__multiply+0x144>
 800739c:	682b      	ldr	r3, [r5, #0]
 800739e:	f104 0c14 	add.w	ip, r4, #20
 80073a2:	46ae      	mov	lr, r5
 80073a4:	f04f 0a00 	mov.w	sl, #0
 80073a8:	f8bc b000 	ldrh.w	fp, [ip]
 80073ac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80073b0:	fb09 770b 	mla	r7, r9, fp, r7
 80073b4:	4457      	add	r7, sl
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80073bc:	f84e 3b04 	str.w	r3, [lr], #4
 80073c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80073c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80073c8:	f8be 3000 	ldrh.w	r3, [lr]
 80073cc:	fb09 330a 	mla	r3, r9, sl, r3
 80073d0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80073d4:	4562      	cmp	r2, ip
 80073d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80073da:	d8e5      	bhi.n	80073a8 <__multiply+0x10c>
 80073dc:	9f01      	ldr	r7, [sp, #4]
 80073de:	51eb      	str	r3, [r5, r7]
 80073e0:	3504      	adds	r5, #4
 80073e2:	e799      	b.n	8007318 <__multiply+0x7c>
 80073e4:	3e01      	subs	r6, #1
 80073e6:	e79b      	b.n	8007320 <__multiply+0x84>
 80073e8:	080088ba 	.word	0x080088ba
 80073ec:	080088cb 	.word	0x080088cb

080073f0 <__pow5mult>:
 80073f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073f4:	4615      	mov	r5, r2
 80073f6:	f012 0203 	ands.w	r2, r2, #3
 80073fa:	4607      	mov	r7, r0
 80073fc:	460e      	mov	r6, r1
 80073fe:	d007      	beq.n	8007410 <__pow5mult+0x20>
 8007400:	4c25      	ldr	r4, [pc, #148]	@ (8007498 <__pow5mult+0xa8>)
 8007402:	3a01      	subs	r2, #1
 8007404:	2300      	movs	r3, #0
 8007406:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800740a:	f7ff fe9f 	bl	800714c <__multadd>
 800740e:	4606      	mov	r6, r0
 8007410:	10ad      	asrs	r5, r5, #2
 8007412:	d03d      	beq.n	8007490 <__pow5mult+0xa0>
 8007414:	69fc      	ldr	r4, [r7, #28]
 8007416:	b97c      	cbnz	r4, 8007438 <__pow5mult+0x48>
 8007418:	2010      	movs	r0, #16
 800741a:	f7ff fd7f 	bl	8006f1c <malloc>
 800741e:	4602      	mov	r2, r0
 8007420:	61f8      	str	r0, [r7, #28]
 8007422:	b928      	cbnz	r0, 8007430 <__pow5mult+0x40>
 8007424:	4b1d      	ldr	r3, [pc, #116]	@ (800749c <__pow5mult+0xac>)
 8007426:	481e      	ldr	r0, [pc, #120]	@ (80074a0 <__pow5mult+0xb0>)
 8007428:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800742c:	f7fe fec2 	bl	80061b4 <__assert_func>
 8007430:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007434:	6004      	str	r4, [r0, #0]
 8007436:	60c4      	str	r4, [r0, #12]
 8007438:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800743c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007440:	b94c      	cbnz	r4, 8007456 <__pow5mult+0x66>
 8007442:	f240 2171 	movw	r1, #625	@ 0x271
 8007446:	4638      	mov	r0, r7
 8007448:	f7ff ff12 	bl	8007270 <__i2b>
 800744c:	2300      	movs	r3, #0
 800744e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007452:	4604      	mov	r4, r0
 8007454:	6003      	str	r3, [r0, #0]
 8007456:	f04f 0900 	mov.w	r9, #0
 800745a:	07eb      	lsls	r3, r5, #31
 800745c:	d50a      	bpl.n	8007474 <__pow5mult+0x84>
 800745e:	4631      	mov	r1, r6
 8007460:	4622      	mov	r2, r4
 8007462:	4638      	mov	r0, r7
 8007464:	f7ff ff1a 	bl	800729c <__multiply>
 8007468:	4631      	mov	r1, r6
 800746a:	4680      	mov	r8, r0
 800746c:	4638      	mov	r0, r7
 800746e:	f7ff fe4b 	bl	8007108 <_Bfree>
 8007472:	4646      	mov	r6, r8
 8007474:	106d      	asrs	r5, r5, #1
 8007476:	d00b      	beq.n	8007490 <__pow5mult+0xa0>
 8007478:	6820      	ldr	r0, [r4, #0]
 800747a:	b938      	cbnz	r0, 800748c <__pow5mult+0x9c>
 800747c:	4622      	mov	r2, r4
 800747e:	4621      	mov	r1, r4
 8007480:	4638      	mov	r0, r7
 8007482:	f7ff ff0b 	bl	800729c <__multiply>
 8007486:	6020      	str	r0, [r4, #0]
 8007488:	f8c0 9000 	str.w	r9, [r0]
 800748c:	4604      	mov	r4, r0
 800748e:	e7e4      	b.n	800745a <__pow5mult+0x6a>
 8007490:	4630      	mov	r0, r6
 8007492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007496:	bf00      	nop
 8007498:	08008924 	.word	0x08008924
 800749c:	080087a8 	.word	0x080087a8
 80074a0:	080088cb 	.word	0x080088cb

080074a4 <__lshift>:
 80074a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074a8:	460c      	mov	r4, r1
 80074aa:	6849      	ldr	r1, [r1, #4]
 80074ac:	6923      	ldr	r3, [r4, #16]
 80074ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074b2:	68a3      	ldr	r3, [r4, #8]
 80074b4:	4607      	mov	r7, r0
 80074b6:	4691      	mov	r9, r2
 80074b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074bc:	f108 0601 	add.w	r6, r8, #1
 80074c0:	42b3      	cmp	r3, r6
 80074c2:	db0b      	blt.n	80074dc <__lshift+0x38>
 80074c4:	4638      	mov	r0, r7
 80074c6:	f7ff fddf 	bl	8007088 <_Balloc>
 80074ca:	4605      	mov	r5, r0
 80074cc:	b948      	cbnz	r0, 80074e2 <__lshift+0x3e>
 80074ce:	4602      	mov	r2, r0
 80074d0:	4b28      	ldr	r3, [pc, #160]	@ (8007574 <__lshift+0xd0>)
 80074d2:	4829      	ldr	r0, [pc, #164]	@ (8007578 <__lshift+0xd4>)
 80074d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80074d8:	f7fe fe6c 	bl	80061b4 <__assert_func>
 80074dc:	3101      	adds	r1, #1
 80074de:	005b      	lsls	r3, r3, #1
 80074e0:	e7ee      	b.n	80074c0 <__lshift+0x1c>
 80074e2:	2300      	movs	r3, #0
 80074e4:	f100 0114 	add.w	r1, r0, #20
 80074e8:	f100 0210 	add.w	r2, r0, #16
 80074ec:	4618      	mov	r0, r3
 80074ee:	4553      	cmp	r3, sl
 80074f0:	db33      	blt.n	800755a <__lshift+0xb6>
 80074f2:	6920      	ldr	r0, [r4, #16]
 80074f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074f8:	f104 0314 	add.w	r3, r4, #20
 80074fc:	f019 091f 	ands.w	r9, r9, #31
 8007500:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007504:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007508:	d02b      	beq.n	8007562 <__lshift+0xbe>
 800750a:	f1c9 0e20 	rsb	lr, r9, #32
 800750e:	468a      	mov	sl, r1
 8007510:	2200      	movs	r2, #0
 8007512:	6818      	ldr	r0, [r3, #0]
 8007514:	fa00 f009 	lsl.w	r0, r0, r9
 8007518:	4310      	orrs	r0, r2
 800751a:	f84a 0b04 	str.w	r0, [sl], #4
 800751e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007522:	459c      	cmp	ip, r3
 8007524:	fa22 f20e 	lsr.w	r2, r2, lr
 8007528:	d8f3      	bhi.n	8007512 <__lshift+0x6e>
 800752a:	ebac 0304 	sub.w	r3, ip, r4
 800752e:	3b15      	subs	r3, #21
 8007530:	f023 0303 	bic.w	r3, r3, #3
 8007534:	3304      	adds	r3, #4
 8007536:	f104 0015 	add.w	r0, r4, #21
 800753a:	4584      	cmp	ip, r0
 800753c:	bf38      	it	cc
 800753e:	2304      	movcc	r3, #4
 8007540:	50ca      	str	r2, [r1, r3]
 8007542:	b10a      	cbz	r2, 8007548 <__lshift+0xa4>
 8007544:	f108 0602 	add.w	r6, r8, #2
 8007548:	3e01      	subs	r6, #1
 800754a:	4638      	mov	r0, r7
 800754c:	612e      	str	r6, [r5, #16]
 800754e:	4621      	mov	r1, r4
 8007550:	f7ff fdda 	bl	8007108 <_Bfree>
 8007554:	4628      	mov	r0, r5
 8007556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800755a:	f842 0f04 	str.w	r0, [r2, #4]!
 800755e:	3301      	adds	r3, #1
 8007560:	e7c5      	b.n	80074ee <__lshift+0x4a>
 8007562:	3904      	subs	r1, #4
 8007564:	f853 2b04 	ldr.w	r2, [r3], #4
 8007568:	f841 2f04 	str.w	r2, [r1, #4]!
 800756c:	459c      	cmp	ip, r3
 800756e:	d8f9      	bhi.n	8007564 <__lshift+0xc0>
 8007570:	e7ea      	b.n	8007548 <__lshift+0xa4>
 8007572:	bf00      	nop
 8007574:	080088ba 	.word	0x080088ba
 8007578:	080088cb 	.word	0x080088cb

0800757c <__mcmp>:
 800757c:	690a      	ldr	r2, [r1, #16]
 800757e:	4603      	mov	r3, r0
 8007580:	6900      	ldr	r0, [r0, #16]
 8007582:	1a80      	subs	r0, r0, r2
 8007584:	b530      	push	{r4, r5, lr}
 8007586:	d10e      	bne.n	80075a6 <__mcmp+0x2a>
 8007588:	3314      	adds	r3, #20
 800758a:	3114      	adds	r1, #20
 800758c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007590:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007594:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007598:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800759c:	4295      	cmp	r5, r2
 800759e:	d003      	beq.n	80075a8 <__mcmp+0x2c>
 80075a0:	d205      	bcs.n	80075ae <__mcmp+0x32>
 80075a2:	f04f 30ff 	mov.w	r0, #4294967295
 80075a6:	bd30      	pop	{r4, r5, pc}
 80075a8:	42a3      	cmp	r3, r4
 80075aa:	d3f3      	bcc.n	8007594 <__mcmp+0x18>
 80075ac:	e7fb      	b.n	80075a6 <__mcmp+0x2a>
 80075ae:	2001      	movs	r0, #1
 80075b0:	e7f9      	b.n	80075a6 <__mcmp+0x2a>
	...

080075b4 <__mdiff>:
 80075b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b8:	4689      	mov	r9, r1
 80075ba:	4606      	mov	r6, r0
 80075bc:	4611      	mov	r1, r2
 80075be:	4648      	mov	r0, r9
 80075c0:	4614      	mov	r4, r2
 80075c2:	f7ff ffdb 	bl	800757c <__mcmp>
 80075c6:	1e05      	subs	r5, r0, #0
 80075c8:	d112      	bne.n	80075f0 <__mdiff+0x3c>
 80075ca:	4629      	mov	r1, r5
 80075cc:	4630      	mov	r0, r6
 80075ce:	f7ff fd5b 	bl	8007088 <_Balloc>
 80075d2:	4602      	mov	r2, r0
 80075d4:	b928      	cbnz	r0, 80075e2 <__mdiff+0x2e>
 80075d6:	4b3f      	ldr	r3, [pc, #252]	@ (80076d4 <__mdiff+0x120>)
 80075d8:	f240 2137 	movw	r1, #567	@ 0x237
 80075dc:	483e      	ldr	r0, [pc, #248]	@ (80076d8 <__mdiff+0x124>)
 80075de:	f7fe fde9 	bl	80061b4 <__assert_func>
 80075e2:	2301      	movs	r3, #1
 80075e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80075e8:	4610      	mov	r0, r2
 80075ea:	b003      	add	sp, #12
 80075ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f0:	bfbc      	itt	lt
 80075f2:	464b      	movlt	r3, r9
 80075f4:	46a1      	movlt	r9, r4
 80075f6:	4630      	mov	r0, r6
 80075f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80075fc:	bfba      	itte	lt
 80075fe:	461c      	movlt	r4, r3
 8007600:	2501      	movlt	r5, #1
 8007602:	2500      	movge	r5, #0
 8007604:	f7ff fd40 	bl	8007088 <_Balloc>
 8007608:	4602      	mov	r2, r0
 800760a:	b918      	cbnz	r0, 8007614 <__mdiff+0x60>
 800760c:	4b31      	ldr	r3, [pc, #196]	@ (80076d4 <__mdiff+0x120>)
 800760e:	f240 2145 	movw	r1, #581	@ 0x245
 8007612:	e7e3      	b.n	80075dc <__mdiff+0x28>
 8007614:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007618:	6926      	ldr	r6, [r4, #16]
 800761a:	60c5      	str	r5, [r0, #12]
 800761c:	f109 0310 	add.w	r3, r9, #16
 8007620:	f109 0514 	add.w	r5, r9, #20
 8007624:	f104 0e14 	add.w	lr, r4, #20
 8007628:	f100 0b14 	add.w	fp, r0, #20
 800762c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007630:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007634:	9301      	str	r3, [sp, #4]
 8007636:	46d9      	mov	r9, fp
 8007638:	f04f 0c00 	mov.w	ip, #0
 800763c:	9b01      	ldr	r3, [sp, #4]
 800763e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007642:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007646:	9301      	str	r3, [sp, #4]
 8007648:	fa1f f38a 	uxth.w	r3, sl
 800764c:	4619      	mov	r1, r3
 800764e:	b283      	uxth	r3, r0
 8007650:	1acb      	subs	r3, r1, r3
 8007652:	0c00      	lsrs	r0, r0, #16
 8007654:	4463      	add	r3, ip
 8007656:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800765a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800765e:	b29b      	uxth	r3, r3
 8007660:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007664:	4576      	cmp	r6, lr
 8007666:	f849 3b04 	str.w	r3, [r9], #4
 800766a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800766e:	d8e5      	bhi.n	800763c <__mdiff+0x88>
 8007670:	1b33      	subs	r3, r6, r4
 8007672:	3b15      	subs	r3, #21
 8007674:	f023 0303 	bic.w	r3, r3, #3
 8007678:	3415      	adds	r4, #21
 800767a:	3304      	adds	r3, #4
 800767c:	42a6      	cmp	r6, r4
 800767e:	bf38      	it	cc
 8007680:	2304      	movcc	r3, #4
 8007682:	441d      	add	r5, r3
 8007684:	445b      	add	r3, fp
 8007686:	461e      	mov	r6, r3
 8007688:	462c      	mov	r4, r5
 800768a:	4544      	cmp	r4, r8
 800768c:	d30e      	bcc.n	80076ac <__mdiff+0xf8>
 800768e:	f108 0103 	add.w	r1, r8, #3
 8007692:	1b49      	subs	r1, r1, r5
 8007694:	f021 0103 	bic.w	r1, r1, #3
 8007698:	3d03      	subs	r5, #3
 800769a:	45a8      	cmp	r8, r5
 800769c:	bf38      	it	cc
 800769e:	2100      	movcc	r1, #0
 80076a0:	440b      	add	r3, r1
 80076a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80076a6:	b191      	cbz	r1, 80076ce <__mdiff+0x11a>
 80076a8:	6117      	str	r7, [r2, #16]
 80076aa:	e79d      	b.n	80075e8 <__mdiff+0x34>
 80076ac:	f854 1b04 	ldr.w	r1, [r4], #4
 80076b0:	46e6      	mov	lr, ip
 80076b2:	0c08      	lsrs	r0, r1, #16
 80076b4:	fa1c fc81 	uxtah	ip, ip, r1
 80076b8:	4471      	add	r1, lr
 80076ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80076be:	b289      	uxth	r1, r1
 80076c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80076c4:	f846 1b04 	str.w	r1, [r6], #4
 80076c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80076cc:	e7dd      	b.n	800768a <__mdiff+0xd6>
 80076ce:	3f01      	subs	r7, #1
 80076d0:	e7e7      	b.n	80076a2 <__mdiff+0xee>
 80076d2:	bf00      	nop
 80076d4:	080088ba 	.word	0x080088ba
 80076d8:	080088cb 	.word	0x080088cb

080076dc <__d2b>:
 80076dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076e0:	460f      	mov	r7, r1
 80076e2:	2101      	movs	r1, #1
 80076e4:	ec59 8b10 	vmov	r8, r9, d0
 80076e8:	4616      	mov	r6, r2
 80076ea:	f7ff fccd 	bl	8007088 <_Balloc>
 80076ee:	4604      	mov	r4, r0
 80076f0:	b930      	cbnz	r0, 8007700 <__d2b+0x24>
 80076f2:	4602      	mov	r2, r0
 80076f4:	4b23      	ldr	r3, [pc, #140]	@ (8007784 <__d2b+0xa8>)
 80076f6:	4824      	ldr	r0, [pc, #144]	@ (8007788 <__d2b+0xac>)
 80076f8:	f240 310f 	movw	r1, #783	@ 0x30f
 80076fc:	f7fe fd5a 	bl	80061b4 <__assert_func>
 8007700:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007704:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007708:	b10d      	cbz	r5, 800770e <__d2b+0x32>
 800770a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800770e:	9301      	str	r3, [sp, #4]
 8007710:	f1b8 0300 	subs.w	r3, r8, #0
 8007714:	d023      	beq.n	800775e <__d2b+0x82>
 8007716:	4668      	mov	r0, sp
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	f7ff fd7c 	bl	8007216 <__lo0bits>
 800771e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007722:	b1d0      	cbz	r0, 800775a <__d2b+0x7e>
 8007724:	f1c0 0320 	rsb	r3, r0, #32
 8007728:	fa02 f303 	lsl.w	r3, r2, r3
 800772c:	430b      	orrs	r3, r1
 800772e:	40c2      	lsrs	r2, r0
 8007730:	6163      	str	r3, [r4, #20]
 8007732:	9201      	str	r2, [sp, #4]
 8007734:	9b01      	ldr	r3, [sp, #4]
 8007736:	61a3      	str	r3, [r4, #24]
 8007738:	2b00      	cmp	r3, #0
 800773a:	bf0c      	ite	eq
 800773c:	2201      	moveq	r2, #1
 800773e:	2202      	movne	r2, #2
 8007740:	6122      	str	r2, [r4, #16]
 8007742:	b1a5      	cbz	r5, 800776e <__d2b+0x92>
 8007744:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007748:	4405      	add	r5, r0
 800774a:	603d      	str	r5, [r7, #0]
 800774c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007750:	6030      	str	r0, [r6, #0]
 8007752:	4620      	mov	r0, r4
 8007754:	b003      	add	sp, #12
 8007756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800775a:	6161      	str	r1, [r4, #20]
 800775c:	e7ea      	b.n	8007734 <__d2b+0x58>
 800775e:	a801      	add	r0, sp, #4
 8007760:	f7ff fd59 	bl	8007216 <__lo0bits>
 8007764:	9b01      	ldr	r3, [sp, #4]
 8007766:	6163      	str	r3, [r4, #20]
 8007768:	3020      	adds	r0, #32
 800776a:	2201      	movs	r2, #1
 800776c:	e7e8      	b.n	8007740 <__d2b+0x64>
 800776e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007772:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007776:	6038      	str	r0, [r7, #0]
 8007778:	6918      	ldr	r0, [r3, #16]
 800777a:	f7ff fd2d 	bl	80071d8 <__hi0bits>
 800777e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007782:	e7e5      	b.n	8007750 <__d2b+0x74>
 8007784:	080088ba 	.word	0x080088ba
 8007788:	080088cb 	.word	0x080088cb

0800778c <__ssputs_r>:
 800778c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007790:	688e      	ldr	r6, [r1, #8]
 8007792:	461f      	mov	r7, r3
 8007794:	42be      	cmp	r6, r7
 8007796:	680b      	ldr	r3, [r1, #0]
 8007798:	4682      	mov	sl, r0
 800779a:	460c      	mov	r4, r1
 800779c:	4690      	mov	r8, r2
 800779e:	d82d      	bhi.n	80077fc <__ssputs_r+0x70>
 80077a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80077a8:	d026      	beq.n	80077f8 <__ssputs_r+0x6c>
 80077aa:	6965      	ldr	r5, [r4, #20]
 80077ac:	6909      	ldr	r1, [r1, #16]
 80077ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077b2:	eba3 0901 	sub.w	r9, r3, r1
 80077b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077ba:	1c7b      	adds	r3, r7, #1
 80077bc:	444b      	add	r3, r9
 80077be:	106d      	asrs	r5, r5, #1
 80077c0:	429d      	cmp	r5, r3
 80077c2:	bf38      	it	cc
 80077c4:	461d      	movcc	r5, r3
 80077c6:	0553      	lsls	r3, r2, #21
 80077c8:	d527      	bpl.n	800781a <__ssputs_r+0x8e>
 80077ca:	4629      	mov	r1, r5
 80077cc:	f7ff fbd0 	bl	8006f70 <_malloc_r>
 80077d0:	4606      	mov	r6, r0
 80077d2:	b360      	cbz	r0, 800782e <__ssputs_r+0xa2>
 80077d4:	6921      	ldr	r1, [r4, #16]
 80077d6:	464a      	mov	r2, r9
 80077d8:	f7fe fcdd 	bl	8006196 <memcpy>
 80077dc:	89a3      	ldrh	r3, [r4, #12]
 80077de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80077e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077e6:	81a3      	strh	r3, [r4, #12]
 80077e8:	6126      	str	r6, [r4, #16]
 80077ea:	6165      	str	r5, [r4, #20]
 80077ec:	444e      	add	r6, r9
 80077ee:	eba5 0509 	sub.w	r5, r5, r9
 80077f2:	6026      	str	r6, [r4, #0]
 80077f4:	60a5      	str	r5, [r4, #8]
 80077f6:	463e      	mov	r6, r7
 80077f8:	42be      	cmp	r6, r7
 80077fa:	d900      	bls.n	80077fe <__ssputs_r+0x72>
 80077fc:	463e      	mov	r6, r7
 80077fe:	6820      	ldr	r0, [r4, #0]
 8007800:	4632      	mov	r2, r6
 8007802:	4641      	mov	r1, r8
 8007804:	f000 fbb0 	bl	8007f68 <memmove>
 8007808:	68a3      	ldr	r3, [r4, #8]
 800780a:	1b9b      	subs	r3, r3, r6
 800780c:	60a3      	str	r3, [r4, #8]
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	4433      	add	r3, r6
 8007812:	6023      	str	r3, [r4, #0]
 8007814:	2000      	movs	r0, #0
 8007816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800781a:	462a      	mov	r2, r5
 800781c:	f000 fc1d 	bl	800805a <_realloc_r>
 8007820:	4606      	mov	r6, r0
 8007822:	2800      	cmp	r0, #0
 8007824:	d1e0      	bne.n	80077e8 <__ssputs_r+0x5c>
 8007826:	6921      	ldr	r1, [r4, #16]
 8007828:	4650      	mov	r0, sl
 800782a:	f7ff fb2d 	bl	8006e88 <_free_r>
 800782e:	230c      	movs	r3, #12
 8007830:	f8ca 3000 	str.w	r3, [sl]
 8007834:	89a3      	ldrh	r3, [r4, #12]
 8007836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800783a:	81a3      	strh	r3, [r4, #12]
 800783c:	f04f 30ff 	mov.w	r0, #4294967295
 8007840:	e7e9      	b.n	8007816 <__ssputs_r+0x8a>
	...

08007844 <_svfiprintf_r>:
 8007844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007848:	4698      	mov	r8, r3
 800784a:	898b      	ldrh	r3, [r1, #12]
 800784c:	061b      	lsls	r3, r3, #24
 800784e:	b09d      	sub	sp, #116	@ 0x74
 8007850:	4607      	mov	r7, r0
 8007852:	460d      	mov	r5, r1
 8007854:	4614      	mov	r4, r2
 8007856:	d510      	bpl.n	800787a <_svfiprintf_r+0x36>
 8007858:	690b      	ldr	r3, [r1, #16]
 800785a:	b973      	cbnz	r3, 800787a <_svfiprintf_r+0x36>
 800785c:	2140      	movs	r1, #64	@ 0x40
 800785e:	f7ff fb87 	bl	8006f70 <_malloc_r>
 8007862:	6028      	str	r0, [r5, #0]
 8007864:	6128      	str	r0, [r5, #16]
 8007866:	b930      	cbnz	r0, 8007876 <_svfiprintf_r+0x32>
 8007868:	230c      	movs	r3, #12
 800786a:	603b      	str	r3, [r7, #0]
 800786c:	f04f 30ff 	mov.w	r0, #4294967295
 8007870:	b01d      	add	sp, #116	@ 0x74
 8007872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007876:	2340      	movs	r3, #64	@ 0x40
 8007878:	616b      	str	r3, [r5, #20]
 800787a:	2300      	movs	r3, #0
 800787c:	9309      	str	r3, [sp, #36]	@ 0x24
 800787e:	2320      	movs	r3, #32
 8007880:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007884:	f8cd 800c 	str.w	r8, [sp, #12]
 8007888:	2330      	movs	r3, #48	@ 0x30
 800788a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007a28 <_svfiprintf_r+0x1e4>
 800788e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007892:	f04f 0901 	mov.w	r9, #1
 8007896:	4623      	mov	r3, r4
 8007898:	469a      	mov	sl, r3
 800789a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800789e:	b10a      	cbz	r2, 80078a4 <_svfiprintf_r+0x60>
 80078a0:	2a25      	cmp	r2, #37	@ 0x25
 80078a2:	d1f9      	bne.n	8007898 <_svfiprintf_r+0x54>
 80078a4:	ebba 0b04 	subs.w	fp, sl, r4
 80078a8:	d00b      	beq.n	80078c2 <_svfiprintf_r+0x7e>
 80078aa:	465b      	mov	r3, fp
 80078ac:	4622      	mov	r2, r4
 80078ae:	4629      	mov	r1, r5
 80078b0:	4638      	mov	r0, r7
 80078b2:	f7ff ff6b 	bl	800778c <__ssputs_r>
 80078b6:	3001      	adds	r0, #1
 80078b8:	f000 80a7 	beq.w	8007a0a <_svfiprintf_r+0x1c6>
 80078bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078be:	445a      	add	r2, fp
 80078c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80078c2:	f89a 3000 	ldrb.w	r3, [sl]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f000 809f 	beq.w	8007a0a <_svfiprintf_r+0x1c6>
 80078cc:	2300      	movs	r3, #0
 80078ce:	f04f 32ff 	mov.w	r2, #4294967295
 80078d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078d6:	f10a 0a01 	add.w	sl, sl, #1
 80078da:	9304      	str	r3, [sp, #16]
 80078dc:	9307      	str	r3, [sp, #28]
 80078de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80078e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80078e4:	4654      	mov	r4, sl
 80078e6:	2205      	movs	r2, #5
 80078e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078ec:	484e      	ldr	r0, [pc, #312]	@ (8007a28 <_svfiprintf_r+0x1e4>)
 80078ee:	f7f8 fc87 	bl	8000200 <memchr>
 80078f2:	9a04      	ldr	r2, [sp, #16]
 80078f4:	b9d8      	cbnz	r0, 800792e <_svfiprintf_r+0xea>
 80078f6:	06d0      	lsls	r0, r2, #27
 80078f8:	bf44      	itt	mi
 80078fa:	2320      	movmi	r3, #32
 80078fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007900:	0711      	lsls	r1, r2, #28
 8007902:	bf44      	itt	mi
 8007904:	232b      	movmi	r3, #43	@ 0x2b
 8007906:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800790a:	f89a 3000 	ldrb.w	r3, [sl]
 800790e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007910:	d015      	beq.n	800793e <_svfiprintf_r+0xfa>
 8007912:	9a07      	ldr	r2, [sp, #28]
 8007914:	4654      	mov	r4, sl
 8007916:	2000      	movs	r0, #0
 8007918:	f04f 0c0a 	mov.w	ip, #10
 800791c:	4621      	mov	r1, r4
 800791e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007922:	3b30      	subs	r3, #48	@ 0x30
 8007924:	2b09      	cmp	r3, #9
 8007926:	d94b      	bls.n	80079c0 <_svfiprintf_r+0x17c>
 8007928:	b1b0      	cbz	r0, 8007958 <_svfiprintf_r+0x114>
 800792a:	9207      	str	r2, [sp, #28]
 800792c:	e014      	b.n	8007958 <_svfiprintf_r+0x114>
 800792e:	eba0 0308 	sub.w	r3, r0, r8
 8007932:	fa09 f303 	lsl.w	r3, r9, r3
 8007936:	4313      	orrs	r3, r2
 8007938:	9304      	str	r3, [sp, #16]
 800793a:	46a2      	mov	sl, r4
 800793c:	e7d2      	b.n	80078e4 <_svfiprintf_r+0xa0>
 800793e:	9b03      	ldr	r3, [sp, #12]
 8007940:	1d19      	adds	r1, r3, #4
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	9103      	str	r1, [sp, #12]
 8007946:	2b00      	cmp	r3, #0
 8007948:	bfbb      	ittet	lt
 800794a:	425b      	neglt	r3, r3
 800794c:	f042 0202 	orrlt.w	r2, r2, #2
 8007950:	9307      	strge	r3, [sp, #28]
 8007952:	9307      	strlt	r3, [sp, #28]
 8007954:	bfb8      	it	lt
 8007956:	9204      	strlt	r2, [sp, #16]
 8007958:	7823      	ldrb	r3, [r4, #0]
 800795a:	2b2e      	cmp	r3, #46	@ 0x2e
 800795c:	d10a      	bne.n	8007974 <_svfiprintf_r+0x130>
 800795e:	7863      	ldrb	r3, [r4, #1]
 8007960:	2b2a      	cmp	r3, #42	@ 0x2a
 8007962:	d132      	bne.n	80079ca <_svfiprintf_r+0x186>
 8007964:	9b03      	ldr	r3, [sp, #12]
 8007966:	1d1a      	adds	r2, r3, #4
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	9203      	str	r2, [sp, #12]
 800796c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007970:	3402      	adds	r4, #2
 8007972:	9305      	str	r3, [sp, #20]
 8007974:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007a38 <_svfiprintf_r+0x1f4>
 8007978:	7821      	ldrb	r1, [r4, #0]
 800797a:	2203      	movs	r2, #3
 800797c:	4650      	mov	r0, sl
 800797e:	f7f8 fc3f 	bl	8000200 <memchr>
 8007982:	b138      	cbz	r0, 8007994 <_svfiprintf_r+0x150>
 8007984:	9b04      	ldr	r3, [sp, #16]
 8007986:	eba0 000a 	sub.w	r0, r0, sl
 800798a:	2240      	movs	r2, #64	@ 0x40
 800798c:	4082      	lsls	r2, r0
 800798e:	4313      	orrs	r3, r2
 8007990:	3401      	adds	r4, #1
 8007992:	9304      	str	r3, [sp, #16]
 8007994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007998:	4824      	ldr	r0, [pc, #144]	@ (8007a2c <_svfiprintf_r+0x1e8>)
 800799a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800799e:	2206      	movs	r2, #6
 80079a0:	f7f8 fc2e 	bl	8000200 <memchr>
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d036      	beq.n	8007a16 <_svfiprintf_r+0x1d2>
 80079a8:	4b21      	ldr	r3, [pc, #132]	@ (8007a30 <_svfiprintf_r+0x1ec>)
 80079aa:	bb1b      	cbnz	r3, 80079f4 <_svfiprintf_r+0x1b0>
 80079ac:	9b03      	ldr	r3, [sp, #12]
 80079ae:	3307      	adds	r3, #7
 80079b0:	f023 0307 	bic.w	r3, r3, #7
 80079b4:	3308      	adds	r3, #8
 80079b6:	9303      	str	r3, [sp, #12]
 80079b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ba:	4433      	add	r3, r6
 80079bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80079be:	e76a      	b.n	8007896 <_svfiprintf_r+0x52>
 80079c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80079c4:	460c      	mov	r4, r1
 80079c6:	2001      	movs	r0, #1
 80079c8:	e7a8      	b.n	800791c <_svfiprintf_r+0xd8>
 80079ca:	2300      	movs	r3, #0
 80079cc:	3401      	adds	r4, #1
 80079ce:	9305      	str	r3, [sp, #20]
 80079d0:	4619      	mov	r1, r3
 80079d2:	f04f 0c0a 	mov.w	ip, #10
 80079d6:	4620      	mov	r0, r4
 80079d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079dc:	3a30      	subs	r2, #48	@ 0x30
 80079de:	2a09      	cmp	r2, #9
 80079e0:	d903      	bls.n	80079ea <_svfiprintf_r+0x1a6>
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d0c6      	beq.n	8007974 <_svfiprintf_r+0x130>
 80079e6:	9105      	str	r1, [sp, #20]
 80079e8:	e7c4      	b.n	8007974 <_svfiprintf_r+0x130>
 80079ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80079ee:	4604      	mov	r4, r0
 80079f0:	2301      	movs	r3, #1
 80079f2:	e7f0      	b.n	80079d6 <_svfiprintf_r+0x192>
 80079f4:	ab03      	add	r3, sp, #12
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	462a      	mov	r2, r5
 80079fa:	4b0e      	ldr	r3, [pc, #56]	@ (8007a34 <_svfiprintf_r+0x1f0>)
 80079fc:	a904      	add	r1, sp, #16
 80079fe:	4638      	mov	r0, r7
 8007a00:	f7fd fcc6 	bl	8005390 <_printf_float>
 8007a04:	1c42      	adds	r2, r0, #1
 8007a06:	4606      	mov	r6, r0
 8007a08:	d1d6      	bne.n	80079b8 <_svfiprintf_r+0x174>
 8007a0a:	89ab      	ldrh	r3, [r5, #12]
 8007a0c:	065b      	lsls	r3, r3, #25
 8007a0e:	f53f af2d 	bmi.w	800786c <_svfiprintf_r+0x28>
 8007a12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a14:	e72c      	b.n	8007870 <_svfiprintf_r+0x2c>
 8007a16:	ab03      	add	r3, sp, #12
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	462a      	mov	r2, r5
 8007a1c:	4b05      	ldr	r3, [pc, #20]	@ (8007a34 <_svfiprintf_r+0x1f0>)
 8007a1e:	a904      	add	r1, sp, #16
 8007a20:	4638      	mov	r0, r7
 8007a22:	f7fd ff4d 	bl	80058c0 <_printf_i>
 8007a26:	e7ed      	b.n	8007a04 <_svfiprintf_r+0x1c0>
 8007a28:	08008a20 	.word	0x08008a20
 8007a2c:	08008a2a 	.word	0x08008a2a
 8007a30:	08005391 	.word	0x08005391
 8007a34:	0800778d 	.word	0x0800778d
 8007a38:	08008a26 	.word	0x08008a26

08007a3c <__sfputc_r>:
 8007a3c:	6893      	ldr	r3, [r2, #8]
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	b410      	push	{r4}
 8007a44:	6093      	str	r3, [r2, #8]
 8007a46:	da08      	bge.n	8007a5a <__sfputc_r+0x1e>
 8007a48:	6994      	ldr	r4, [r2, #24]
 8007a4a:	42a3      	cmp	r3, r4
 8007a4c:	db01      	blt.n	8007a52 <__sfputc_r+0x16>
 8007a4e:	290a      	cmp	r1, #10
 8007a50:	d103      	bne.n	8007a5a <__sfputc_r+0x1e>
 8007a52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a56:	f7fe b9f0 	b.w	8005e3a <__swbuf_r>
 8007a5a:	6813      	ldr	r3, [r2, #0]
 8007a5c:	1c58      	adds	r0, r3, #1
 8007a5e:	6010      	str	r0, [r2, #0]
 8007a60:	7019      	strb	r1, [r3, #0]
 8007a62:	4608      	mov	r0, r1
 8007a64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a68:	4770      	bx	lr

08007a6a <__sfputs_r>:
 8007a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6c:	4606      	mov	r6, r0
 8007a6e:	460f      	mov	r7, r1
 8007a70:	4614      	mov	r4, r2
 8007a72:	18d5      	adds	r5, r2, r3
 8007a74:	42ac      	cmp	r4, r5
 8007a76:	d101      	bne.n	8007a7c <__sfputs_r+0x12>
 8007a78:	2000      	movs	r0, #0
 8007a7a:	e007      	b.n	8007a8c <__sfputs_r+0x22>
 8007a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a80:	463a      	mov	r2, r7
 8007a82:	4630      	mov	r0, r6
 8007a84:	f7ff ffda 	bl	8007a3c <__sfputc_r>
 8007a88:	1c43      	adds	r3, r0, #1
 8007a8a:	d1f3      	bne.n	8007a74 <__sfputs_r+0xa>
 8007a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a90 <_vfiprintf_r>:
 8007a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a94:	460d      	mov	r5, r1
 8007a96:	b09d      	sub	sp, #116	@ 0x74
 8007a98:	4614      	mov	r4, r2
 8007a9a:	4698      	mov	r8, r3
 8007a9c:	4606      	mov	r6, r0
 8007a9e:	b118      	cbz	r0, 8007aa8 <_vfiprintf_r+0x18>
 8007aa0:	6a03      	ldr	r3, [r0, #32]
 8007aa2:	b90b      	cbnz	r3, 8007aa8 <_vfiprintf_r+0x18>
 8007aa4:	f7fe f8b8 	bl	8005c18 <__sinit>
 8007aa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007aaa:	07d9      	lsls	r1, r3, #31
 8007aac:	d405      	bmi.n	8007aba <_vfiprintf_r+0x2a>
 8007aae:	89ab      	ldrh	r3, [r5, #12]
 8007ab0:	059a      	lsls	r2, r3, #22
 8007ab2:	d402      	bmi.n	8007aba <_vfiprintf_r+0x2a>
 8007ab4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ab6:	f7fe fb64 	bl	8006182 <__retarget_lock_acquire_recursive>
 8007aba:	89ab      	ldrh	r3, [r5, #12]
 8007abc:	071b      	lsls	r3, r3, #28
 8007abe:	d501      	bpl.n	8007ac4 <_vfiprintf_r+0x34>
 8007ac0:	692b      	ldr	r3, [r5, #16]
 8007ac2:	b99b      	cbnz	r3, 8007aec <_vfiprintf_r+0x5c>
 8007ac4:	4629      	mov	r1, r5
 8007ac6:	4630      	mov	r0, r6
 8007ac8:	f7fe f9f6 	bl	8005eb8 <__swsetup_r>
 8007acc:	b170      	cbz	r0, 8007aec <_vfiprintf_r+0x5c>
 8007ace:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ad0:	07dc      	lsls	r4, r3, #31
 8007ad2:	d504      	bpl.n	8007ade <_vfiprintf_r+0x4e>
 8007ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad8:	b01d      	add	sp, #116	@ 0x74
 8007ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ade:	89ab      	ldrh	r3, [r5, #12]
 8007ae0:	0598      	lsls	r0, r3, #22
 8007ae2:	d4f7      	bmi.n	8007ad4 <_vfiprintf_r+0x44>
 8007ae4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ae6:	f7fe fb4d 	bl	8006184 <__retarget_lock_release_recursive>
 8007aea:	e7f3      	b.n	8007ad4 <_vfiprintf_r+0x44>
 8007aec:	2300      	movs	r3, #0
 8007aee:	9309      	str	r3, [sp, #36]	@ 0x24
 8007af0:	2320      	movs	r3, #32
 8007af2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007afa:	2330      	movs	r3, #48	@ 0x30
 8007afc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007cac <_vfiprintf_r+0x21c>
 8007b00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b04:	f04f 0901 	mov.w	r9, #1
 8007b08:	4623      	mov	r3, r4
 8007b0a:	469a      	mov	sl, r3
 8007b0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b10:	b10a      	cbz	r2, 8007b16 <_vfiprintf_r+0x86>
 8007b12:	2a25      	cmp	r2, #37	@ 0x25
 8007b14:	d1f9      	bne.n	8007b0a <_vfiprintf_r+0x7a>
 8007b16:	ebba 0b04 	subs.w	fp, sl, r4
 8007b1a:	d00b      	beq.n	8007b34 <_vfiprintf_r+0xa4>
 8007b1c:	465b      	mov	r3, fp
 8007b1e:	4622      	mov	r2, r4
 8007b20:	4629      	mov	r1, r5
 8007b22:	4630      	mov	r0, r6
 8007b24:	f7ff ffa1 	bl	8007a6a <__sfputs_r>
 8007b28:	3001      	adds	r0, #1
 8007b2a:	f000 80a7 	beq.w	8007c7c <_vfiprintf_r+0x1ec>
 8007b2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b30:	445a      	add	r2, fp
 8007b32:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b34:	f89a 3000 	ldrb.w	r3, [sl]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f000 809f 	beq.w	8007c7c <_vfiprintf_r+0x1ec>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	f04f 32ff 	mov.w	r2, #4294967295
 8007b44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b48:	f10a 0a01 	add.w	sl, sl, #1
 8007b4c:	9304      	str	r3, [sp, #16]
 8007b4e:	9307      	str	r3, [sp, #28]
 8007b50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b54:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b56:	4654      	mov	r4, sl
 8007b58:	2205      	movs	r2, #5
 8007b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b5e:	4853      	ldr	r0, [pc, #332]	@ (8007cac <_vfiprintf_r+0x21c>)
 8007b60:	f7f8 fb4e 	bl	8000200 <memchr>
 8007b64:	9a04      	ldr	r2, [sp, #16]
 8007b66:	b9d8      	cbnz	r0, 8007ba0 <_vfiprintf_r+0x110>
 8007b68:	06d1      	lsls	r1, r2, #27
 8007b6a:	bf44      	itt	mi
 8007b6c:	2320      	movmi	r3, #32
 8007b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b72:	0713      	lsls	r3, r2, #28
 8007b74:	bf44      	itt	mi
 8007b76:	232b      	movmi	r3, #43	@ 0x2b
 8007b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b80:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b82:	d015      	beq.n	8007bb0 <_vfiprintf_r+0x120>
 8007b84:	9a07      	ldr	r2, [sp, #28]
 8007b86:	4654      	mov	r4, sl
 8007b88:	2000      	movs	r0, #0
 8007b8a:	f04f 0c0a 	mov.w	ip, #10
 8007b8e:	4621      	mov	r1, r4
 8007b90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b94:	3b30      	subs	r3, #48	@ 0x30
 8007b96:	2b09      	cmp	r3, #9
 8007b98:	d94b      	bls.n	8007c32 <_vfiprintf_r+0x1a2>
 8007b9a:	b1b0      	cbz	r0, 8007bca <_vfiprintf_r+0x13a>
 8007b9c:	9207      	str	r2, [sp, #28]
 8007b9e:	e014      	b.n	8007bca <_vfiprintf_r+0x13a>
 8007ba0:	eba0 0308 	sub.w	r3, r0, r8
 8007ba4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	9304      	str	r3, [sp, #16]
 8007bac:	46a2      	mov	sl, r4
 8007bae:	e7d2      	b.n	8007b56 <_vfiprintf_r+0xc6>
 8007bb0:	9b03      	ldr	r3, [sp, #12]
 8007bb2:	1d19      	adds	r1, r3, #4
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	9103      	str	r1, [sp, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	bfbb      	ittet	lt
 8007bbc:	425b      	neglt	r3, r3
 8007bbe:	f042 0202 	orrlt.w	r2, r2, #2
 8007bc2:	9307      	strge	r3, [sp, #28]
 8007bc4:	9307      	strlt	r3, [sp, #28]
 8007bc6:	bfb8      	it	lt
 8007bc8:	9204      	strlt	r2, [sp, #16]
 8007bca:	7823      	ldrb	r3, [r4, #0]
 8007bcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bce:	d10a      	bne.n	8007be6 <_vfiprintf_r+0x156>
 8007bd0:	7863      	ldrb	r3, [r4, #1]
 8007bd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bd4:	d132      	bne.n	8007c3c <_vfiprintf_r+0x1ac>
 8007bd6:	9b03      	ldr	r3, [sp, #12]
 8007bd8:	1d1a      	adds	r2, r3, #4
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	9203      	str	r2, [sp, #12]
 8007bde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007be2:	3402      	adds	r4, #2
 8007be4:	9305      	str	r3, [sp, #20]
 8007be6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007cbc <_vfiprintf_r+0x22c>
 8007bea:	7821      	ldrb	r1, [r4, #0]
 8007bec:	2203      	movs	r2, #3
 8007bee:	4650      	mov	r0, sl
 8007bf0:	f7f8 fb06 	bl	8000200 <memchr>
 8007bf4:	b138      	cbz	r0, 8007c06 <_vfiprintf_r+0x176>
 8007bf6:	9b04      	ldr	r3, [sp, #16]
 8007bf8:	eba0 000a 	sub.w	r0, r0, sl
 8007bfc:	2240      	movs	r2, #64	@ 0x40
 8007bfe:	4082      	lsls	r2, r0
 8007c00:	4313      	orrs	r3, r2
 8007c02:	3401      	adds	r4, #1
 8007c04:	9304      	str	r3, [sp, #16]
 8007c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c0a:	4829      	ldr	r0, [pc, #164]	@ (8007cb0 <_vfiprintf_r+0x220>)
 8007c0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c10:	2206      	movs	r2, #6
 8007c12:	f7f8 faf5 	bl	8000200 <memchr>
 8007c16:	2800      	cmp	r0, #0
 8007c18:	d03f      	beq.n	8007c9a <_vfiprintf_r+0x20a>
 8007c1a:	4b26      	ldr	r3, [pc, #152]	@ (8007cb4 <_vfiprintf_r+0x224>)
 8007c1c:	bb1b      	cbnz	r3, 8007c66 <_vfiprintf_r+0x1d6>
 8007c1e:	9b03      	ldr	r3, [sp, #12]
 8007c20:	3307      	adds	r3, #7
 8007c22:	f023 0307 	bic.w	r3, r3, #7
 8007c26:	3308      	adds	r3, #8
 8007c28:	9303      	str	r3, [sp, #12]
 8007c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c2c:	443b      	add	r3, r7
 8007c2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c30:	e76a      	b.n	8007b08 <_vfiprintf_r+0x78>
 8007c32:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c36:	460c      	mov	r4, r1
 8007c38:	2001      	movs	r0, #1
 8007c3a:	e7a8      	b.n	8007b8e <_vfiprintf_r+0xfe>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	3401      	adds	r4, #1
 8007c40:	9305      	str	r3, [sp, #20]
 8007c42:	4619      	mov	r1, r3
 8007c44:	f04f 0c0a 	mov.w	ip, #10
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c4e:	3a30      	subs	r2, #48	@ 0x30
 8007c50:	2a09      	cmp	r2, #9
 8007c52:	d903      	bls.n	8007c5c <_vfiprintf_r+0x1cc>
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d0c6      	beq.n	8007be6 <_vfiprintf_r+0x156>
 8007c58:	9105      	str	r1, [sp, #20]
 8007c5a:	e7c4      	b.n	8007be6 <_vfiprintf_r+0x156>
 8007c5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c60:	4604      	mov	r4, r0
 8007c62:	2301      	movs	r3, #1
 8007c64:	e7f0      	b.n	8007c48 <_vfiprintf_r+0x1b8>
 8007c66:	ab03      	add	r3, sp, #12
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	462a      	mov	r2, r5
 8007c6c:	4b12      	ldr	r3, [pc, #72]	@ (8007cb8 <_vfiprintf_r+0x228>)
 8007c6e:	a904      	add	r1, sp, #16
 8007c70:	4630      	mov	r0, r6
 8007c72:	f7fd fb8d 	bl	8005390 <_printf_float>
 8007c76:	4607      	mov	r7, r0
 8007c78:	1c78      	adds	r0, r7, #1
 8007c7a:	d1d6      	bne.n	8007c2a <_vfiprintf_r+0x19a>
 8007c7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c7e:	07d9      	lsls	r1, r3, #31
 8007c80:	d405      	bmi.n	8007c8e <_vfiprintf_r+0x1fe>
 8007c82:	89ab      	ldrh	r3, [r5, #12]
 8007c84:	059a      	lsls	r2, r3, #22
 8007c86:	d402      	bmi.n	8007c8e <_vfiprintf_r+0x1fe>
 8007c88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c8a:	f7fe fa7b 	bl	8006184 <__retarget_lock_release_recursive>
 8007c8e:	89ab      	ldrh	r3, [r5, #12]
 8007c90:	065b      	lsls	r3, r3, #25
 8007c92:	f53f af1f 	bmi.w	8007ad4 <_vfiprintf_r+0x44>
 8007c96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c98:	e71e      	b.n	8007ad8 <_vfiprintf_r+0x48>
 8007c9a:	ab03      	add	r3, sp, #12
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	462a      	mov	r2, r5
 8007ca0:	4b05      	ldr	r3, [pc, #20]	@ (8007cb8 <_vfiprintf_r+0x228>)
 8007ca2:	a904      	add	r1, sp, #16
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	f7fd fe0b 	bl	80058c0 <_printf_i>
 8007caa:	e7e4      	b.n	8007c76 <_vfiprintf_r+0x1e6>
 8007cac:	08008a20 	.word	0x08008a20
 8007cb0:	08008a2a 	.word	0x08008a2a
 8007cb4:	08005391 	.word	0x08005391
 8007cb8:	08007a6b 	.word	0x08007a6b
 8007cbc:	08008a26 	.word	0x08008a26

08007cc0 <__sflush_r>:
 8007cc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc8:	0716      	lsls	r6, r2, #28
 8007cca:	4605      	mov	r5, r0
 8007ccc:	460c      	mov	r4, r1
 8007cce:	d454      	bmi.n	8007d7a <__sflush_r+0xba>
 8007cd0:	684b      	ldr	r3, [r1, #4]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	dc02      	bgt.n	8007cdc <__sflush_r+0x1c>
 8007cd6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	dd48      	ble.n	8007d6e <__sflush_r+0xae>
 8007cdc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007cde:	2e00      	cmp	r6, #0
 8007ce0:	d045      	beq.n	8007d6e <__sflush_r+0xae>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ce8:	682f      	ldr	r7, [r5, #0]
 8007cea:	6a21      	ldr	r1, [r4, #32]
 8007cec:	602b      	str	r3, [r5, #0]
 8007cee:	d030      	beq.n	8007d52 <__sflush_r+0x92>
 8007cf0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	0759      	lsls	r1, r3, #29
 8007cf6:	d505      	bpl.n	8007d04 <__sflush_r+0x44>
 8007cf8:	6863      	ldr	r3, [r4, #4]
 8007cfa:	1ad2      	subs	r2, r2, r3
 8007cfc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007cfe:	b10b      	cbz	r3, 8007d04 <__sflush_r+0x44>
 8007d00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007d02:	1ad2      	subs	r2, r2, r3
 8007d04:	2300      	movs	r3, #0
 8007d06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d08:	6a21      	ldr	r1, [r4, #32]
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	47b0      	blx	r6
 8007d0e:	1c43      	adds	r3, r0, #1
 8007d10:	89a3      	ldrh	r3, [r4, #12]
 8007d12:	d106      	bne.n	8007d22 <__sflush_r+0x62>
 8007d14:	6829      	ldr	r1, [r5, #0]
 8007d16:	291d      	cmp	r1, #29
 8007d18:	d82b      	bhi.n	8007d72 <__sflush_r+0xb2>
 8007d1a:	4a2a      	ldr	r2, [pc, #168]	@ (8007dc4 <__sflush_r+0x104>)
 8007d1c:	410a      	asrs	r2, r1
 8007d1e:	07d6      	lsls	r6, r2, #31
 8007d20:	d427      	bmi.n	8007d72 <__sflush_r+0xb2>
 8007d22:	2200      	movs	r2, #0
 8007d24:	6062      	str	r2, [r4, #4]
 8007d26:	04d9      	lsls	r1, r3, #19
 8007d28:	6922      	ldr	r2, [r4, #16]
 8007d2a:	6022      	str	r2, [r4, #0]
 8007d2c:	d504      	bpl.n	8007d38 <__sflush_r+0x78>
 8007d2e:	1c42      	adds	r2, r0, #1
 8007d30:	d101      	bne.n	8007d36 <__sflush_r+0x76>
 8007d32:	682b      	ldr	r3, [r5, #0]
 8007d34:	b903      	cbnz	r3, 8007d38 <__sflush_r+0x78>
 8007d36:	6560      	str	r0, [r4, #84]	@ 0x54
 8007d38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d3a:	602f      	str	r7, [r5, #0]
 8007d3c:	b1b9      	cbz	r1, 8007d6e <__sflush_r+0xae>
 8007d3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d42:	4299      	cmp	r1, r3
 8007d44:	d002      	beq.n	8007d4c <__sflush_r+0x8c>
 8007d46:	4628      	mov	r0, r5
 8007d48:	f7ff f89e 	bl	8006e88 <_free_r>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d50:	e00d      	b.n	8007d6e <__sflush_r+0xae>
 8007d52:	2301      	movs	r3, #1
 8007d54:	4628      	mov	r0, r5
 8007d56:	47b0      	blx	r6
 8007d58:	4602      	mov	r2, r0
 8007d5a:	1c50      	adds	r0, r2, #1
 8007d5c:	d1c9      	bne.n	8007cf2 <__sflush_r+0x32>
 8007d5e:	682b      	ldr	r3, [r5, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d0c6      	beq.n	8007cf2 <__sflush_r+0x32>
 8007d64:	2b1d      	cmp	r3, #29
 8007d66:	d001      	beq.n	8007d6c <__sflush_r+0xac>
 8007d68:	2b16      	cmp	r3, #22
 8007d6a:	d11e      	bne.n	8007daa <__sflush_r+0xea>
 8007d6c:	602f      	str	r7, [r5, #0]
 8007d6e:	2000      	movs	r0, #0
 8007d70:	e022      	b.n	8007db8 <__sflush_r+0xf8>
 8007d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d76:	b21b      	sxth	r3, r3
 8007d78:	e01b      	b.n	8007db2 <__sflush_r+0xf2>
 8007d7a:	690f      	ldr	r7, [r1, #16]
 8007d7c:	2f00      	cmp	r7, #0
 8007d7e:	d0f6      	beq.n	8007d6e <__sflush_r+0xae>
 8007d80:	0793      	lsls	r3, r2, #30
 8007d82:	680e      	ldr	r6, [r1, #0]
 8007d84:	bf08      	it	eq
 8007d86:	694b      	ldreq	r3, [r1, #20]
 8007d88:	600f      	str	r7, [r1, #0]
 8007d8a:	bf18      	it	ne
 8007d8c:	2300      	movne	r3, #0
 8007d8e:	eba6 0807 	sub.w	r8, r6, r7
 8007d92:	608b      	str	r3, [r1, #8]
 8007d94:	f1b8 0f00 	cmp.w	r8, #0
 8007d98:	dde9      	ble.n	8007d6e <__sflush_r+0xae>
 8007d9a:	6a21      	ldr	r1, [r4, #32]
 8007d9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007d9e:	4643      	mov	r3, r8
 8007da0:	463a      	mov	r2, r7
 8007da2:	4628      	mov	r0, r5
 8007da4:	47b0      	blx	r6
 8007da6:	2800      	cmp	r0, #0
 8007da8:	dc08      	bgt.n	8007dbc <__sflush_r+0xfc>
 8007daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007db2:	81a3      	strh	r3, [r4, #12]
 8007db4:	f04f 30ff 	mov.w	r0, #4294967295
 8007db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dbc:	4407      	add	r7, r0
 8007dbe:	eba8 0800 	sub.w	r8, r8, r0
 8007dc2:	e7e7      	b.n	8007d94 <__sflush_r+0xd4>
 8007dc4:	dfbffffe 	.word	0xdfbffffe

08007dc8 <_fflush_r>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	690b      	ldr	r3, [r1, #16]
 8007dcc:	4605      	mov	r5, r0
 8007dce:	460c      	mov	r4, r1
 8007dd0:	b913      	cbnz	r3, 8007dd8 <_fflush_r+0x10>
 8007dd2:	2500      	movs	r5, #0
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	bd38      	pop	{r3, r4, r5, pc}
 8007dd8:	b118      	cbz	r0, 8007de2 <_fflush_r+0x1a>
 8007dda:	6a03      	ldr	r3, [r0, #32]
 8007ddc:	b90b      	cbnz	r3, 8007de2 <_fflush_r+0x1a>
 8007dde:	f7fd ff1b 	bl	8005c18 <__sinit>
 8007de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d0f3      	beq.n	8007dd2 <_fflush_r+0xa>
 8007dea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007dec:	07d0      	lsls	r0, r2, #31
 8007dee:	d404      	bmi.n	8007dfa <_fflush_r+0x32>
 8007df0:	0599      	lsls	r1, r3, #22
 8007df2:	d402      	bmi.n	8007dfa <_fflush_r+0x32>
 8007df4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007df6:	f7fe f9c4 	bl	8006182 <__retarget_lock_acquire_recursive>
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	4621      	mov	r1, r4
 8007dfe:	f7ff ff5f 	bl	8007cc0 <__sflush_r>
 8007e02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e04:	07da      	lsls	r2, r3, #31
 8007e06:	4605      	mov	r5, r0
 8007e08:	d4e4      	bmi.n	8007dd4 <_fflush_r+0xc>
 8007e0a:	89a3      	ldrh	r3, [r4, #12]
 8007e0c:	059b      	lsls	r3, r3, #22
 8007e0e:	d4e1      	bmi.n	8007dd4 <_fflush_r+0xc>
 8007e10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e12:	f7fe f9b7 	bl	8006184 <__retarget_lock_release_recursive>
 8007e16:	e7dd      	b.n	8007dd4 <_fflush_r+0xc>

08007e18 <fiprintf>:
 8007e18:	b40e      	push	{r1, r2, r3}
 8007e1a:	b503      	push	{r0, r1, lr}
 8007e1c:	4601      	mov	r1, r0
 8007e1e:	ab03      	add	r3, sp, #12
 8007e20:	4805      	ldr	r0, [pc, #20]	@ (8007e38 <fiprintf+0x20>)
 8007e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e26:	6800      	ldr	r0, [r0, #0]
 8007e28:	9301      	str	r3, [sp, #4]
 8007e2a:	f7ff fe31 	bl	8007a90 <_vfiprintf_r>
 8007e2e:	b002      	add	sp, #8
 8007e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e34:	b003      	add	sp, #12
 8007e36:	4770      	bx	lr
 8007e38:	20000018 	.word	0x20000018

08007e3c <__swhatbuf_r>:
 8007e3c:	b570      	push	{r4, r5, r6, lr}
 8007e3e:	460c      	mov	r4, r1
 8007e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e44:	2900      	cmp	r1, #0
 8007e46:	b096      	sub	sp, #88	@ 0x58
 8007e48:	4615      	mov	r5, r2
 8007e4a:	461e      	mov	r6, r3
 8007e4c:	da0d      	bge.n	8007e6a <__swhatbuf_r+0x2e>
 8007e4e:	89a3      	ldrh	r3, [r4, #12]
 8007e50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e54:	f04f 0100 	mov.w	r1, #0
 8007e58:	bf14      	ite	ne
 8007e5a:	2340      	movne	r3, #64	@ 0x40
 8007e5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e60:	2000      	movs	r0, #0
 8007e62:	6031      	str	r1, [r6, #0]
 8007e64:	602b      	str	r3, [r5, #0]
 8007e66:	b016      	add	sp, #88	@ 0x58
 8007e68:	bd70      	pop	{r4, r5, r6, pc}
 8007e6a:	466a      	mov	r2, sp
 8007e6c:	f000 f896 	bl	8007f9c <_fstat_r>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	dbec      	blt.n	8007e4e <__swhatbuf_r+0x12>
 8007e74:	9901      	ldr	r1, [sp, #4]
 8007e76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007e7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e7e:	4259      	negs	r1, r3
 8007e80:	4159      	adcs	r1, r3
 8007e82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e86:	e7eb      	b.n	8007e60 <__swhatbuf_r+0x24>

08007e88 <__smakebuf_r>:
 8007e88:	898b      	ldrh	r3, [r1, #12]
 8007e8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e8c:	079d      	lsls	r5, r3, #30
 8007e8e:	4606      	mov	r6, r0
 8007e90:	460c      	mov	r4, r1
 8007e92:	d507      	bpl.n	8007ea4 <__smakebuf_r+0x1c>
 8007e94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e98:	6023      	str	r3, [r4, #0]
 8007e9a:	6123      	str	r3, [r4, #16]
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	6163      	str	r3, [r4, #20]
 8007ea0:	b003      	add	sp, #12
 8007ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ea4:	ab01      	add	r3, sp, #4
 8007ea6:	466a      	mov	r2, sp
 8007ea8:	f7ff ffc8 	bl	8007e3c <__swhatbuf_r>
 8007eac:	9f00      	ldr	r7, [sp, #0]
 8007eae:	4605      	mov	r5, r0
 8007eb0:	4639      	mov	r1, r7
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f7ff f85c 	bl	8006f70 <_malloc_r>
 8007eb8:	b948      	cbnz	r0, 8007ece <__smakebuf_r+0x46>
 8007eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ebe:	059a      	lsls	r2, r3, #22
 8007ec0:	d4ee      	bmi.n	8007ea0 <__smakebuf_r+0x18>
 8007ec2:	f023 0303 	bic.w	r3, r3, #3
 8007ec6:	f043 0302 	orr.w	r3, r3, #2
 8007eca:	81a3      	strh	r3, [r4, #12]
 8007ecc:	e7e2      	b.n	8007e94 <__smakebuf_r+0xc>
 8007ece:	89a3      	ldrh	r3, [r4, #12]
 8007ed0:	6020      	str	r0, [r4, #0]
 8007ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ed6:	81a3      	strh	r3, [r4, #12]
 8007ed8:	9b01      	ldr	r3, [sp, #4]
 8007eda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ede:	b15b      	cbz	r3, 8007ef8 <__smakebuf_r+0x70>
 8007ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	f000 f86b 	bl	8007fc0 <_isatty_r>
 8007eea:	b128      	cbz	r0, 8007ef8 <__smakebuf_r+0x70>
 8007eec:	89a3      	ldrh	r3, [r4, #12]
 8007eee:	f023 0303 	bic.w	r3, r3, #3
 8007ef2:	f043 0301 	orr.w	r3, r3, #1
 8007ef6:	81a3      	strh	r3, [r4, #12]
 8007ef8:	89a3      	ldrh	r3, [r4, #12]
 8007efa:	431d      	orrs	r5, r3
 8007efc:	81a5      	strh	r5, [r4, #12]
 8007efe:	e7cf      	b.n	8007ea0 <__smakebuf_r+0x18>

08007f00 <_putc_r>:
 8007f00:	b570      	push	{r4, r5, r6, lr}
 8007f02:	460d      	mov	r5, r1
 8007f04:	4614      	mov	r4, r2
 8007f06:	4606      	mov	r6, r0
 8007f08:	b118      	cbz	r0, 8007f12 <_putc_r+0x12>
 8007f0a:	6a03      	ldr	r3, [r0, #32]
 8007f0c:	b90b      	cbnz	r3, 8007f12 <_putc_r+0x12>
 8007f0e:	f7fd fe83 	bl	8005c18 <__sinit>
 8007f12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f14:	07d8      	lsls	r0, r3, #31
 8007f16:	d405      	bmi.n	8007f24 <_putc_r+0x24>
 8007f18:	89a3      	ldrh	r3, [r4, #12]
 8007f1a:	0599      	lsls	r1, r3, #22
 8007f1c:	d402      	bmi.n	8007f24 <_putc_r+0x24>
 8007f1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f20:	f7fe f92f 	bl	8006182 <__retarget_lock_acquire_recursive>
 8007f24:	68a3      	ldr	r3, [r4, #8]
 8007f26:	3b01      	subs	r3, #1
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	60a3      	str	r3, [r4, #8]
 8007f2c:	da05      	bge.n	8007f3a <_putc_r+0x3a>
 8007f2e:	69a2      	ldr	r2, [r4, #24]
 8007f30:	4293      	cmp	r3, r2
 8007f32:	db12      	blt.n	8007f5a <_putc_r+0x5a>
 8007f34:	b2eb      	uxtb	r3, r5
 8007f36:	2b0a      	cmp	r3, #10
 8007f38:	d00f      	beq.n	8007f5a <_putc_r+0x5a>
 8007f3a:	6823      	ldr	r3, [r4, #0]
 8007f3c:	1c5a      	adds	r2, r3, #1
 8007f3e:	6022      	str	r2, [r4, #0]
 8007f40:	701d      	strb	r5, [r3, #0]
 8007f42:	b2ed      	uxtb	r5, r5
 8007f44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f46:	07da      	lsls	r2, r3, #31
 8007f48:	d405      	bmi.n	8007f56 <_putc_r+0x56>
 8007f4a:	89a3      	ldrh	r3, [r4, #12]
 8007f4c:	059b      	lsls	r3, r3, #22
 8007f4e:	d402      	bmi.n	8007f56 <_putc_r+0x56>
 8007f50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f52:	f7fe f917 	bl	8006184 <__retarget_lock_release_recursive>
 8007f56:	4628      	mov	r0, r5
 8007f58:	bd70      	pop	{r4, r5, r6, pc}
 8007f5a:	4629      	mov	r1, r5
 8007f5c:	4622      	mov	r2, r4
 8007f5e:	4630      	mov	r0, r6
 8007f60:	f7fd ff6b 	bl	8005e3a <__swbuf_r>
 8007f64:	4605      	mov	r5, r0
 8007f66:	e7ed      	b.n	8007f44 <_putc_r+0x44>

08007f68 <memmove>:
 8007f68:	4288      	cmp	r0, r1
 8007f6a:	b510      	push	{r4, lr}
 8007f6c:	eb01 0402 	add.w	r4, r1, r2
 8007f70:	d902      	bls.n	8007f78 <memmove+0x10>
 8007f72:	4284      	cmp	r4, r0
 8007f74:	4623      	mov	r3, r4
 8007f76:	d807      	bhi.n	8007f88 <memmove+0x20>
 8007f78:	1e43      	subs	r3, r0, #1
 8007f7a:	42a1      	cmp	r1, r4
 8007f7c:	d008      	beq.n	8007f90 <memmove+0x28>
 8007f7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f86:	e7f8      	b.n	8007f7a <memmove+0x12>
 8007f88:	4402      	add	r2, r0
 8007f8a:	4601      	mov	r1, r0
 8007f8c:	428a      	cmp	r2, r1
 8007f8e:	d100      	bne.n	8007f92 <memmove+0x2a>
 8007f90:	bd10      	pop	{r4, pc}
 8007f92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f9a:	e7f7      	b.n	8007f8c <memmove+0x24>

08007f9c <_fstat_r>:
 8007f9c:	b538      	push	{r3, r4, r5, lr}
 8007f9e:	4d07      	ldr	r5, [pc, #28]	@ (8007fbc <_fstat_r+0x20>)
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	4608      	mov	r0, r1
 8007fa6:	4611      	mov	r1, r2
 8007fa8:	602b      	str	r3, [r5, #0]
 8007faa:	f7fa f92f 	bl	800220c <_fstat>
 8007fae:	1c43      	adds	r3, r0, #1
 8007fb0:	d102      	bne.n	8007fb8 <_fstat_r+0x1c>
 8007fb2:	682b      	ldr	r3, [r5, #0]
 8007fb4:	b103      	cbz	r3, 8007fb8 <_fstat_r+0x1c>
 8007fb6:	6023      	str	r3, [r4, #0]
 8007fb8:	bd38      	pop	{r3, r4, r5, pc}
 8007fba:	bf00      	nop
 8007fbc:	20000d3c 	.word	0x20000d3c

08007fc0 <_isatty_r>:
 8007fc0:	b538      	push	{r3, r4, r5, lr}
 8007fc2:	4d06      	ldr	r5, [pc, #24]	@ (8007fdc <_isatty_r+0x1c>)
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	4608      	mov	r0, r1
 8007fca:	602b      	str	r3, [r5, #0]
 8007fcc:	f7fa f92e 	bl	800222c <_isatty>
 8007fd0:	1c43      	adds	r3, r0, #1
 8007fd2:	d102      	bne.n	8007fda <_isatty_r+0x1a>
 8007fd4:	682b      	ldr	r3, [r5, #0]
 8007fd6:	b103      	cbz	r3, 8007fda <_isatty_r+0x1a>
 8007fd8:	6023      	str	r3, [r4, #0]
 8007fda:	bd38      	pop	{r3, r4, r5, pc}
 8007fdc:	20000d3c 	.word	0x20000d3c

08007fe0 <_sbrk_r>:
 8007fe0:	b538      	push	{r3, r4, r5, lr}
 8007fe2:	4d06      	ldr	r5, [pc, #24]	@ (8007ffc <_sbrk_r+0x1c>)
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	4608      	mov	r0, r1
 8007fea:	602b      	str	r3, [r5, #0]
 8007fec:	f7fa f936 	bl	800225c <_sbrk>
 8007ff0:	1c43      	adds	r3, r0, #1
 8007ff2:	d102      	bne.n	8007ffa <_sbrk_r+0x1a>
 8007ff4:	682b      	ldr	r3, [r5, #0]
 8007ff6:	b103      	cbz	r3, 8007ffa <_sbrk_r+0x1a>
 8007ff8:	6023      	str	r3, [r4, #0]
 8007ffa:	bd38      	pop	{r3, r4, r5, pc}
 8007ffc:	20000d3c 	.word	0x20000d3c

08008000 <abort>:
 8008000:	b508      	push	{r3, lr}
 8008002:	2006      	movs	r0, #6
 8008004:	f000 f88c 	bl	8008120 <raise>
 8008008:	2001      	movs	r0, #1
 800800a:	f7fa f8af 	bl	800216c <_exit>

0800800e <_calloc_r>:
 800800e:	b570      	push	{r4, r5, r6, lr}
 8008010:	fba1 5402 	umull	r5, r4, r1, r2
 8008014:	b93c      	cbnz	r4, 8008026 <_calloc_r+0x18>
 8008016:	4629      	mov	r1, r5
 8008018:	f7fe ffaa 	bl	8006f70 <_malloc_r>
 800801c:	4606      	mov	r6, r0
 800801e:	b928      	cbnz	r0, 800802c <_calloc_r+0x1e>
 8008020:	2600      	movs	r6, #0
 8008022:	4630      	mov	r0, r6
 8008024:	bd70      	pop	{r4, r5, r6, pc}
 8008026:	220c      	movs	r2, #12
 8008028:	6002      	str	r2, [r0, #0]
 800802a:	e7f9      	b.n	8008020 <_calloc_r+0x12>
 800802c:	462a      	mov	r2, r5
 800802e:	4621      	mov	r1, r4
 8008030:	f7fd ff98 	bl	8005f64 <memset>
 8008034:	e7f5      	b.n	8008022 <_calloc_r+0x14>

08008036 <__ascii_mbtowc>:
 8008036:	b082      	sub	sp, #8
 8008038:	b901      	cbnz	r1, 800803c <__ascii_mbtowc+0x6>
 800803a:	a901      	add	r1, sp, #4
 800803c:	b142      	cbz	r2, 8008050 <__ascii_mbtowc+0x1a>
 800803e:	b14b      	cbz	r3, 8008054 <__ascii_mbtowc+0x1e>
 8008040:	7813      	ldrb	r3, [r2, #0]
 8008042:	600b      	str	r3, [r1, #0]
 8008044:	7812      	ldrb	r2, [r2, #0]
 8008046:	1e10      	subs	r0, r2, #0
 8008048:	bf18      	it	ne
 800804a:	2001      	movne	r0, #1
 800804c:	b002      	add	sp, #8
 800804e:	4770      	bx	lr
 8008050:	4610      	mov	r0, r2
 8008052:	e7fb      	b.n	800804c <__ascii_mbtowc+0x16>
 8008054:	f06f 0001 	mvn.w	r0, #1
 8008058:	e7f8      	b.n	800804c <__ascii_mbtowc+0x16>

0800805a <_realloc_r>:
 800805a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800805e:	4680      	mov	r8, r0
 8008060:	4615      	mov	r5, r2
 8008062:	460c      	mov	r4, r1
 8008064:	b921      	cbnz	r1, 8008070 <_realloc_r+0x16>
 8008066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800806a:	4611      	mov	r1, r2
 800806c:	f7fe bf80 	b.w	8006f70 <_malloc_r>
 8008070:	b92a      	cbnz	r2, 800807e <_realloc_r+0x24>
 8008072:	f7fe ff09 	bl	8006e88 <_free_r>
 8008076:	2400      	movs	r4, #0
 8008078:	4620      	mov	r0, r4
 800807a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800807e:	f000 f86b 	bl	8008158 <_malloc_usable_size_r>
 8008082:	4285      	cmp	r5, r0
 8008084:	4606      	mov	r6, r0
 8008086:	d802      	bhi.n	800808e <_realloc_r+0x34>
 8008088:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800808c:	d8f4      	bhi.n	8008078 <_realloc_r+0x1e>
 800808e:	4629      	mov	r1, r5
 8008090:	4640      	mov	r0, r8
 8008092:	f7fe ff6d 	bl	8006f70 <_malloc_r>
 8008096:	4607      	mov	r7, r0
 8008098:	2800      	cmp	r0, #0
 800809a:	d0ec      	beq.n	8008076 <_realloc_r+0x1c>
 800809c:	42b5      	cmp	r5, r6
 800809e:	462a      	mov	r2, r5
 80080a0:	4621      	mov	r1, r4
 80080a2:	bf28      	it	cs
 80080a4:	4632      	movcs	r2, r6
 80080a6:	f7fe f876 	bl	8006196 <memcpy>
 80080aa:	4621      	mov	r1, r4
 80080ac:	4640      	mov	r0, r8
 80080ae:	f7fe feeb 	bl	8006e88 <_free_r>
 80080b2:	463c      	mov	r4, r7
 80080b4:	e7e0      	b.n	8008078 <_realloc_r+0x1e>

080080b6 <__ascii_wctomb>:
 80080b6:	4603      	mov	r3, r0
 80080b8:	4608      	mov	r0, r1
 80080ba:	b141      	cbz	r1, 80080ce <__ascii_wctomb+0x18>
 80080bc:	2aff      	cmp	r2, #255	@ 0xff
 80080be:	d904      	bls.n	80080ca <__ascii_wctomb+0x14>
 80080c0:	228a      	movs	r2, #138	@ 0x8a
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	f04f 30ff 	mov.w	r0, #4294967295
 80080c8:	4770      	bx	lr
 80080ca:	700a      	strb	r2, [r1, #0]
 80080cc:	2001      	movs	r0, #1
 80080ce:	4770      	bx	lr

080080d0 <_raise_r>:
 80080d0:	291f      	cmp	r1, #31
 80080d2:	b538      	push	{r3, r4, r5, lr}
 80080d4:	4605      	mov	r5, r0
 80080d6:	460c      	mov	r4, r1
 80080d8:	d904      	bls.n	80080e4 <_raise_r+0x14>
 80080da:	2316      	movs	r3, #22
 80080dc:	6003      	str	r3, [r0, #0]
 80080de:	f04f 30ff 	mov.w	r0, #4294967295
 80080e2:	bd38      	pop	{r3, r4, r5, pc}
 80080e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80080e6:	b112      	cbz	r2, 80080ee <_raise_r+0x1e>
 80080e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080ec:	b94b      	cbnz	r3, 8008102 <_raise_r+0x32>
 80080ee:	4628      	mov	r0, r5
 80080f0:	f000 f830 	bl	8008154 <_getpid_r>
 80080f4:	4622      	mov	r2, r4
 80080f6:	4601      	mov	r1, r0
 80080f8:	4628      	mov	r0, r5
 80080fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080fe:	f000 b817 	b.w	8008130 <_kill_r>
 8008102:	2b01      	cmp	r3, #1
 8008104:	d00a      	beq.n	800811c <_raise_r+0x4c>
 8008106:	1c59      	adds	r1, r3, #1
 8008108:	d103      	bne.n	8008112 <_raise_r+0x42>
 800810a:	2316      	movs	r3, #22
 800810c:	6003      	str	r3, [r0, #0]
 800810e:	2001      	movs	r0, #1
 8008110:	e7e7      	b.n	80080e2 <_raise_r+0x12>
 8008112:	2100      	movs	r1, #0
 8008114:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008118:	4620      	mov	r0, r4
 800811a:	4798      	blx	r3
 800811c:	2000      	movs	r0, #0
 800811e:	e7e0      	b.n	80080e2 <_raise_r+0x12>

08008120 <raise>:
 8008120:	4b02      	ldr	r3, [pc, #8]	@ (800812c <raise+0xc>)
 8008122:	4601      	mov	r1, r0
 8008124:	6818      	ldr	r0, [r3, #0]
 8008126:	f7ff bfd3 	b.w	80080d0 <_raise_r>
 800812a:	bf00      	nop
 800812c:	20000018 	.word	0x20000018

08008130 <_kill_r>:
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	4d07      	ldr	r5, [pc, #28]	@ (8008150 <_kill_r+0x20>)
 8008134:	2300      	movs	r3, #0
 8008136:	4604      	mov	r4, r0
 8008138:	4608      	mov	r0, r1
 800813a:	4611      	mov	r1, r2
 800813c:	602b      	str	r3, [r5, #0]
 800813e:	f7fa f805 	bl	800214c <_kill>
 8008142:	1c43      	adds	r3, r0, #1
 8008144:	d102      	bne.n	800814c <_kill_r+0x1c>
 8008146:	682b      	ldr	r3, [r5, #0]
 8008148:	b103      	cbz	r3, 800814c <_kill_r+0x1c>
 800814a:	6023      	str	r3, [r4, #0]
 800814c:	bd38      	pop	{r3, r4, r5, pc}
 800814e:	bf00      	nop
 8008150:	20000d3c 	.word	0x20000d3c

08008154 <_getpid_r>:
 8008154:	f7f9 bff2 	b.w	800213c <_getpid>

08008158 <_malloc_usable_size_r>:
 8008158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800815c:	1f18      	subs	r0, r3, #4
 800815e:	2b00      	cmp	r3, #0
 8008160:	bfbc      	itt	lt
 8008162:	580b      	ldrlt	r3, [r1, r0]
 8008164:	18c0      	addlt	r0, r0, r3
 8008166:	4770      	bx	lr

08008168 <_init>:
 8008168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816a:	bf00      	nop
 800816c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800816e:	bc08      	pop	{r3}
 8008170:	469e      	mov	lr, r3
 8008172:	4770      	bx	lr

08008174 <_fini>:
 8008174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008176:	bf00      	nop
 8008178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800817a:	bc08      	pop	{r3}
 800817c:	469e      	mov	lr, r3
 800817e:	4770      	bx	lr
