
kjh5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043f4  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800458c  0800458c  0000558c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045a4  080045a4  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080045a4  080045a4  000055a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045ac  080045ac  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045ac  080045ac  000055ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045b0  080045b0  000055b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080045b4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000000c  080045c0  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  080045c0  0000619c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb05  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bfc  00000000  00000000  00012b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  00014740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c0  00000000  00000000  000153a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015868  00000000  00000000  00015d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd11  00000000  00000000  0002b5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a9c7  00000000  00000000  000392e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3ca8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003578  00000000  00000000  000c3cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000c7264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004574 	.word	0x08004574

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004574 	.word	0x08004574

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b96a 	b.w	8000d00 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	460c      	mov	r4, r1
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d14e      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a50:	4694      	mov	ip, r2
 8000a52:	458c      	cmp	ip, r1
 8000a54:	4686      	mov	lr, r0
 8000a56:	fab2 f282 	clz	r2, r2
 8000a5a:	d962      	bls.n	8000b22 <__udivmoddi4+0xde>
 8000a5c:	b14a      	cbz	r2, 8000a72 <__udivmoddi4+0x2e>
 8000a5e:	f1c2 0320 	rsb	r3, r2, #32
 8000a62:	4091      	lsls	r1, r2
 8000a64:	fa20 f303 	lsr.w	r3, r0, r3
 8000a68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6c:	4319      	orrs	r1, r3
 8000a6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a76:	fa1f f68c 	uxth.w	r6, ip
 8000a7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a82:	fb07 1114 	mls	r1, r7, r4, r1
 8000a86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a8a:	fb04 f106 	mul.w	r1, r4, r6
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a9a:	f080 8112 	bcs.w	8000cc2 <__udivmoddi4+0x27e>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 810f 	bls.w	8000cc2 <__udivmoddi4+0x27e>
 8000aa4:	3c02      	subs	r4, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a59      	subs	r1, r3, r1
 8000aaa:	fa1f f38e 	uxth.w	r3, lr
 8000aae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ab2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ab6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aba:	fb00 f606 	mul.w	r6, r0, r6
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x94>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aca:	f080 80fc 	bcs.w	8000cc6 <__udivmoddi4+0x282>
 8000ace:	429e      	cmp	r6, r3
 8000ad0:	f240 80f9 	bls.w	8000cc6 <__udivmoddi4+0x282>
 8000ad4:	4463      	add	r3, ip
 8000ad6:	3802      	subs	r0, #2
 8000ad8:	1b9b      	subs	r3, r3, r6
 8000ada:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ade:	2100      	movs	r1, #0
 8000ae0:	b11d      	cbz	r5, 8000aea <__udivmoddi4+0xa6>
 8000ae2:	40d3      	lsrs	r3, r2
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	e9c5 3200 	strd	r3, r2, [r5]
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d905      	bls.n	8000afe <__udivmoddi4+0xba>
 8000af2:	b10d      	cbz	r5, 8000af8 <__udivmoddi4+0xb4>
 8000af4:	e9c5 0100 	strd	r0, r1, [r5]
 8000af8:	2100      	movs	r1, #0
 8000afa:	4608      	mov	r0, r1
 8000afc:	e7f5      	b.n	8000aea <__udivmoddi4+0xa6>
 8000afe:	fab3 f183 	clz	r1, r3
 8000b02:	2900      	cmp	r1, #0
 8000b04:	d146      	bne.n	8000b94 <__udivmoddi4+0x150>
 8000b06:	42a3      	cmp	r3, r4
 8000b08:	d302      	bcc.n	8000b10 <__udivmoddi4+0xcc>
 8000b0a:	4290      	cmp	r0, r2
 8000b0c:	f0c0 80f0 	bcc.w	8000cf0 <__udivmoddi4+0x2ac>
 8000b10:	1a86      	subs	r6, r0, r2
 8000b12:	eb64 0303 	sbc.w	r3, r4, r3
 8000b16:	2001      	movs	r0, #1
 8000b18:	2d00      	cmp	r5, #0
 8000b1a:	d0e6      	beq.n	8000aea <__udivmoddi4+0xa6>
 8000b1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b20:	e7e3      	b.n	8000aea <__udivmoddi4+0xa6>
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	f040 8090 	bne.w	8000c48 <__udivmoddi4+0x204>
 8000b28:	eba1 040c 	sub.w	r4, r1, ip
 8000b2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b30:	fa1f f78c 	uxth.w	r7, ip
 8000b34:	2101      	movs	r1, #1
 8000b36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b46:	fb07 f006 	mul.w	r0, r7, r6
 8000b4a:	4298      	cmp	r0, r3
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x11c>
 8000b4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x11a>
 8000b58:	4298      	cmp	r0, r3
 8000b5a:	f200 80cd 	bhi.w	8000cf8 <__udivmoddi4+0x2b4>
 8000b5e:	4626      	mov	r6, r4
 8000b60:	1a1c      	subs	r4, r3, r0
 8000b62:	fa1f f38e 	uxth.w	r3, lr
 8000b66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b72:	fb00 f707 	mul.w	r7, r0, r7
 8000b76:	429f      	cmp	r7, r3
 8000b78:	d908      	bls.n	8000b8c <__udivmoddi4+0x148>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b82:	d202      	bcs.n	8000b8a <__udivmoddi4+0x146>
 8000b84:	429f      	cmp	r7, r3
 8000b86:	f200 80b0 	bhi.w	8000cea <__udivmoddi4+0x2a6>
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	1bdb      	subs	r3, r3, r7
 8000b8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b92:	e7a5      	b.n	8000ae0 <__udivmoddi4+0x9c>
 8000b94:	f1c1 0620 	rsb	r6, r1, #32
 8000b98:	408b      	lsls	r3, r1
 8000b9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b9e:	431f      	orrs	r7, r3
 8000ba0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ba4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ba8:	ea43 030c 	orr.w	r3, r3, ip
 8000bac:	40f4      	lsrs	r4, r6
 8000bae:	fa00 f801 	lsl.w	r8, r0, r1
 8000bb2:	0c38      	lsrs	r0, r7, #16
 8000bb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bbc:	fa1f fc87 	uxth.w	ip, r7
 8000bc0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bc4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bc8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bcc:	45a1      	cmp	r9, r4
 8000bce:	fa02 f201 	lsl.w	r2, r2, r1
 8000bd2:	d90a      	bls.n	8000bea <__udivmoddi4+0x1a6>
 8000bd4:	193c      	adds	r4, r7, r4
 8000bd6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bda:	f080 8084 	bcs.w	8000ce6 <__udivmoddi4+0x2a2>
 8000bde:	45a1      	cmp	r9, r4
 8000be0:	f240 8081 	bls.w	8000ce6 <__udivmoddi4+0x2a2>
 8000be4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000be8:	443c      	add	r4, r7
 8000bea:	eba4 0409 	sub.w	r4, r4, r9
 8000bee:	fa1f f983 	uxth.w	r9, r3
 8000bf2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bf6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bfa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bfe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c02:	45a4      	cmp	ip, r4
 8000c04:	d907      	bls.n	8000c16 <__udivmoddi4+0x1d2>
 8000c06:	193c      	adds	r4, r7, r4
 8000c08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c0c:	d267      	bcs.n	8000cde <__udivmoddi4+0x29a>
 8000c0e:	45a4      	cmp	ip, r4
 8000c10:	d965      	bls.n	8000cde <__udivmoddi4+0x29a>
 8000c12:	3b02      	subs	r3, #2
 8000c14:	443c      	add	r4, r7
 8000c16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c1e:	eba4 040c 	sub.w	r4, r4, ip
 8000c22:	429c      	cmp	r4, r3
 8000c24:	46ce      	mov	lr, r9
 8000c26:	469c      	mov	ip, r3
 8000c28:	d351      	bcc.n	8000cce <__udivmoddi4+0x28a>
 8000c2a:	d04e      	beq.n	8000cca <__udivmoddi4+0x286>
 8000c2c:	b155      	cbz	r5, 8000c44 <__udivmoddi4+0x200>
 8000c2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c32:	eb64 040c 	sbc.w	r4, r4, ip
 8000c36:	fa04 f606 	lsl.w	r6, r4, r6
 8000c3a:	40cb      	lsrs	r3, r1
 8000c3c:	431e      	orrs	r6, r3
 8000c3e:	40cc      	lsrs	r4, r1
 8000c40:	e9c5 6400 	strd	r6, r4, [r5]
 8000c44:	2100      	movs	r1, #0
 8000c46:	e750      	b.n	8000aea <__udivmoddi4+0xa6>
 8000c48:	f1c2 0320 	rsb	r3, r2, #32
 8000c4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c54:	fa24 f303 	lsr.w	r3, r4, r3
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	430c      	orrs	r4, r1
 8000c5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c64:	fa1f f78c 	uxth.w	r7, ip
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c70:	0c23      	lsrs	r3, r4, #16
 8000c72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c76:	fb00 f107 	mul.w	r1, r0, r7
 8000c7a:	4299      	cmp	r1, r3
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0x24c>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c86:	d22c      	bcs.n	8000ce2 <__udivmoddi4+0x29e>
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	d92a      	bls.n	8000ce2 <__udivmoddi4+0x29e>
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	4463      	add	r3, ip
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	b2a4      	uxth	r4, r4
 8000c94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c98:	fb08 3311 	mls	r3, r8, r1, r3
 8000c9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca0:	fb01 f307 	mul.w	r3, r1, r7
 8000ca4:	42a3      	cmp	r3, r4
 8000ca6:	d908      	bls.n	8000cba <__udivmoddi4+0x276>
 8000ca8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cb0:	d213      	bcs.n	8000cda <__udivmoddi4+0x296>
 8000cb2:	42a3      	cmp	r3, r4
 8000cb4:	d911      	bls.n	8000cda <__udivmoddi4+0x296>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	4464      	add	r4, ip
 8000cba:	1ae4      	subs	r4, r4, r3
 8000cbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cc0:	e739      	b.n	8000b36 <__udivmoddi4+0xf2>
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	e6f0      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	e706      	b.n	8000ad8 <__udivmoddi4+0x94>
 8000cca:	45c8      	cmp	r8, r9
 8000ccc:	d2ae      	bcs.n	8000c2c <__udivmoddi4+0x1e8>
 8000cce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cd6:	3801      	subs	r0, #1
 8000cd8:	e7a8      	b.n	8000c2c <__udivmoddi4+0x1e8>
 8000cda:	4631      	mov	r1, r6
 8000cdc:	e7ed      	b.n	8000cba <__udivmoddi4+0x276>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	e799      	b.n	8000c16 <__udivmoddi4+0x1d2>
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	e7d4      	b.n	8000c90 <__udivmoddi4+0x24c>
 8000ce6:	46d6      	mov	lr, sl
 8000ce8:	e77f      	b.n	8000bea <__udivmoddi4+0x1a6>
 8000cea:	4463      	add	r3, ip
 8000cec:	3802      	subs	r0, #2
 8000cee:	e74d      	b.n	8000b8c <__udivmoddi4+0x148>
 8000cf0:	4606      	mov	r6, r0
 8000cf2:	4623      	mov	r3, r4
 8000cf4:	4608      	mov	r0, r1
 8000cf6:	e70f      	b.n	8000b18 <__udivmoddi4+0xd4>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	e730      	b.n	8000b60 <__udivmoddi4+0x11c>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	0000      	movs	r0, r0
	...

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0c:	f000 fd86 	bl	800181c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d10:	f000 f892 	bl	8000e38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d14:	f000 fa1c 	bl	8001150 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d18:	f000 f9c6 	bl	80010a8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000d1c:	f000 f942 	bl	8000fa4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000d20:	f000 f8f4 	bl	8000f0c <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8000d24:	f000 f9ea 	bl	80010fc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);					//channel1 PWM start
 8000d28:	2100      	movs	r1, #0
 8000d2a:	483b      	ldr	r0, [pc, #236]	@ (8000e18 <main+0x110>)
 8000d2c:	f001 ff02 	bl	8002b34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);					//channel2 PWM start
 8000d30:	2104      	movs	r1, #4
 8000d32:	4839      	ldr	r0, [pc, #228]	@ (8000e18 <main+0x110>)
 8000d34:	f001 fefe 	bl	8002b34 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim2);
 8000d38:	4838      	ldr	r0, [pc, #224]	@ (8000e1c <main+0x114>)
 8000d3a:	f001 fe47 	bl	80029cc <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	count = count +1;
 8000d3e:	4b38      	ldr	r3, [pc, #224]	@ (8000e20 <main+0x118>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	3301      	adds	r3, #1
 8000d44:	4a36      	ldr	r2, [pc, #216]	@ (8000e20 <main+0x118>)
 8000d46:	6013      	str	r3, [r2, #0]

  	if(count%10 == 0){
 8000d48:	4b35      	ldr	r3, [pc, #212]	@ (8000e20 <main+0x118>)
 8000d4a:	6819      	ldr	r1, [r3, #0]
 8000d4c:	4b35      	ldr	r3, [pc, #212]	@ (8000e24 <main+0x11c>)
 8000d4e:	fba3 2301 	umull	r2, r3, r3, r1
 8000d52:	08da      	lsrs	r2, r3, #3
 8000d54:	4613      	mov	r3, r2
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	1aca      	subs	r2, r1, r3
 8000d5e:	2a00      	cmp	r2, #0
 8000d60:	d146      	bne.n	8000df0 <main+0xe8>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); // Trig HIGH
 8000d62:	2201      	movs	r2, #1
 8000d64:	2101      	movs	r1, #1
 8000d66:	4830      	ldr	r0, [pc, #192]	@ (8000e28 <main+0x120>)
 8000d68:	f001 f92e 	bl	8001fc8 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000d6c:	200a      	movs	r0, #10
 8000d6e:	f000 fdc7 	bl	8001900 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // Trig LOW
 8000d72:	2200      	movs	r2, #0
 8000d74:	2101      	movs	r1, #1
 8000d76:	482c      	ldr	r0, [pc, #176]	@ (8000e28 <main+0x120>)
 8000d78:	f001 f926 	bl	8001fc8 <HAL_GPIO_WritePin>


			while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET); // until echo pin LOW
 8000d7c:	bf00      	nop
 8000d7e:	2102      	movs	r1, #2
 8000d80:	4829      	ldr	r0, [pc, #164]	@ (8000e28 <main+0x120>)
 8000d82:	f001 f909 	bl	8001f98 <HAL_GPIO_ReadPin>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d0f8      	beq.n	8000d7e <main+0x76>
			startTime = __HAL_TIM_GET_COUNTER(&htim2);
 8000d8c:	4b23      	ldr	r3, [pc, #140]	@ (8000e1c <main+0x114>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d92:	4a26      	ldr	r2, [pc, #152]	@ (8000e2c <main+0x124>)
 8000d94:	6013      	str	r3, [r2, #0]

			while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET); // until echo pin HIGH
 8000d96:	bf00      	nop
 8000d98:	2102      	movs	r1, #2
 8000d9a:	4823      	ldr	r0, [pc, #140]	@ (8000e28 <main+0x120>)
 8000d9c:	f001 f8fc 	bl	8001f98 <HAL_GPIO_ReadPin>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d0f8      	beq.n	8000d98 <main+0x90>
			endTime = __HAL_TIM_GET_COUNTER(&htim2);
 8000da6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e1c <main+0x114>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dac:	4a20      	ldr	r2, [pc, #128]	@ (8000e30 <main+0x128>)
 8000dae:	6013      	str	r3, [r2, #0]

			// 거리 계산
			distance = (endTime - startTime) * 0.0343 / 2;
 8000db0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e30 <main+0x128>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e2c <main+0x124>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fb4e 	bl	800045c <__aeabi_ui2d>
 8000dc0:	a313      	add	r3, pc, #76	@ (adr r3, 8000e10 <main+0x108>)
 8000dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc6:	f7ff fbc3 	bl	8000550 <__aeabi_dmul>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	460b      	mov	r3, r1
 8000dce:	4610      	mov	r0, r2
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f04f 0200 	mov.w	r2, #0
 8000dd6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dda:	f7ff fce3 	bl	80007a4 <__aeabi_ddiv>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4610      	mov	r0, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	f7ff fdc5 	bl	8000974 <__aeabi_d2f>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4a11      	ldr	r2, [pc, #68]	@ (8000e34 <main+0x12c>)
 8000dee:	6013      	str	r3, [r2, #0]
  	}

		if(distance < 15)
 8000df0:	4b10      	ldr	r3, [pc, #64]	@ (8000e34 <main+0x12c>)
 8000df2:	edd3 7a00 	vldr	s15, [r3]
 8000df6:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8000dfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e02:	d502      	bpl.n	8000e0a <main+0x102>
		{
			stop();
 8000e04:	f000 fafa 	bl	80013fc <stop>
 8000e08:	e799      	b.n	8000d3e <main+0x36>
		}
		else
		{
			l_mode();
 8000e0a:	f000 fb19 	bl	8001440 <l_mode>
  	count = count +1;
 8000e0e:	e796      	b.n	8000d3e <main+0x36>
 8000e10:	04816f00 	.word	0x04816f00
 8000e14:	3fa18fc5 	.word	0x3fa18fc5
 8000e18:	20000070 	.word	0x20000070
 8000e1c:	20000028 	.word	0x20000028
 8000e20:	20000158 	.word	0x20000158
 8000e24:	cccccccd 	.word	0xcccccccd
 8000e28:	40020000 	.word	0x40020000
 8000e2c:	2000014c 	.word	0x2000014c
 8000e30:	20000150 	.word	0x20000150
 8000e34:	20000154 	.word	0x20000154

08000e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b094      	sub	sp, #80	@ 0x50
 8000e3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3e:	f107 0320 	add.w	r3, r7, #32
 8000e42:	2230      	movs	r2, #48	@ 0x30
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f003 fb68 	bl	800451c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	4b28      	ldr	r3, [pc, #160]	@ (8000f04 <SystemClock_Config+0xcc>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e64:	4a27      	ldr	r2, [pc, #156]	@ (8000f04 <SystemClock_Config+0xcc>)
 8000e66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e6c:	4b25      	ldr	r3, [pc, #148]	@ (8000f04 <SystemClock_Config+0xcc>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e78:	2300      	movs	r3, #0
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	4b22      	ldr	r3, [pc, #136]	@ (8000f08 <SystemClock_Config+0xd0>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a21      	ldr	r2, [pc, #132]	@ (8000f08 <SystemClock_Config+0xd0>)
 8000e82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	4b1f      	ldr	r3, [pc, #124]	@ (8000f08 <SystemClock_Config+0xd0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e94:	2302      	movs	r3, #2
 8000e96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e9c:	2310      	movs	r3, #16
 8000e9e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ea8:	2310      	movs	r3, #16
 8000eaa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000eac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000eb0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eba:	f107 0320 	add.w	r3, r7, #32
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f001 f89c 	bl	8001ffc <HAL_RCC_OscConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000eca:	f000 faef 	bl	80014ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ece:	230f      	movs	r3, #15
 8000ed0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ede:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	2102      	movs	r1, #2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 fafe 	bl	80024ec <HAL_RCC_ClockConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ef6:	f000 fad9 	bl	80014ac <Error_Handler>
  }
}
 8000efa:	bf00      	nop
 8000efc:	3750      	adds	r7, #80	@ 0x50
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40007000 	.word	0x40007000

08000f0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f12:	f107 0308 	add.w	r3, r7, #8
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f20:	463b      	mov	r3, r7
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f28:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa0 <MX_TIM2_Init+0x94>)
 8000f2a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000f30:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa0 <MX_TIM2_Init+0x94>)
 8000f32:	2253      	movs	r2, #83	@ 0x53
 8000f34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f36:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <MX_TIM2_Init+0x94>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f3c:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <MX_TIM2_Init+0x94>)
 8000f3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f44:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <MX_TIM2_Init+0x94>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <MX_TIM2_Init+0x94>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f50:	4813      	ldr	r0, [pc, #76]	@ (8000fa0 <MX_TIM2_Init+0x94>)
 8000f52:	f001 fceb 	bl	800292c <HAL_TIM_Base_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f5c:	f000 faa6 	bl	80014ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f66:	f107 0308 	add.w	r3, r7, #8
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	480c      	ldr	r0, [pc, #48]	@ (8000fa0 <MX_TIM2_Init+0x94>)
 8000f6e:	f001 ff53 	bl	8002e18 <HAL_TIM_ConfigClockSource>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f78:	f000 fa98 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f84:	463b      	mov	r3, r7
 8000f86:	4619      	mov	r1, r3
 8000f88:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <MX_TIM2_Init+0x94>)
 8000f8a:	f002 fae5 	bl	8003558 <HAL_TIMEx_MasterConfigSynchronization>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f94:	f000 fa8a 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000028 	.word	0x20000028

08000fa4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08e      	sub	sp, #56	@ 0x38
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000faa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb8:	f107 0320 	add.w	r3, r7, #32
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
 8000fd0:	615a      	str	r2, [r3, #20]
 8000fd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fd4:	4b32      	ldr	r3, [pc, #200]	@ (80010a0 <MX_TIM3_Init+0xfc>)
 8000fd6:	4a33      	ldr	r2, [pc, #204]	@ (80010a4 <MX_TIM3_Init+0x100>)
 8000fd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000fda:	4b31      	ldr	r3, [pc, #196]	@ (80010a0 <MX_TIM3_Init+0xfc>)
 8000fdc:	2253      	movs	r2, #83	@ 0x53
 8000fde:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe0:	4b2f      	ldr	r3, [pc, #188]	@ (80010a0 <MX_TIM3_Init+0xfc>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000fe6:	4b2e      	ldr	r3, [pc, #184]	@ (80010a0 <MX_TIM3_Init+0xfc>)
 8000fe8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000fec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fee:	4b2c      	ldr	r3, [pc, #176]	@ (80010a0 <MX_TIM3_Init+0xfc>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	@ (80010a0 <MX_TIM3_Init+0xfc>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ffa:	4829      	ldr	r0, [pc, #164]	@ (80010a0 <MX_TIM3_Init+0xfc>)
 8000ffc:	f001 fc96 	bl	800292c <HAL_TIM_Base_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001006:	f000 fa51 	bl	80014ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800100a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800100e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001010:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001014:	4619      	mov	r1, r3
 8001016:	4822      	ldr	r0, [pc, #136]	@ (80010a0 <MX_TIM3_Init+0xfc>)
 8001018:	f001 fefe 	bl	8002e18 <HAL_TIM_ConfigClockSource>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001022:	f000 fa43 	bl	80014ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001026:	481e      	ldr	r0, [pc, #120]	@ (80010a0 <MX_TIM3_Init+0xfc>)
 8001028:	f001 fd2a 	bl	8002a80 <HAL_TIM_PWM_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001032:	f000 fa3b 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800103e:	f107 0320 	add.w	r3, r7, #32
 8001042:	4619      	mov	r1, r3
 8001044:	4816      	ldr	r0, [pc, #88]	@ (80010a0 <MX_TIM3_Init+0xfc>)
 8001046:	f002 fa87 	bl	8003558 <HAL_TIMEx_MasterConfigSynchronization>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001050:	f000 fa2c 	bl	80014ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001054:	2360      	movs	r3, #96	@ 0x60
 8001056:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2200      	movs	r2, #0
 8001068:	4619      	mov	r1, r3
 800106a:	480d      	ldr	r0, [pc, #52]	@ (80010a0 <MX_TIM3_Init+0xfc>)
 800106c:	f001 fe12 	bl	8002c94 <HAL_TIM_PWM_ConfigChannel>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001076:	f000 fa19 	bl	80014ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2204      	movs	r2, #4
 800107e:	4619      	mov	r1, r3
 8001080:	4807      	ldr	r0, [pc, #28]	@ (80010a0 <MX_TIM3_Init+0xfc>)
 8001082:	f001 fe07 	bl	8002c94 <HAL_TIM_PWM_ConfigChannel>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800108c:	f000 fa0e 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001090:	4803      	ldr	r0, [pc, #12]	@ (80010a0 <MX_TIM3_Init+0xfc>)
 8001092:	f000 fa6f 	bl	8001574 <HAL_TIM_MspPostInit>

}
 8001096:	bf00      	nop
 8001098:	3738      	adds	r7, #56	@ 0x38
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000070 	.word	0x20000070
 80010a4:	40000400 	.word	0x40000400

080010a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010ac:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	@ (80010f8 <MX_USART2_UART_Init+0x50>)
 80010b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010b2:	4b10      	ldr	r3, [pc, #64]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010c6:	4b0b      	ldr	r3, [pc, #44]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010cc:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010ce:	220c      	movs	r2, #12
 80010d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d2:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d8:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010de:	4805      	ldr	r0, [pc, #20]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010e0:	f002 faa8 	bl	8003634 <HAL_UART_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ea:	f000 f9df 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200000b8 	.word	0x200000b8
 80010f8:	40004400 	.word	0x40004400

080010fc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001100:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <MX_USART6_UART_Init+0x4c>)
 8001102:	4a12      	ldr	r2, [pc, #72]	@ (800114c <MX_USART6_UART_Init+0x50>)
 8001104:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001106:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <MX_USART6_UART_Init+0x4c>)
 8001108:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800110c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800110e:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <MX_USART6_UART_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001114:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <MX_USART6_UART_Init+0x4c>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800111a:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <MX_USART6_UART_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001120:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <MX_USART6_UART_Init+0x4c>)
 8001122:	220c      	movs	r2, #12
 8001124:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001126:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <MX_USART6_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800112c:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <MX_USART6_UART_Init+0x4c>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001132:	4805      	ldr	r0, [pc, #20]	@ (8001148 <MX_USART6_UART_Init+0x4c>)
 8001134:	f002 fa7e 	bl	8003634 <HAL_UART_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800113e:	f000 f9b5 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000100 	.word	0x20000100
 800114c:	40011400 	.word	0x40011400

08001150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	@ 0x28
 8001154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b4f      	ldr	r3, [pc, #316]	@ (80012a8 <MX_GPIO_Init+0x158>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a4e      	ldr	r2, [pc, #312]	@ (80012a8 <MX_GPIO_Init+0x158>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b4c      	ldr	r3, [pc, #304]	@ (80012a8 <MX_GPIO_Init+0x158>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b48      	ldr	r3, [pc, #288]	@ (80012a8 <MX_GPIO_Init+0x158>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a47      	ldr	r2, [pc, #284]	@ (80012a8 <MX_GPIO_Init+0x158>)
 800118c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b45      	ldr	r3, [pc, #276]	@ (80012a8 <MX_GPIO_Init+0x158>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	4b41      	ldr	r3, [pc, #260]	@ (80012a8 <MX_GPIO_Init+0x158>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a40      	ldr	r2, [pc, #256]	@ (80012a8 <MX_GPIO_Init+0x158>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b3e      	ldr	r3, [pc, #248]	@ (80012a8 <MX_GPIO_Init+0x158>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	4b3a      	ldr	r3, [pc, #232]	@ (80012a8 <MX_GPIO_Init+0x158>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a39      	ldr	r2, [pc, #228]	@ (80012a8 <MX_GPIO_Init+0x158>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b37      	ldr	r3, [pc, #220]	@ (80012a8 <MX_GPIO_Init+0x158>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin|IN2_Pin|IN3_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f240 3121 	movw	r1, #801	@ 0x321
 80011dc:	4833      	ldr	r0, [pc, #204]	@ (80012ac <MX_GPIO_Init+0x15c>)
 80011de:	f000 fef3 	bl	8001fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011e8:	4831      	ldr	r0, [pc, #196]	@ (80012b0 <MX_GPIO_Init+0x160>)
 80011ea:	f000 feed 	bl	8001fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2180      	movs	r1, #128	@ 0x80
 80011f2:	4830      	ldr	r0, [pc, #192]	@ (80012b4 <MX_GPIO_Init+0x164>)
 80011f4:	f000 fee8 	bl	8001fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011fe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	4829      	ldr	r0, [pc, #164]	@ (80012b4 <MX_GPIO_Init+0x164>)
 8001210:	f000 fd3e 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD2_Pin IN2_Pin IN3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin|IN2_Pin|IN3_Pin;
 8001214:	f240 3321 	movw	r3, #801	@ 0x321
 8001218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	481f      	ldr	r0, [pc, #124]	@ (80012ac <MX_GPIO_Init+0x15c>)
 800122e:	f000 fd2f 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 L_Sensor_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|L_Sensor_Pin;
 8001232:	f240 4302 	movw	r3, #1026	@ 0x402
 8001236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001238:	2300      	movs	r3, #0
 800123a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	4819      	ldr	r0, [pc, #100]	@ (80012ac <MX_GPIO_Init+0x15c>)
 8001248:	f000 fd22 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN1_Pin */
  GPIO_InitStruct.Pin = IN1_Pin;
 800124c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2301      	movs	r3, #1
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN1_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4812      	ldr	r0, [pc, #72]	@ (80012b0 <MX_GPIO_Init+0x160>)
 8001266:	f000 fd13 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN4_Pin */
  GPIO_InitStruct.Pin = IN4_Pin;
 800126a:	2380      	movs	r3, #128	@ 0x80
 800126c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126e:	2301      	movs	r3, #1
 8001270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN4_GPIO_Port, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	480c      	ldr	r0, [pc, #48]	@ (80012b4 <MX_GPIO_Init+0x164>)
 8001282:	f000 fd05 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : R_Sensor_Pin */
  GPIO_InitStruct.Pin = R_Sensor_Pin;
 8001286:	2320      	movs	r3, #32
 8001288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128a:	2300      	movs	r3, #0
 800128c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R_Sensor_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <MX_GPIO_Init+0x160>)
 800129a:	f000 fcf9 	bl	8001c90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	@ 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020400 	.word	0x40020400
 80012b4:	40020800 	.word	0x40020800

080012b8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	static int i = 0;
	if(huart->Instance == USART6)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a19      	ldr	r2, [pc, #100]	@ (800132c <HAL_UART_RxCpltCallback+0x74>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d127      	bne.n	800131a <HAL_UART_RxCpltCallback+0x62>
	{
		if(cdata !='\n' && cdata !='\r')
 80012ca:	4b19      	ldr	r3, [pc, #100]	@ (8001330 <HAL_UART_RxCpltCallback+0x78>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b0a      	cmp	r3, #10
 80012d0:	d00c      	beq.n	80012ec <HAL_UART_RxCpltCallback+0x34>
 80012d2:	4b17      	ldr	r3, [pc, #92]	@ (8001330 <HAL_UART_RxCpltCallback+0x78>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b0d      	cmp	r3, #13
 80012d8:	d008      	beq.n	80012ec <HAL_UART_RxCpltCallback+0x34>
		{
			rx2Data[i++] = cdata;
 80012da:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <HAL_UART_RxCpltCallback+0x7c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	4914      	ldr	r1, [pc, #80]	@ (8001334 <HAL_UART_RxCpltCallback+0x7c>)
 80012e2:	600a      	str	r2, [r1, #0]
 80012e4:	4a12      	ldr	r2, [pc, #72]	@ (8001330 <HAL_UART_RxCpltCallback+0x78>)
 80012e6:	7811      	ldrb	r1, [r2, #0]
 80012e8:	4a13      	ldr	r2, [pc, #76]	@ (8001338 <HAL_UART_RxCpltCallback+0x80>)
 80012ea:	54d1      	strb	r1, [r2, r3]
		}
		if(cdata !='\n' || cdata !='\r' || i>=sizeof(rx2Data)-1)
 80012ec:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <HAL_UART_RxCpltCallback+0x78>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b0a      	cmp	r3, #10
 80012f2:	d107      	bne.n	8001304 <HAL_UART_RxCpltCallback+0x4c>
 80012f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001330 <HAL_UART_RxCpltCallback+0x78>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b0d      	cmp	r3, #13
 80012fa:	d103      	bne.n	8001304 <HAL_UART_RxCpltCallback+0x4c>
 80012fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001334 <HAL_UART_RxCpltCallback+0x7c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b30      	cmp	r3, #48	@ 0x30
 8001302:	d90a      	bls.n	800131a <HAL_UART_RxCpltCallback+0x62>
		{
			rx2Data[i] = '\0';
 8001304:	4b0b      	ldr	r3, [pc, #44]	@ (8001334 <HAL_UART_RxCpltCallback+0x7c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0b      	ldr	r2, [pc, #44]	@ (8001338 <HAL_UART_RxCpltCallback+0x80>)
 800130a:	2100      	movs	r1, #0
 800130c:	54d1      	strb	r1, [r2, r3]
			rx2Flag = 1;
 800130e:	4b0b      	ldr	r3, [pc, #44]	@ (800133c <HAL_UART_RxCpltCallback+0x84>)
 8001310:	2201      	movs	r2, #1
 8001312:	701a      	strb	r2, [r3, #0]
			i= 0;
 8001314:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <HAL_UART_RxCpltCallback+0x7c>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(&huart6, &cdata, 1);
 800131a:	2201      	movs	r2, #1
 800131c:	4904      	ldr	r1, [pc, #16]	@ (8001330 <HAL_UART_RxCpltCallback+0x78>)
 800131e:	4808      	ldr	r0, [pc, #32]	@ (8001340 <HAL_UART_RxCpltCallback+0x88>)
 8001320:	f002 f9d8 	bl	80036d4 <HAL_UART_Receive_IT>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40011400 	.word	0x40011400
 8001330:	20000192 	.word	0x20000192
 8001334:	20000194 	.word	0x20000194
 8001338:	20000160 	.word	0x20000160
 800133c:	2000015c 	.word	0x2000015c
 8001340:	20000100 	.word	0x20000100

08001344 <go>:

static void go(void){							//go foward
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001348:	2201      	movs	r2, #1
 800134a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800134e:	4810      	ldr	r0, [pc, #64]	@ (8001390 <go+0x4c>)
 8001350:	f000 fe3a 	bl	8001fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 8001354:	2201      	movs	r2, #1
 8001356:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800135a:	480e      	ldr	r0, [pc, #56]	@ (8001394 <go+0x50>)
 800135c:	f000 fe34 	bl	8001fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001366:	480b      	ldr	r0, [pc, #44]	@ (8001394 <go+0x50>)
 8001368:	f000 fe2e 	bl	8001fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	2180      	movs	r1, #128	@ 0x80
 8001370:	4809      	ldr	r0, [pc, #36]	@ (8001398 <go+0x54>)
 8001372:	f000 fe29 	bl	8001fc8 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,4499);		//right wheel PWM
 8001376:	4b09      	ldr	r3, [pc, #36]	@ (800139c <go+0x58>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f241 1293 	movw	r2, #4499	@ 0x1193
 800137e:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,4499); 		//left wheel PWM
 8001380:	4b06      	ldr	r3, [pc, #24]	@ (800139c <go+0x58>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f241 1293 	movw	r2, #4499	@ 0x1193
 8001388:	639a      	str	r2, [r3, #56]	@ 0x38

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40020400 	.word	0x40020400
 8001394:	40020000 	.word	0x40020000
 8001398:	40020800 	.word	0x40020800
 800139c:	20000070 	.word	0x20000070

080013a0 <turn_right>:

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,7999);	//left wheel PWM
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,7999);
}
static void turn_right(void)				//turn right
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013aa:	4810      	ldr	r0, [pc, #64]	@ (80013ec <turn_right+0x4c>)
 80013ac:	f000 fe0c 	bl	8001fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013b6:	480e      	ldr	r0, [pc, #56]	@ (80013f0 <turn_right+0x50>)
 80013b8:	f000 fe06 	bl	8001fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013c2:	480b      	ldr	r0, [pc, #44]	@ (80013f0 <turn_right+0x50>)
 80013c4:	f000 fe00 	bl	8001fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	2180      	movs	r1, #128	@ 0x80
 80013cc:	4809      	ldr	r0, [pc, #36]	@ (80013f4 <turn_right+0x54>)
 80013ce:	f000 fdfb 	bl	8001fc8 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,7999);
 80013d2:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <turn_right+0x58>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80013da:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,7999);
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <turn_right+0x58>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80013e4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40020400 	.word	0x40020400
 80013f0:	40020000 	.word	0x40020000
 80013f4:	40020800 	.word	0x40020800
 80013f8:	20000070 	.word	0x20000070

080013fc <stop>:
static void stop(void)							//stop
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001406:	480b      	ldr	r0, [pc, #44]	@ (8001434 <stop+0x38>)
 8001408:	f000 fdde 	bl	8001fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001412:	4809      	ldr	r0, [pc, #36]	@ (8001438 <stop+0x3c>)
 8001414:	f000 fdd8 	bl	8001fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800141e:	4806      	ldr	r0, [pc, #24]	@ (8001438 <stop+0x3c>)
 8001420:	f000 fdd2 	bl	8001fc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	2180      	movs	r1, #128	@ 0x80
 8001428:	4804      	ldr	r0, [pc, #16]	@ (800143c <stop+0x40>)
 800142a:	f000 fdcd 	bl	8001fc8 <HAL_GPIO_WritePin>
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40020400 	.word	0x40020400
 8001438:	40020000 	.word	0x40020000
 800143c:	40020800 	.word	0x40020800

08001440 <l_mode>:
			{
				turn_left();
			}
}
static void l_mode(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
			if((HAL_GPIO_ReadPin(L_Sensor_GPIO_Port, L_Sensor_Pin))==1) //if Lsensor detect black color
 8001444:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001448:	4814      	ldr	r0, [pc, #80]	@ (800149c <l_mode+0x5c>)
 800144a:	f000 fda5 	bl	8001f98 <HAL_GPIO_ReadPin>
 800144e:	4603      	mov	r3, r0
 8001450:	2b01      	cmp	r3, #1
 8001452:	d103      	bne.n	800145c <l_mode+0x1c>
			{
				Lsensor = true;
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <l_mode+0x60>)
 8001456:	2201      	movs	r2, #1
 8001458:	701a      	strb	r2, [r3, #0]
 800145a:	e002      	b.n	8001462 <l_mode+0x22>
			}
			else
			{
				Lsensor = false;																					//Sensor detect white color
 800145c:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <l_mode+0x60>)
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
			}
			if((HAL_GPIO_ReadPin(R_Sensor_GPIO_Port, R_Sensor_Pin))==1) //if Rsensor detect black color
 8001462:	2120      	movs	r1, #32
 8001464:	480f      	ldr	r0, [pc, #60]	@ (80014a4 <l_mode+0x64>)
 8001466:	f000 fd97 	bl	8001f98 <HAL_GPIO_ReadPin>
 800146a:	4603      	mov	r3, r0
 800146c:	2b01      	cmp	r3, #1
 800146e:	d103      	bne.n	8001478 <l_mode+0x38>
			{
				Rsensor = true;
 8001470:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <l_mode+0x68>)
 8001472:	2201      	movs	r2, #1
 8001474:	701a      	strb	r2, [r3, #0]
 8001476:	e002      	b.n	800147e <l_mode+0x3e>
			}
			else
			{
				Rsensor = false;																					//Sensor detect white color
 8001478:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <l_mode+0x68>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
			}

			if(Lsensor == false)			//R,Lsemsor detect white
 800147e:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <l_mode+0x60>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	f083 0301 	eor.w	r3, r3, #1
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <l_mode+0x52>
			{
				go();
 800148c:	f7ff ff5a 	bl	8001344 <go>

			else
			{
				turn_right();
			}
}
 8001490:	e001      	b.n	8001496 <l_mode+0x56>
				turn_right();
 8001492:	f7ff ff85 	bl	80013a0 <turn_right>
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40020000 	.word	0x40020000
 80014a0:	20000148 	.word	0x20000148
 80014a4:	40020400 	.word	0x40020400
 80014a8:	20000149 	.word	0x20000149

080014ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b0:	b672      	cpsid	i
}
 80014b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <Error_Handler+0x8>

080014b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	4b10      	ldr	r3, [pc, #64]	@ (8001504 <HAL_MspInit+0x4c>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001504 <HAL_MspInit+0x4c>)
 80014c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001504 <HAL_MspInit+0x4c>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <HAL_MspInit+0x4c>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	4a08      	ldr	r2, [pc, #32]	@ (8001504 <HAL_MspInit+0x4c>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ea:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <HAL_MspInit+0x4c>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014f6:	2007      	movs	r0, #7
 80014f8:	f000 faf6 	bl	8001ae8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800

08001508 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001518:	d10e      	bne.n	8001538 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b13      	ldr	r3, [pc, #76]	@ (800156c <HAL_TIM_Base_MspInit+0x64>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	4a12      	ldr	r2, [pc, #72]	@ (800156c <HAL_TIM_Base_MspInit+0x64>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6413      	str	r3, [r2, #64]	@ 0x40
 800152a:	4b10      	ldr	r3, [pc, #64]	@ (800156c <HAL_TIM_Base_MspInit+0x64>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001536:	e012      	b.n	800155e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0c      	ldr	r2, [pc, #48]	@ (8001570 <HAL_TIM_Base_MspInit+0x68>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d10d      	bne.n	800155e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	4b09      	ldr	r3, [pc, #36]	@ (800156c <HAL_TIM_Base_MspInit+0x64>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	4a08      	ldr	r2, [pc, #32]	@ (800156c <HAL_TIM_Base_MspInit+0x64>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	6413      	str	r3, [r2, #64]	@ 0x40
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <HAL_TIM_Base_MspInit+0x64>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
}
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	40000400 	.word	0x40000400

08001574 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a12      	ldr	r2, [pc, #72]	@ (80015dc <HAL_TIM_MspPostInit+0x68>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d11d      	bne.n	80015d2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <HAL_TIM_MspPostInit+0x6c>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	4a10      	ldr	r2, [pc, #64]	@ (80015e0 <HAL_TIM_MspPostInit+0x6c>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a6:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <HAL_TIM_MspPostInit+0x6c>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015b2:	23c0      	movs	r3, #192	@ 0xc0
 80015b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015c2:	2302      	movs	r3, #2
 80015c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	f107 030c 	add.w	r3, r7, #12
 80015ca:	4619      	mov	r1, r3
 80015cc:	4805      	ldr	r0, [pc, #20]	@ (80015e4 <HAL_TIM_MspPostInit+0x70>)
 80015ce:	f000 fb5f 	bl	8001c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015d2:	bf00      	nop
 80015d4:	3720      	adds	r7, #32
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40000400 	.word	0x40000400
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020000 	.word	0x40020000

080015e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08c      	sub	sp, #48	@ 0x30
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a45      	ldr	r2, [pc, #276]	@ (800171c <HAL_UART_MspInit+0x134>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d12c      	bne.n	8001664 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	4b44      	ldr	r3, [pc, #272]	@ (8001720 <HAL_UART_MspInit+0x138>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	4a43      	ldr	r2, [pc, #268]	@ (8001720 <HAL_UART_MspInit+0x138>)
 8001614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001618:	6413      	str	r3, [r2, #64]	@ 0x40
 800161a:	4b41      	ldr	r3, [pc, #260]	@ (8001720 <HAL_UART_MspInit+0x138>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001622:	61bb      	str	r3, [r7, #24]
 8001624:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	4b3d      	ldr	r3, [pc, #244]	@ (8001720 <HAL_UART_MspInit+0x138>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	4a3c      	ldr	r2, [pc, #240]	@ (8001720 <HAL_UART_MspInit+0x138>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6313      	str	r3, [r2, #48]	@ 0x30
 8001636:	4b3a      	ldr	r3, [pc, #232]	@ (8001720 <HAL_UART_MspInit+0x138>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001642:	230c      	movs	r3, #12
 8001644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001652:	2307      	movs	r3, #7
 8001654:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	4619      	mov	r1, r3
 800165c:	4831      	ldr	r0, [pc, #196]	@ (8001724 <HAL_UART_MspInit+0x13c>)
 800165e:	f000 fb17 	bl	8001c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001662:	e057      	b.n	8001714 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART6)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a2f      	ldr	r2, [pc, #188]	@ (8001728 <HAL_UART_MspInit+0x140>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d152      	bne.n	8001714 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART6_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	4b2b      	ldr	r3, [pc, #172]	@ (8001720 <HAL_UART_MspInit+0x138>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	4a2a      	ldr	r2, [pc, #168]	@ (8001720 <HAL_UART_MspInit+0x138>)
 8001678:	f043 0320 	orr.w	r3, r3, #32
 800167c:	6453      	str	r3, [r2, #68]	@ 0x44
 800167e:	4b28      	ldr	r3, [pc, #160]	@ (8001720 <HAL_UART_MspInit+0x138>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001682:	f003 0320 	and.w	r3, r3, #32
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b24      	ldr	r3, [pc, #144]	@ (8001720 <HAL_UART_MspInit+0x138>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	4a23      	ldr	r2, [pc, #140]	@ (8001720 <HAL_UART_MspInit+0x138>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6313      	str	r3, [r2, #48]	@ 0x30
 800169a:	4b21      	ldr	r3, [pc, #132]	@ (8001720 <HAL_UART_MspInit+0x138>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001720 <HAL_UART_MspInit+0x138>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001720 <HAL_UART_MspInit+0x138>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001720 <HAL_UART_MspInit+0x138>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016c2:	2340      	movs	r3, #64	@ 0x40
 80016c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80016d2:	2308      	movs	r3, #8
 80016d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	4619      	mov	r1, r3
 80016dc:	4813      	ldr	r0, [pc, #76]	@ (800172c <HAL_UART_MspInit+0x144>)
 80016de:	f000 fad7 	bl	8001c90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80016f4:	2308      	movs	r3, #8
 80016f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	4619      	mov	r1, r3
 80016fe:	4809      	ldr	r0, [pc, #36]	@ (8001724 <HAL_UART_MspInit+0x13c>)
 8001700:	f000 fac6 	bl	8001c90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	2100      	movs	r1, #0
 8001708:	2047      	movs	r0, #71	@ 0x47
 800170a:	f000 f9f8 	bl	8001afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800170e:	2047      	movs	r0, #71	@ 0x47
 8001710:	f000 fa11 	bl	8001b36 <HAL_NVIC_EnableIRQ>
}
 8001714:	bf00      	nop
 8001716:	3730      	adds	r7, #48	@ 0x30
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40004400 	.word	0x40004400
 8001720:	40023800 	.word	0x40023800
 8001724:	40020000 	.word	0x40020000
 8001728:	40011400 	.word	0x40011400
 800172c:	40020800 	.word	0x40020800

08001730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <NMI_Handler+0x4>

08001738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <HardFault_Handler+0x4>

08001740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <MemManage_Handler+0x4>

08001748 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <BusFault_Handler+0x4>

08001750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <UsageFault_Handler+0x4>

08001758 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001786:	f000 f89b 	bl	80018c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001794:	4802      	ldr	r0, [pc, #8]	@ (80017a0 <USART6_IRQHandler+0x10>)
 8001796:	f001 ffc3 	bl	8003720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000100 	.word	0x20000100

080017a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a8:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <SystemInit+0x20>)
 80017aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ae:	4a05      	ldr	r2, [pc, #20]	@ (80017c4 <SystemInit+0x20>)
 80017b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001800 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017cc:	f7ff ffea 	bl	80017a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017d0:	480c      	ldr	r0, [pc, #48]	@ (8001804 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017d2:	490d      	ldr	r1, [pc, #52]	@ (8001808 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017d4:	4a0d      	ldr	r2, [pc, #52]	@ (800180c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d8:	e002      	b.n	80017e0 <LoopCopyDataInit>

080017da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017de:	3304      	adds	r3, #4

080017e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e4:	d3f9      	bcc.n	80017da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001810 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001814 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ec:	e001      	b.n	80017f2 <LoopFillZerobss>

080017ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f0:	3204      	adds	r2, #4

080017f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f4:	d3fb      	bcc.n	80017ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017f6:	f002 fe99 	bl	800452c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017fa:	f7ff fa85 	bl	8000d08 <main>
  bx  lr    
 80017fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001800:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001808:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800180c:	080045b4 	.word	0x080045b4
  ldr r2, =_sbss
 8001810:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001814:	2000019c 	.word	0x2000019c

08001818 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001818:	e7fe      	b.n	8001818 <ADC_IRQHandler>
	...

0800181c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001820:	4b0e      	ldr	r3, [pc, #56]	@ (800185c <HAL_Init+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0d      	ldr	r2, [pc, #52]	@ (800185c <HAL_Init+0x40>)
 8001826:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800182a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800182c:	4b0b      	ldr	r3, [pc, #44]	@ (800185c <HAL_Init+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0a      	ldr	r2, [pc, #40]	@ (800185c <HAL_Init+0x40>)
 8001832:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001836:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001838:	4b08      	ldr	r3, [pc, #32]	@ (800185c <HAL_Init+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a07      	ldr	r2, [pc, #28]	@ (800185c <HAL_Init+0x40>)
 800183e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001842:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001844:	2003      	movs	r0, #3
 8001846:	f000 f94f 	bl	8001ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800184a:	2000      	movs	r0, #0
 800184c:	f000 f808 	bl	8001860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001850:	f7ff fe32 	bl	80014b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023c00 	.word	0x40023c00

08001860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001868:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <HAL_InitTick+0x54>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b12      	ldr	r3, [pc, #72]	@ (80018b8 <HAL_InitTick+0x58>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001876:	fbb3 f3f1 	udiv	r3, r3, r1
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f967 	bl	8001b52 <HAL_SYSTICK_Config>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e00e      	b.n	80018ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d80a      	bhi.n	80018aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001894:	2200      	movs	r2, #0
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f000 f92f 	bl	8001afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a0:	4a06      	ldr	r2, [pc, #24]	@ (80018bc <HAL_InitTick+0x5c>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000008 	.word	0x20000008
 80018bc:	20000004 	.word	0x20000004

080018c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <HAL_IncTick+0x20>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <HAL_IncTick+0x24>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	4a04      	ldr	r2, [pc, #16]	@ (80018e4 <HAL_IncTick+0x24>)
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000008 	.word	0x20000008
 80018e4:	20000198 	.word	0x20000198

080018e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return uwTick;
 80018ec:	4b03      	ldr	r3, [pc, #12]	@ (80018fc <HAL_GetTick+0x14>)
 80018ee:	681b      	ldr	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000198 	.word	0x20000198

08001900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001908:	f7ff ffee 	bl	80018e8 <HAL_GetTick>
 800190c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001918:	d005      	beq.n	8001926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800191a:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <HAL_Delay+0x44>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4413      	add	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001926:	bf00      	nop
 8001928:	f7ff ffde 	bl	80018e8 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	429a      	cmp	r2, r3
 8001936:	d8f7      	bhi.n	8001928 <HAL_Delay+0x28>
  {
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000008 	.word	0x20000008

08001948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001958:	4b0c      	ldr	r3, [pc, #48]	@ (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001964:	4013      	ands	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001970:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197a:	4a04      	ldr	r2, [pc, #16]	@ (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	60d3      	str	r3, [r2, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001994:	4b04      	ldr	r3, [pc, #16]	@ (80019a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	f003 0307 	and.w	r3, r3, #7
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	db0b      	blt.n	80019d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	4907      	ldr	r1, [pc, #28]	@ (80019e4 <__NVIC_EnableIRQ+0x38>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	2001      	movs	r0, #1
 80019ce:	fa00 f202 	lsl.w	r2, r0, r2
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000e100 	.word	0xe000e100

080019e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	6039      	str	r1, [r7, #0]
 80019f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	db0a      	blt.n	8001a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	490c      	ldr	r1, [pc, #48]	@ (8001a34 <__NVIC_SetPriority+0x4c>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	0112      	lsls	r2, r2, #4
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a10:	e00a      	b.n	8001a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4908      	ldr	r1, [pc, #32]	@ (8001a38 <__NVIC_SetPriority+0x50>)
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	3b04      	subs	r3, #4
 8001a20:	0112      	lsls	r2, r2, #4
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	440b      	add	r3, r1
 8001a26:	761a      	strb	r2, [r3, #24]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000e100 	.word	0xe000e100
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	@ 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f1c3 0307 	rsb	r3, r3, #7
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	bf28      	it	cs
 8001a5a:	2304      	movcs	r3, #4
 8001a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3304      	adds	r3, #4
 8001a62:	2b06      	cmp	r3, #6
 8001a64:	d902      	bls.n	8001a6c <NVIC_EncodePriority+0x30>
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3b03      	subs	r3, #3
 8001a6a:	e000      	b.n	8001a6e <NVIC_EncodePriority+0x32>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	f04f 32ff 	mov.w	r2, #4294967295
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	401a      	ands	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a84:	f04f 31ff 	mov.w	r1, #4294967295
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8e:	43d9      	mvns	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	4313      	orrs	r3, r2
         );
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3724      	adds	r7, #36	@ 0x24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ab4:	d301      	bcc.n	8001aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00f      	b.n	8001ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae4 <SysTick_Config+0x40>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac2:	210f      	movs	r1, #15
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f7ff ff8e 	bl	80019e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001acc:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <SysTick_Config+0x40>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad2:	4b04      	ldr	r3, [pc, #16]	@ (8001ae4 <SysTick_Config+0x40>)
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	e000e010 	.word	0xe000e010

08001ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ff29 	bl	8001948 <__NVIC_SetPriorityGrouping>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b10:	f7ff ff3e 	bl	8001990 <__NVIC_GetPriorityGrouping>
 8001b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	6978      	ldr	r0, [r7, #20]
 8001b1c:	f7ff ff8e 	bl	8001a3c <NVIC_EncodePriority>
 8001b20:	4602      	mov	r2, r0
 8001b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b26:	4611      	mov	r1, r2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff5d 	bl	80019e8 <__NVIC_SetPriority>
}
 8001b2e:	bf00      	nop
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff31 	bl	80019ac <__NVIC_EnableIRQ>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff ffa2 	bl	8001aa4 <SysTick_Config>
 8001b60:	4603      	mov	r3, r0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b084      	sub	sp, #16
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b78:	f7ff feb6 	bl	80018e8 <HAL_GetTick>
 8001b7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d008      	beq.n	8001b9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e052      	b.n	8001c42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0216 	bic.w	r2, r2, #22
 8001baa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	695a      	ldr	r2, [r3, #20]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d103      	bne.n	8001bcc <HAL_DMA_Abort+0x62>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d007      	beq.n	8001bdc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0208 	bic.w	r2, r2, #8
 8001bda:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0201 	bic.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bec:	e013      	b.n	8001c16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bee:	f7ff fe7b 	bl	80018e8 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b05      	cmp	r3, #5
 8001bfa:	d90c      	bls.n	8001c16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2203      	movs	r2, #3
 8001c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e015      	b.n	8001c42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1e4      	bne.n	8001bee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c28:	223f      	movs	r2, #63	@ 0x3f
 8001c2a:	409a      	lsls	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d004      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2280      	movs	r2, #128	@ 0x80
 8001c62:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e00c      	b.n	8001c82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2205      	movs	r2, #5
 8001c6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	@ 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
 8001caa:	e159      	b.n	8001f60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cac:	2201      	movs	r2, #1
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	f040 8148 	bne.w	8001f5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d005      	beq.n	8001ce2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d130      	bne.n	8001d44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	2203      	movs	r2, #3
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d18:	2201      	movs	r2, #1
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 0201 	and.w	r2, r3, #1
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d017      	beq.n	8001d80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d123      	bne.n	8001dd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	08da      	lsrs	r2, r3, #3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3208      	adds	r2, #8
 8001d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	220f      	movs	r2, #15
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	08da      	lsrs	r2, r3, #3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3208      	adds	r2, #8
 8001dce:	69b9      	ldr	r1, [r7, #24]
 8001dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	2203      	movs	r2, #3
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0203 	and.w	r2, r3, #3
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 80a2 	beq.w	8001f5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	4b57      	ldr	r3, [pc, #348]	@ (8001f78 <HAL_GPIO_Init+0x2e8>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1e:	4a56      	ldr	r2, [pc, #344]	@ (8001f78 <HAL_GPIO_Init+0x2e8>)
 8001e20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e26:	4b54      	ldr	r3, [pc, #336]	@ (8001f78 <HAL_GPIO_Init+0x2e8>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e32:	4a52      	ldr	r2, [pc, #328]	@ (8001f7c <HAL_GPIO_Init+0x2ec>)
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	089b      	lsrs	r3, r3, #2
 8001e38:	3302      	adds	r3, #2
 8001e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	220f      	movs	r2, #15
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a49      	ldr	r2, [pc, #292]	@ (8001f80 <HAL_GPIO_Init+0x2f0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d019      	beq.n	8001e92 <HAL_GPIO_Init+0x202>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a48      	ldr	r2, [pc, #288]	@ (8001f84 <HAL_GPIO_Init+0x2f4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d013      	beq.n	8001e8e <HAL_GPIO_Init+0x1fe>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a47      	ldr	r2, [pc, #284]	@ (8001f88 <HAL_GPIO_Init+0x2f8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00d      	beq.n	8001e8a <HAL_GPIO_Init+0x1fa>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a46      	ldr	r2, [pc, #280]	@ (8001f8c <HAL_GPIO_Init+0x2fc>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d007      	beq.n	8001e86 <HAL_GPIO_Init+0x1f6>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a45      	ldr	r2, [pc, #276]	@ (8001f90 <HAL_GPIO_Init+0x300>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d101      	bne.n	8001e82 <HAL_GPIO_Init+0x1f2>
 8001e7e:	2304      	movs	r3, #4
 8001e80:	e008      	b.n	8001e94 <HAL_GPIO_Init+0x204>
 8001e82:	2307      	movs	r3, #7
 8001e84:	e006      	b.n	8001e94 <HAL_GPIO_Init+0x204>
 8001e86:	2303      	movs	r3, #3
 8001e88:	e004      	b.n	8001e94 <HAL_GPIO_Init+0x204>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e002      	b.n	8001e94 <HAL_GPIO_Init+0x204>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_GPIO_Init+0x204>
 8001e92:	2300      	movs	r3, #0
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	f002 0203 	and.w	r2, r2, #3
 8001e9a:	0092      	lsls	r2, r2, #2
 8001e9c:	4093      	lsls	r3, r2
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea4:	4935      	ldr	r1, [pc, #212]	@ (8001f7c <HAL_GPIO_Init+0x2ec>)
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	089b      	lsrs	r3, r3, #2
 8001eaa:	3302      	adds	r3, #2
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eb2:	4b38      	ldr	r3, [pc, #224]	@ (8001f94 <HAL_GPIO_Init+0x304>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ed6:	4a2f      	ldr	r2, [pc, #188]	@ (8001f94 <HAL_GPIO_Init+0x304>)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001edc:	4b2d      	ldr	r3, [pc, #180]	@ (8001f94 <HAL_GPIO_Init+0x304>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f00:	4a24      	ldr	r2, [pc, #144]	@ (8001f94 <HAL_GPIO_Init+0x304>)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f06:	4b23      	ldr	r3, [pc, #140]	@ (8001f94 <HAL_GPIO_Init+0x304>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f2a:	4a1a      	ldr	r2, [pc, #104]	@ (8001f94 <HAL_GPIO_Init+0x304>)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f30:	4b18      	ldr	r3, [pc, #96]	@ (8001f94 <HAL_GPIO_Init+0x304>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f54:	4a0f      	ldr	r2, [pc, #60]	@ (8001f94 <HAL_GPIO_Init+0x304>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	61fb      	str	r3, [r7, #28]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	2b0f      	cmp	r3, #15
 8001f64:	f67f aea2 	bls.w	8001cac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	3724      	adds	r7, #36	@ 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40013800 	.word	0x40013800
 8001f80:	40020000 	.word	0x40020000
 8001f84:	40020400 	.word	0x40020400
 8001f88:	40020800 	.word	0x40020800
 8001f8c:	40020c00 	.word	0x40020c00
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40013c00 	.word	0x40013c00

08001f98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	887b      	ldrh	r3, [r7, #2]
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
 8001fb4:	e001      	b.n	8001fba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	807b      	strh	r3, [r7, #2]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd8:	787b      	ldrb	r3, [r7, #1]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fde:	887a      	ldrh	r2, [r7, #2]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fe4:	e003      	b.n	8001fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fe6:	887b      	ldrh	r3, [r7, #2]
 8001fe8:	041a      	lsls	r2, r3, #16
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	619a      	str	r2, [r3, #24]
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e267      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d075      	beq.n	8002106 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800201a:	4b88      	ldr	r3, [pc, #544]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	2b04      	cmp	r3, #4
 8002024:	d00c      	beq.n	8002040 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002026:	4b85      	ldr	r3, [pc, #532]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800202e:	2b08      	cmp	r3, #8
 8002030:	d112      	bne.n	8002058 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002032:	4b82      	ldr	r3, [pc, #520]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800203a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800203e:	d10b      	bne.n	8002058 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002040:	4b7e      	ldr	r3, [pc, #504]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d05b      	beq.n	8002104 <HAL_RCC_OscConfig+0x108>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d157      	bne.n	8002104 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e242      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002060:	d106      	bne.n	8002070 <HAL_RCC_OscConfig+0x74>
 8002062:	4b76      	ldr	r3, [pc, #472]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a75      	ldr	r2, [pc, #468]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 8002068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	e01d      	b.n	80020ac <HAL_RCC_OscConfig+0xb0>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002078:	d10c      	bne.n	8002094 <HAL_RCC_OscConfig+0x98>
 800207a:	4b70      	ldr	r3, [pc, #448]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a6f      	ldr	r2, [pc, #444]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 8002080:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	4b6d      	ldr	r3, [pc, #436]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a6c      	ldr	r2, [pc, #432]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 800208c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	e00b      	b.n	80020ac <HAL_RCC_OscConfig+0xb0>
 8002094:	4b69      	ldr	r3, [pc, #420]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a68      	ldr	r2, [pc, #416]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 800209a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	4b66      	ldr	r3, [pc, #408]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a65      	ldr	r2, [pc, #404]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 80020a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d013      	beq.n	80020dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b4:	f7ff fc18 	bl	80018e8 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020bc:	f7ff fc14 	bl	80018e8 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	@ 0x64
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e207      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ce:	4b5b      	ldr	r3, [pc, #364]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0f0      	beq.n	80020bc <HAL_RCC_OscConfig+0xc0>
 80020da:	e014      	b.n	8002106 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020dc:	f7ff fc04 	bl	80018e8 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e4:	f7ff fc00 	bl	80018e8 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b64      	cmp	r3, #100	@ 0x64
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e1f3      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f6:	4b51      	ldr	r3, [pc, #324]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0xe8>
 8002102:	e000      	b.n	8002106 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d063      	beq.n	80021da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002112:	4b4a      	ldr	r3, [pc, #296]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00b      	beq.n	8002136 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800211e:	4b47      	ldr	r3, [pc, #284]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002126:	2b08      	cmp	r3, #8
 8002128:	d11c      	bne.n	8002164 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800212a:	4b44      	ldr	r3, [pc, #272]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d116      	bne.n	8002164 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002136:	4b41      	ldr	r3, [pc, #260]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d005      	beq.n	800214e <HAL_RCC_OscConfig+0x152>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d001      	beq.n	800214e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e1c7      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214e:	4b3b      	ldr	r3, [pc, #236]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4937      	ldr	r1, [pc, #220]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002162:	e03a      	b.n	80021da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d020      	beq.n	80021ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800216c:	4b34      	ldr	r3, [pc, #208]	@ (8002240 <HAL_RCC_OscConfig+0x244>)
 800216e:	2201      	movs	r2, #1
 8002170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002172:	f7ff fbb9 	bl	80018e8 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800217a:	f7ff fbb5 	bl	80018e8 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e1a8      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218c:	4b2b      	ldr	r3, [pc, #172]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0f0      	beq.n	800217a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002198:	4b28      	ldr	r3, [pc, #160]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4925      	ldr	r1, [pc, #148]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	600b      	str	r3, [r1, #0]
 80021ac:	e015      	b.n	80021da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ae:	4b24      	ldr	r3, [pc, #144]	@ (8002240 <HAL_RCC_OscConfig+0x244>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7ff fb98 	bl	80018e8 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021bc:	f7ff fb94 	bl	80018e8 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e187      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ce:	4b1b      	ldr	r3, [pc, #108]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d036      	beq.n	8002254 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d016      	beq.n	800221c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ee:	4b15      	ldr	r3, [pc, #84]	@ (8002244 <HAL_RCC_OscConfig+0x248>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f4:	f7ff fb78 	bl	80018e8 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021fc:	f7ff fb74 	bl	80018e8 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e167      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220e:	4b0b      	ldr	r3, [pc, #44]	@ (800223c <HAL_RCC_OscConfig+0x240>)
 8002210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f0      	beq.n	80021fc <HAL_RCC_OscConfig+0x200>
 800221a:	e01b      	b.n	8002254 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800221c:	4b09      	ldr	r3, [pc, #36]	@ (8002244 <HAL_RCC_OscConfig+0x248>)
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002222:	f7ff fb61 	bl	80018e8 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002228:	e00e      	b.n	8002248 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222a:	f7ff fb5d 	bl	80018e8 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d907      	bls.n	8002248 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e150      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
 800223c:	40023800 	.word	0x40023800
 8002240:	42470000 	.word	0x42470000
 8002244:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002248:	4b88      	ldr	r3, [pc, #544]	@ (800246c <HAL_RCC_OscConfig+0x470>)
 800224a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1ea      	bne.n	800222a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 8097 	beq.w	8002390 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002262:	2300      	movs	r3, #0
 8002264:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002266:	4b81      	ldr	r3, [pc, #516]	@ (800246c <HAL_RCC_OscConfig+0x470>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10f      	bne.n	8002292 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	4b7d      	ldr	r3, [pc, #500]	@ (800246c <HAL_RCC_OscConfig+0x470>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	4a7c      	ldr	r2, [pc, #496]	@ (800246c <HAL_RCC_OscConfig+0x470>)
 800227c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002280:	6413      	str	r3, [r2, #64]	@ 0x40
 8002282:	4b7a      	ldr	r3, [pc, #488]	@ (800246c <HAL_RCC_OscConfig+0x470>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800228e:	2301      	movs	r3, #1
 8002290:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002292:	4b77      	ldr	r3, [pc, #476]	@ (8002470 <HAL_RCC_OscConfig+0x474>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d118      	bne.n	80022d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800229e:	4b74      	ldr	r3, [pc, #464]	@ (8002470 <HAL_RCC_OscConfig+0x474>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a73      	ldr	r2, [pc, #460]	@ (8002470 <HAL_RCC_OscConfig+0x474>)
 80022a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022aa:	f7ff fb1d 	bl	80018e8 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b2:	f7ff fb19 	bl	80018e8 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e10c      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002470 <HAL_RCC_OscConfig+0x474>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x2ea>
 80022d8:	4b64      	ldr	r3, [pc, #400]	@ (800246c <HAL_RCC_OscConfig+0x470>)
 80022da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022dc:	4a63      	ldr	r2, [pc, #396]	@ (800246c <HAL_RCC_OscConfig+0x470>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80022e4:	e01c      	b.n	8002320 <HAL_RCC_OscConfig+0x324>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b05      	cmp	r3, #5
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0x30c>
 80022ee:	4b5f      	ldr	r3, [pc, #380]	@ (800246c <HAL_RCC_OscConfig+0x470>)
 80022f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f2:	4a5e      	ldr	r2, [pc, #376]	@ (800246c <HAL_RCC_OscConfig+0x470>)
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80022fa:	4b5c      	ldr	r3, [pc, #368]	@ (800246c <HAL_RCC_OscConfig+0x470>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022fe:	4a5b      	ldr	r2, [pc, #364]	@ (800246c <HAL_RCC_OscConfig+0x470>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6713      	str	r3, [r2, #112]	@ 0x70
 8002306:	e00b      	b.n	8002320 <HAL_RCC_OscConfig+0x324>
 8002308:	4b58      	ldr	r3, [pc, #352]	@ (800246c <HAL_RCC_OscConfig+0x470>)
 800230a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230c:	4a57      	ldr	r2, [pc, #348]	@ (800246c <HAL_RCC_OscConfig+0x470>)
 800230e:	f023 0301 	bic.w	r3, r3, #1
 8002312:	6713      	str	r3, [r2, #112]	@ 0x70
 8002314:	4b55      	ldr	r3, [pc, #340]	@ (800246c <HAL_RCC_OscConfig+0x470>)
 8002316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002318:	4a54      	ldr	r2, [pc, #336]	@ (800246c <HAL_RCC_OscConfig+0x470>)
 800231a:	f023 0304 	bic.w	r3, r3, #4
 800231e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d015      	beq.n	8002354 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002328:	f7ff fade 	bl	80018e8 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232e:	e00a      	b.n	8002346 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002330:	f7ff fada 	bl	80018e8 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800233e:	4293      	cmp	r3, r2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e0cb      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002346:	4b49      	ldr	r3, [pc, #292]	@ (800246c <HAL_RCC_OscConfig+0x470>)
 8002348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0ee      	beq.n	8002330 <HAL_RCC_OscConfig+0x334>
 8002352:	e014      	b.n	800237e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002354:	f7ff fac8 	bl	80018e8 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800235a:	e00a      	b.n	8002372 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235c:	f7ff fac4 	bl	80018e8 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800236a:	4293      	cmp	r3, r2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e0b5      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002372:	4b3e      	ldr	r3, [pc, #248]	@ (800246c <HAL_RCC_OscConfig+0x470>)
 8002374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1ee      	bne.n	800235c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800237e:	7dfb      	ldrb	r3, [r7, #23]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d105      	bne.n	8002390 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002384:	4b39      	ldr	r3, [pc, #228]	@ (800246c <HAL_RCC_OscConfig+0x470>)
 8002386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002388:	4a38      	ldr	r2, [pc, #224]	@ (800246c <HAL_RCC_OscConfig+0x470>)
 800238a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800238e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80a1 	beq.w	80024dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800239a:	4b34      	ldr	r3, [pc, #208]	@ (800246c <HAL_RCC_OscConfig+0x470>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d05c      	beq.n	8002460 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d141      	bne.n	8002432 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ae:	4b31      	ldr	r3, [pc, #196]	@ (8002474 <HAL_RCC_OscConfig+0x478>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7ff fa98 	bl	80018e8 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023bc:	f7ff fa94 	bl	80018e8 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e087      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ce:	4b27      	ldr	r3, [pc, #156]	@ (800246c <HAL_RCC_OscConfig+0x470>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69da      	ldr	r2, [r3, #28]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e8:	019b      	lsls	r3, r3, #6
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f0:	085b      	lsrs	r3, r3, #1
 80023f2:	3b01      	subs	r3, #1
 80023f4:	041b      	lsls	r3, r3, #16
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fc:	061b      	lsls	r3, r3, #24
 80023fe:	491b      	ldr	r1, [pc, #108]	@ (800246c <HAL_RCC_OscConfig+0x470>)
 8002400:	4313      	orrs	r3, r2
 8002402:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002404:	4b1b      	ldr	r3, [pc, #108]	@ (8002474 <HAL_RCC_OscConfig+0x478>)
 8002406:	2201      	movs	r2, #1
 8002408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7ff fa6d 	bl	80018e8 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002412:	f7ff fa69 	bl	80018e8 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e05c      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002424:	4b11      	ldr	r3, [pc, #68]	@ (800246c <HAL_RCC_OscConfig+0x470>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0x416>
 8002430:	e054      	b.n	80024dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002432:	4b10      	ldr	r3, [pc, #64]	@ (8002474 <HAL_RCC_OscConfig+0x478>)
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7ff fa56 	bl	80018e8 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002440:	f7ff fa52 	bl	80018e8 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e045      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002452:	4b06      	ldr	r3, [pc, #24]	@ (800246c <HAL_RCC_OscConfig+0x470>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x444>
 800245e:	e03d      	b.n	80024dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d107      	bne.n	8002478 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e038      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
 800246c:	40023800 	.word	0x40023800
 8002470:	40007000 	.word	0x40007000
 8002474:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002478:	4b1b      	ldr	r3, [pc, #108]	@ (80024e8 <HAL_RCC_OscConfig+0x4ec>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d028      	beq.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002490:	429a      	cmp	r2, r3
 8002492:	d121      	bne.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249e:	429a      	cmp	r2, r3
 80024a0:	d11a      	bne.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024a8:	4013      	ands	r3, r2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d111      	bne.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024be:	085b      	lsrs	r3, r3, #1
 80024c0:	3b01      	subs	r3, #1
 80024c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d107      	bne.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d001      	beq.n	80024dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800

080024ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0cc      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002500:	4b68      	ldr	r3, [pc, #416]	@ (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d90c      	bls.n	8002528 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250e:	4b65      	ldr	r3, [pc, #404]	@ (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002516:	4b63      	ldr	r3, [pc, #396]	@ (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d001      	beq.n	8002528 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0b8      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d020      	beq.n	8002576 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002540:	4b59      	ldr	r3, [pc, #356]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4a58      	ldr	r2, [pc, #352]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800254a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002558:	4b53      	ldr	r3, [pc, #332]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	4a52      	ldr	r2, [pc, #328]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002562:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002564:	4b50      	ldr	r3, [pc, #320]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	494d      	ldr	r1, [pc, #308]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d044      	beq.n	800260c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d107      	bne.n	800259a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258a:	4b47      	ldr	r3, [pc, #284]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d119      	bne.n	80025ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e07f      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d003      	beq.n	80025aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d107      	bne.n	80025ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025aa:	4b3f      	ldr	r3, [pc, #252]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d109      	bne.n	80025ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e06f      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ba:	4b3b      	ldr	r3, [pc, #236]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e067      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ca:	4b37      	ldr	r3, [pc, #220]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f023 0203 	bic.w	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4934      	ldr	r1, [pc, #208]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025dc:	f7ff f984 	bl	80018e8 <HAL_GetTick>
 80025e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e2:	e00a      	b.n	80025fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e4:	f7ff f980 	bl	80018e8 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e04f      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fa:	4b2b      	ldr	r3, [pc, #172]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 020c 	and.w	r2, r3, #12
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	429a      	cmp	r2, r3
 800260a:	d1eb      	bne.n	80025e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800260c:	4b25      	ldr	r3, [pc, #148]	@ (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d20c      	bcs.n	8002634 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4b22      	ldr	r3, [pc, #136]	@ (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b20      	ldr	r3, [pc, #128]	@ (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e032      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002640:	4b19      	ldr	r3, [pc, #100]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4916      	ldr	r1, [pc, #88]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	4313      	orrs	r3, r2
 8002650:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d009      	beq.n	8002672 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800265e:	4b12      	ldr	r3, [pc, #72]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	490e      	ldr	r1, [pc, #56]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002672:	f000 f821 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 8002676:	4602      	mov	r2, r0
 8002678:	4b0b      	ldr	r3, [pc, #44]	@ (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	490a      	ldr	r1, [pc, #40]	@ (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 8002684:	5ccb      	ldrb	r3, [r1, r3]
 8002686:	fa22 f303 	lsr.w	r3, r2, r3
 800268a:	4a09      	ldr	r2, [pc, #36]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800268e:	4b09      	ldr	r3, [pc, #36]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff f8e4 	bl	8001860 <HAL_InitTick>

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40023c00 	.word	0x40023c00
 80026a8:	40023800 	.word	0x40023800
 80026ac:	0800458c 	.word	0x0800458c
 80026b0:	20000000 	.word	0x20000000
 80026b4:	20000004 	.word	0x20000004

080026b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026bc:	b094      	sub	sp, #80	@ 0x50
 80026be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026d0:	4b79      	ldr	r3, [pc, #484]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 030c 	and.w	r3, r3, #12
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d00d      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x40>
 80026dc:	2b08      	cmp	r3, #8
 80026de:	f200 80e1 	bhi.w	80028a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <HAL_RCC_GetSysClockFreq+0x34>
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d003      	beq.n	80026f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80026ea:	e0db      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026ec:	4b73      	ldr	r3, [pc, #460]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x204>)
 80026ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026f0:	e0db      	b.n	80028aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026f2:	4b73      	ldr	r3, [pc, #460]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80026f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026f6:	e0d8      	b.n	80028aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026f8:	4b6f      	ldr	r3, [pc, #444]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002700:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002702:	4b6d      	ldr	r3, [pc, #436]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d063      	beq.n	80027d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800270e:	4b6a      	ldr	r3, [pc, #424]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	099b      	lsrs	r3, r3, #6
 8002714:	2200      	movs	r2, #0
 8002716:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002718:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800271a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800271c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002720:	633b      	str	r3, [r7, #48]	@ 0x30
 8002722:	2300      	movs	r3, #0
 8002724:	637b      	str	r3, [r7, #52]	@ 0x34
 8002726:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800272a:	4622      	mov	r2, r4
 800272c:	462b      	mov	r3, r5
 800272e:	f04f 0000 	mov.w	r0, #0
 8002732:	f04f 0100 	mov.w	r1, #0
 8002736:	0159      	lsls	r1, r3, #5
 8002738:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800273c:	0150      	lsls	r0, r2, #5
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4621      	mov	r1, r4
 8002744:	1a51      	subs	r1, r2, r1
 8002746:	6139      	str	r1, [r7, #16]
 8002748:	4629      	mov	r1, r5
 800274a:	eb63 0301 	sbc.w	r3, r3, r1
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800275c:	4659      	mov	r1, fp
 800275e:	018b      	lsls	r3, r1, #6
 8002760:	4651      	mov	r1, sl
 8002762:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002766:	4651      	mov	r1, sl
 8002768:	018a      	lsls	r2, r1, #6
 800276a:	4651      	mov	r1, sl
 800276c:	ebb2 0801 	subs.w	r8, r2, r1
 8002770:	4659      	mov	r1, fp
 8002772:	eb63 0901 	sbc.w	r9, r3, r1
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002782:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002786:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800278a:	4690      	mov	r8, r2
 800278c:	4699      	mov	r9, r3
 800278e:	4623      	mov	r3, r4
 8002790:	eb18 0303 	adds.w	r3, r8, r3
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	462b      	mov	r3, r5
 8002798:	eb49 0303 	adc.w	r3, r9, r3
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027aa:	4629      	mov	r1, r5
 80027ac:	024b      	lsls	r3, r1, #9
 80027ae:	4621      	mov	r1, r4
 80027b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027b4:	4621      	mov	r1, r4
 80027b6:	024a      	lsls	r2, r1, #9
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027be:	2200      	movs	r2, #0
 80027c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027c8:	f7fe f924 	bl	8000a14 <__aeabi_uldivmod>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4613      	mov	r3, r2
 80027d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027d4:	e058      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027d6:	4b38      	ldr	r3, [pc, #224]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	099b      	lsrs	r3, r3, #6
 80027dc:	2200      	movs	r2, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	4611      	mov	r1, r2
 80027e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027e6:	623b      	str	r3, [r7, #32]
 80027e8:	2300      	movs	r3, #0
 80027ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027f0:	4642      	mov	r2, r8
 80027f2:	464b      	mov	r3, r9
 80027f4:	f04f 0000 	mov.w	r0, #0
 80027f8:	f04f 0100 	mov.w	r1, #0
 80027fc:	0159      	lsls	r1, r3, #5
 80027fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002802:	0150      	lsls	r0, r2, #5
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4641      	mov	r1, r8
 800280a:	ebb2 0a01 	subs.w	sl, r2, r1
 800280e:	4649      	mov	r1, r9
 8002810:	eb63 0b01 	sbc.w	fp, r3, r1
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002820:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002824:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002828:	ebb2 040a 	subs.w	r4, r2, sl
 800282c:	eb63 050b 	sbc.w	r5, r3, fp
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	00eb      	lsls	r3, r5, #3
 800283a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800283e:	00e2      	lsls	r2, r4, #3
 8002840:	4614      	mov	r4, r2
 8002842:	461d      	mov	r5, r3
 8002844:	4643      	mov	r3, r8
 8002846:	18e3      	adds	r3, r4, r3
 8002848:	603b      	str	r3, [r7, #0]
 800284a:	464b      	mov	r3, r9
 800284c:	eb45 0303 	adc.w	r3, r5, r3
 8002850:	607b      	str	r3, [r7, #4]
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800285e:	4629      	mov	r1, r5
 8002860:	028b      	lsls	r3, r1, #10
 8002862:	4621      	mov	r1, r4
 8002864:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002868:	4621      	mov	r1, r4
 800286a:	028a      	lsls	r2, r1, #10
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002872:	2200      	movs	r2, #0
 8002874:	61bb      	str	r3, [r7, #24]
 8002876:	61fa      	str	r2, [r7, #28]
 8002878:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800287c:	f7fe f8ca 	bl	8000a14 <__aeabi_uldivmod>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4613      	mov	r3, r2
 8002886:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002888:	4b0b      	ldr	r3, [pc, #44]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	0c1b      	lsrs	r3, r3, #16
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	3301      	adds	r3, #1
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002898:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800289a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800289c:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028a2:	e002      	b.n	80028aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028a4:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x204>)
 80028a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3750      	adds	r7, #80	@ 0x50
 80028b0:	46bd      	mov	sp, r7
 80028b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028b6:	bf00      	nop
 80028b8:	40023800 	.word	0x40023800
 80028bc:	00f42400 	.word	0x00f42400
 80028c0:	007a1200 	.word	0x007a1200

080028c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c8:	4b03      	ldr	r3, [pc, #12]	@ (80028d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	20000000 	.word	0x20000000

080028dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028e0:	f7ff fff0 	bl	80028c4 <HAL_RCC_GetHCLKFreq>
 80028e4:	4602      	mov	r2, r0
 80028e6:	4b05      	ldr	r3, [pc, #20]	@ (80028fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	0a9b      	lsrs	r3, r3, #10
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	4903      	ldr	r1, [pc, #12]	@ (8002900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028f2:	5ccb      	ldrb	r3, [r1, r3]
 80028f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40023800 	.word	0x40023800
 8002900:	0800459c 	.word	0x0800459c

08002904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002908:	f7ff ffdc 	bl	80028c4 <HAL_RCC_GetHCLKFreq>
 800290c:	4602      	mov	r2, r0
 800290e:	4b05      	ldr	r3, [pc, #20]	@ (8002924 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	0b5b      	lsrs	r3, r3, #13
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	4903      	ldr	r1, [pc, #12]	@ (8002928 <HAL_RCC_GetPCLK2Freq+0x24>)
 800291a:	5ccb      	ldrb	r3, [r1, r3]
 800291c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002920:	4618      	mov	r0, r3
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40023800 	.word	0x40023800
 8002928:	0800459c 	.word	0x0800459c

0800292c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e041      	b.n	80029c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d106      	bne.n	8002958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7fe fdd8 	bl	8001508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3304      	adds	r3, #4
 8002968:	4619      	mov	r1, r3
 800296a:	4610      	mov	r0, r2
 800296c:	f000 fb1c 	bl	8002fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d001      	beq.n	80029e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e03c      	b.n	8002a5e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a1e      	ldr	r2, [pc, #120]	@ (8002a6c <HAL_TIM_Base_Start+0xa0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d018      	beq.n	8002a28 <HAL_TIM_Base_Start+0x5c>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029fe:	d013      	beq.n	8002a28 <HAL_TIM_Base_Start+0x5c>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a1a      	ldr	r2, [pc, #104]	@ (8002a70 <HAL_TIM_Base_Start+0xa4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00e      	beq.n	8002a28 <HAL_TIM_Base_Start+0x5c>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a19      	ldr	r2, [pc, #100]	@ (8002a74 <HAL_TIM_Base_Start+0xa8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d009      	beq.n	8002a28 <HAL_TIM_Base_Start+0x5c>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a17      	ldr	r2, [pc, #92]	@ (8002a78 <HAL_TIM_Base_Start+0xac>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d004      	beq.n	8002a28 <HAL_TIM_Base_Start+0x5c>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a16      	ldr	r2, [pc, #88]	@ (8002a7c <HAL_TIM_Base_Start+0xb0>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d111      	bne.n	8002a4c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d010      	beq.n	8002a5c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 0201 	orr.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a4a:	e007      	b.n	8002a5c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40010000 	.word	0x40010000
 8002a70:	40000400 	.word	0x40000400
 8002a74:	40000800 	.word	0x40000800
 8002a78:	40000c00 	.word	0x40000c00
 8002a7c:	40014000 	.word	0x40014000

08002a80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e041      	b.n	8002b16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d106      	bne.n	8002aac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f839 	bl	8002b1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3304      	adds	r3, #4
 8002abc:	4619      	mov	r1, r3
 8002abe:	4610      	mov	r0, r2
 8002ac0:	f000 fa72 	bl	8002fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d109      	bne.n	8002b58 <HAL_TIM_PWM_Start+0x24>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	bf14      	ite	ne
 8002b50:	2301      	movne	r3, #1
 8002b52:	2300      	moveq	r3, #0
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	e022      	b.n	8002b9e <HAL_TIM_PWM_Start+0x6a>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d109      	bne.n	8002b72 <HAL_TIM_PWM_Start+0x3e>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	bf14      	ite	ne
 8002b6a:	2301      	movne	r3, #1
 8002b6c:	2300      	moveq	r3, #0
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	e015      	b.n	8002b9e <HAL_TIM_PWM_Start+0x6a>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d109      	bne.n	8002b8c <HAL_TIM_PWM_Start+0x58>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	bf14      	ite	ne
 8002b84:	2301      	movne	r3, #1
 8002b86:	2300      	moveq	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	e008      	b.n	8002b9e <HAL_TIM_PWM_Start+0x6a>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	bf14      	ite	ne
 8002b98:	2301      	movne	r3, #1
 8002b9a:	2300      	moveq	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e068      	b.n	8002c78 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d104      	bne.n	8002bb6 <HAL_TIM_PWM_Start+0x82>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bb4:	e013      	b.n	8002bde <HAL_TIM_PWM_Start+0xaa>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d104      	bne.n	8002bc6 <HAL_TIM_PWM_Start+0x92>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bc4:	e00b      	b.n	8002bde <HAL_TIM_PWM_Start+0xaa>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d104      	bne.n	8002bd6 <HAL_TIM_PWM_Start+0xa2>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bd4:	e003      	b.n	8002bde <HAL_TIM_PWM_Start+0xaa>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2202      	movs	r2, #2
 8002bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2201      	movs	r2, #1
 8002be4:	6839      	ldr	r1, [r7, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 fc90 	bl	800350c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a23      	ldr	r2, [pc, #140]	@ (8002c80 <HAL_TIM_PWM_Start+0x14c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d107      	bne.n	8002c06 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8002c80 <HAL_TIM_PWM_Start+0x14c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d018      	beq.n	8002c42 <HAL_TIM_PWM_Start+0x10e>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c18:	d013      	beq.n	8002c42 <HAL_TIM_PWM_Start+0x10e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a19      	ldr	r2, [pc, #100]	@ (8002c84 <HAL_TIM_PWM_Start+0x150>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d00e      	beq.n	8002c42 <HAL_TIM_PWM_Start+0x10e>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a17      	ldr	r2, [pc, #92]	@ (8002c88 <HAL_TIM_PWM_Start+0x154>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d009      	beq.n	8002c42 <HAL_TIM_PWM_Start+0x10e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a16      	ldr	r2, [pc, #88]	@ (8002c8c <HAL_TIM_PWM_Start+0x158>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d004      	beq.n	8002c42 <HAL_TIM_PWM_Start+0x10e>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a14      	ldr	r2, [pc, #80]	@ (8002c90 <HAL_TIM_PWM_Start+0x15c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d111      	bne.n	8002c66 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b06      	cmp	r3, #6
 8002c52:	d010      	beq.n	8002c76 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c64:	e007      	b.n	8002c76 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 0201 	orr.w	r2, r2, #1
 8002c74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40010000 	.word	0x40010000
 8002c84:	40000400 	.word	0x40000400
 8002c88:	40000800 	.word	0x40000800
 8002c8c:	40000c00 	.word	0x40000c00
 8002c90:	40014000 	.word	0x40014000

08002c94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e0ae      	b.n	8002e10 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b0c      	cmp	r3, #12
 8002cbe:	f200 809f 	bhi.w	8002e00 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc8:	08002cfd 	.word	0x08002cfd
 8002ccc:	08002e01 	.word	0x08002e01
 8002cd0:	08002e01 	.word	0x08002e01
 8002cd4:	08002e01 	.word	0x08002e01
 8002cd8:	08002d3d 	.word	0x08002d3d
 8002cdc:	08002e01 	.word	0x08002e01
 8002ce0:	08002e01 	.word	0x08002e01
 8002ce4:	08002e01 	.word	0x08002e01
 8002ce8:	08002d7f 	.word	0x08002d7f
 8002cec:	08002e01 	.word	0x08002e01
 8002cf0:	08002e01 	.word	0x08002e01
 8002cf4:	08002e01 	.word	0x08002e01
 8002cf8:	08002dbf 	.word	0x08002dbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 f9dc 	bl	80030c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699a      	ldr	r2, [r3, #24]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0208 	orr.w	r2, r2, #8
 8002d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699a      	ldr	r2, [r3, #24]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0204 	bic.w	r2, r2, #4
 8002d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6999      	ldr	r1, [r3, #24]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	619a      	str	r2, [r3, #24]
      break;
 8002d3a:	e064      	b.n	8002e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 fa22 	bl	800318c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699a      	ldr	r2, [r3, #24]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699a      	ldr	r2, [r3, #24]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6999      	ldr	r1, [r3, #24]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	021a      	lsls	r2, r3, #8
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	619a      	str	r2, [r3, #24]
      break;
 8002d7c:	e043      	b.n	8002e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68b9      	ldr	r1, [r7, #8]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 fa6d 	bl	8003264 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69da      	ldr	r2, [r3, #28]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f042 0208 	orr.w	r2, r2, #8
 8002d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	69da      	ldr	r2, [r3, #28]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0204 	bic.w	r2, r2, #4
 8002da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	69d9      	ldr	r1, [r3, #28]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	61da      	str	r2, [r3, #28]
      break;
 8002dbc:	e023      	b.n	8002e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68b9      	ldr	r1, [r7, #8]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fab7 	bl	8003338 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	69da      	ldr	r2, [r3, #28]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	69da      	ldr	r2, [r3, #28]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	69d9      	ldr	r1, [r3, #28]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	021a      	lsls	r2, r3, #8
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	61da      	str	r2, [r3, #28]
      break;
 8002dfe:	e002      	b.n	8002e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	75fb      	strb	r3, [r7, #23]
      break;
 8002e04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_TIM_ConfigClockSource+0x1c>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e0b4      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x186>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e6c:	d03e      	beq.n	8002eec <HAL_TIM_ConfigClockSource+0xd4>
 8002e6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e72:	f200 8087 	bhi.w	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
 8002e76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e7a:	f000 8086 	beq.w	8002f8a <HAL_TIM_ConfigClockSource+0x172>
 8002e7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e82:	d87f      	bhi.n	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
 8002e84:	2b70      	cmp	r3, #112	@ 0x70
 8002e86:	d01a      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0xa6>
 8002e88:	2b70      	cmp	r3, #112	@ 0x70
 8002e8a:	d87b      	bhi.n	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
 8002e8c:	2b60      	cmp	r3, #96	@ 0x60
 8002e8e:	d050      	beq.n	8002f32 <HAL_TIM_ConfigClockSource+0x11a>
 8002e90:	2b60      	cmp	r3, #96	@ 0x60
 8002e92:	d877      	bhi.n	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
 8002e94:	2b50      	cmp	r3, #80	@ 0x50
 8002e96:	d03c      	beq.n	8002f12 <HAL_TIM_ConfigClockSource+0xfa>
 8002e98:	2b50      	cmp	r3, #80	@ 0x50
 8002e9a:	d873      	bhi.n	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
 8002e9c:	2b40      	cmp	r3, #64	@ 0x40
 8002e9e:	d058      	beq.n	8002f52 <HAL_TIM_ConfigClockSource+0x13a>
 8002ea0:	2b40      	cmp	r3, #64	@ 0x40
 8002ea2:	d86f      	bhi.n	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea4:	2b30      	cmp	r3, #48	@ 0x30
 8002ea6:	d064      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0x15a>
 8002ea8:	2b30      	cmp	r3, #48	@ 0x30
 8002eaa:	d86b      	bhi.n	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	d060      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0x15a>
 8002eb0:	2b20      	cmp	r3, #32
 8002eb2:	d867      	bhi.n	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d05c      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0x15a>
 8002eb8:	2b10      	cmp	r3, #16
 8002eba:	d05a      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0x15a>
 8002ebc:	e062      	b.n	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ece:	f000 fafd 	bl	80034cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ee0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	609a      	str	r2, [r3, #8]
      break;
 8002eea:	e04f      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002efc:	f000 fae6 	bl	80034cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f0e:	609a      	str	r2, [r3, #8]
      break;
 8002f10:	e03c      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f1e:	461a      	mov	r2, r3
 8002f20:	f000 fa5a 	bl	80033d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2150      	movs	r1, #80	@ 0x50
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 fab3 	bl	8003496 <TIM_ITRx_SetConfig>
      break;
 8002f30:	e02c      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f000 fa79 	bl	8003436 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2160      	movs	r1, #96	@ 0x60
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 faa3 	bl	8003496 <TIM_ITRx_SetConfig>
      break;
 8002f50:	e01c      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f000 fa3a 	bl	80033d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2140      	movs	r1, #64	@ 0x40
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fa93 	bl	8003496 <TIM_ITRx_SetConfig>
      break;
 8002f70:	e00c      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	f000 fa8a 	bl	8003496 <TIM_ITRx_SetConfig>
      break;
 8002f82:	e003      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
      break;
 8002f88:	e000      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a3a      	ldr	r2, [pc, #232]	@ (80030a4 <TIM_Base_SetConfig+0xfc>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00f      	beq.n	8002fe0 <TIM_Base_SetConfig+0x38>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fc6:	d00b      	beq.n	8002fe0 <TIM_Base_SetConfig+0x38>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a37      	ldr	r2, [pc, #220]	@ (80030a8 <TIM_Base_SetConfig+0x100>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d007      	beq.n	8002fe0 <TIM_Base_SetConfig+0x38>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a36      	ldr	r2, [pc, #216]	@ (80030ac <TIM_Base_SetConfig+0x104>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d003      	beq.n	8002fe0 <TIM_Base_SetConfig+0x38>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a35      	ldr	r2, [pc, #212]	@ (80030b0 <TIM_Base_SetConfig+0x108>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d108      	bne.n	8002ff2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a2b      	ldr	r2, [pc, #172]	@ (80030a4 <TIM_Base_SetConfig+0xfc>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d01b      	beq.n	8003032 <TIM_Base_SetConfig+0x8a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003000:	d017      	beq.n	8003032 <TIM_Base_SetConfig+0x8a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a28      	ldr	r2, [pc, #160]	@ (80030a8 <TIM_Base_SetConfig+0x100>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d013      	beq.n	8003032 <TIM_Base_SetConfig+0x8a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a27      	ldr	r2, [pc, #156]	@ (80030ac <TIM_Base_SetConfig+0x104>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d00f      	beq.n	8003032 <TIM_Base_SetConfig+0x8a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a26      	ldr	r2, [pc, #152]	@ (80030b0 <TIM_Base_SetConfig+0x108>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00b      	beq.n	8003032 <TIM_Base_SetConfig+0x8a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a25      	ldr	r2, [pc, #148]	@ (80030b4 <TIM_Base_SetConfig+0x10c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d007      	beq.n	8003032 <TIM_Base_SetConfig+0x8a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a24      	ldr	r2, [pc, #144]	@ (80030b8 <TIM_Base_SetConfig+0x110>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d003      	beq.n	8003032 <TIM_Base_SetConfig+0x8a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a23      	ldr	r2, [pc, #140]	@ (80030bc <TIM_Base_SetConfig+0x114>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d108      	bne.n	8003044 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4313      	orrs	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a0e      	ldr	r2, [pc, #56]	@ (80030a4 <TIM_Base_SetConfig+0xfc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d103      	bne.n	8003078 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d105      	bne.n	8003096 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f023 0201 	bic.w	r2, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	611a      	str	r2, [r3, #16]
  }
}
 8003096:	bf00      	nop
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	40010000 	.word	0x40010000
 80030a8:	40000400 	.word	0x40000400
 80030ac:	40000800 	.word	0x40000800
 80030b0:	40000c00 	.word	0x40000c00
 80030b4:	40014000 	.word	0x40014000
 80030b8:	40014400 	.word	0x40014400
 80030bc:	40014800 	.word	0x40014800

080030c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	f023 0201 	bic.w	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0303 	bic.w	r3, r3, #3
 80030f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f023 0302 	bic.w	r3, r3, #2
 8003108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a1c      	ldr	r2, [pc, #112]	@ (8003188 <TIM_OC1_SetConfig+0xc8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d10c      	bne.n	8003136 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f023 0308 	bic.w	r3, r3, #8
 8003122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	4313      	orrs	r3, r2
 800312c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f023 0304 	bic.w	r3, r3, #4
 8003134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a13      	ldr	r2, [pc, #76]	@ (8003188 <TIM_OC1_SetConfig+0xc8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d111      	bne.n	8003162 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800314c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	621a      	str	r2, [r3, #32]
}
 800317c:	bf00      	nop
 800317e:	371c      	adds	r7, #28
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	40010000 	.word	0x40010000

0800318c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	f023 0210 	bic.w	r2, r3, #16
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	021b      	lsls	r3, r3, #8
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f023 0320 	bic.w	r3, r3, #32
 80031d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003260 <TIM_OC2_SetConfig+0xd4>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d10d      	bne.n	8003208 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003206:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a15      	ldr	r2, [pc, #84]	@ (8003260 <TIM_OC2_SetConfig+0xd4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d113      	bne.n	8003238 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003216:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800321e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	621a      	str	r2, [r3, #32]
}
 8003252:	bf00      	nop
 8003254:	371c      	adds	r7, #28
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40010000 	.word	0x40010000

08003264 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0303 	bic.w	r3, r3, #3
 800329a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003334 <TIM_OC3_SetConfig+0xd0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d10d      	bne.n	80032de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	021b      	lsls	r3, r3, #8
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a14      	ldr	r2, [pc, #80]	@ (8003334 <TIM_OC3_SetConfig+0xd0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d113      	bne.n	800330e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80032f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	621a      	str	r2, [r3, #32]
}
 8003328:	bf00      	nop
 800332a:	371c      	adds	r7, #28
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	40010000 	.word	0x40010000

08003338 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800336e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	021b      	lsls	r3, r3, #8
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4313      	orrs	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003382:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	031b      	lsls	r3, r3, #12
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a10      	ldr	r2, [pc, #64]	@ (80033d4 <TIM_OC4_SetConfig+0x9c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d109      	bne.n	80033ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800339e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	019b      	lsls	r3, r3, #6
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	621a      	str	r2, [r3, #32]
}
 80033c6:	bf00      	nop
 80033c8:	371c      	adds	r7, #28
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40010000 	.word	0x40010000

080033d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	f023 0201 	bic.w	r2, r3, #1
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f023 030a 	bic.w	r3, r3, #10
 8003414:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4313      	orrs	r3, r2
 800341c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	621a      	str	r2, [r3, #32]
}
 800342a:	bf00      	nop
 800342c:	371c      	adds	r7, #28
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003436:	b480      	push	{r7}
 8003438:	b087      	sub	sp, #28
 800343a:	af00      	add	r7, sp, #0
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	f023 0210 	bic.w	r2, r3, #16
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003460:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	031b      	lsls	r3, r3, #12
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003472:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	4313      	orrs	r3, r2
 800347c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	621a      	str	r2, [r3, #32]
}
 800348a:	bf00      	nop
 800348c:	371c      	adds	r7, #28
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003496:	b480      	push	{r7}
 8003498:	b085      	sub	sp, #20
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f043 0307 	orr.w	r3, r3, #7
 80034b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	609a      	str	r2, [r3, #8]
}
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b087      	sub	sp, #28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	021a      	lsls	r2, r3, #8
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	431a      	orrs	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	609a      	str	r2, [r3, #8]
}
 8003500:	bf00      	nop
 8003502:	371c      	adds	r7, #28
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	2201      	movs	r2, #1
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a1a      	ldr	r2, [r3, #32]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	43db      	mvns	r3, r3
 800352e:	401a      	ands	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a1a      	ldr	r2, [r3, #32]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f003 031f 	and.w	r3, r3, #31
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	fa01 f303 	lsl.w	r3, r1, r3
 8003544:	431a      	orrs	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	621a      	str	r2, [r3, #32]
}
 800354a:	bf00      	nop
 800354c:	371c      	adds	r7, #28
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800356c:	2302      	movs	r3, #2
 800356e:	e050      	b.n	8003612 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d018      	beq.n	80035e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035bc:	d013      	beq.n	80035e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a18      	ldr	r2, [pc, #96]	@ (8003624 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00e      	beq.n	80035e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a16      	ldr	r2, [pc, #88]	@ (8003628 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d009      	beq.n	80035e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a15      	ldr	r2, [pc, #84]	@ (800362c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d004      	beq.n	80035e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a13      	ldr	r2, [pc, #76]	@ (8003630 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d10c      	bne.n	8003600 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40010000 	.word	0x40010000
 8003624:	40000400 	.word	0x40000400
 8003628:	40000800 	.word	0x40000800
 800362c:	40000c00 	.word	0x40000c00
 8003630:	40014000 	.word	0x40014000

08003634 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e042      	b.n	80036cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fd ffc4 	bl	80015e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2224      	movs	r2, #36	@ 0x24
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003676:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 fcdb 	bl	8004034 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800368c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695a      	ldr	r2, [r3, #20]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800369c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	4613      	mov	r3, r2
 80036e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	d112      	bne.n	8003714 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <HAL_UART_Receive_IT+0x26>
 80036f4:	88fb      	ldrh	r3, [r7, #6]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e00b      	b.n	8003716 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003704:	88fb      	ldrh	r3, [r7, #6]
 8003706:	461a      	mov	r2, r3
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 faba 	bl	8003c84 <UART_Start_Receive_IT>
 8003710:	4603      	mov	r3, r0
 8003712:	e000      	b.n	8003716 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003714:	2302      	movs	r3, #2
  }
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b0ba      	sub	sp, #232	@ 0xe8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003746:	2300      	movs	r3, #0
 8003748:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800374c:	2300      	movs	r3, #0
 800374e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800375e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10f      	bne.n	8003786 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b00      	cmp	r3, #0
 8003770:	d009      	beq.n	8003786 <HAL_UART_IRQHandler+0x66>
 8003772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fb99 	bl	8003eb6 <UART_Receive_IT>
      return;
 8003784:	e25b      	b.n	8003c3e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 80de 	beq.w	800394c <HAL_UART_IRQHandler+0x22c>
 8003790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d106      	bne.n	80037aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800379c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 80d1 	beq.w	800394c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00b      	beq.n	80037ce <HAL_UART_IRQHandler+0xae>
 80037b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c6:	f043 0201 	orr.w	r2, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00b      	beq.n	80037f2 <HAL_UART_IRQHandler+0xd2>
 80037da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d005      	beq.n	80037f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ea:	f043 0202 	orr.w	r2, r3, #2
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00b      	beq.n	8003816 <HAL_UART_IRQHandler+0xf6>
 80037fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d005      	beq.n	8003816 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380e:	f043 0204 	orr.w	r2, r3, #4
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d011      	beq.n	8003846 <HAL_UART_IRQHandler+0x126>
 8003822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b00      	cmp	r3, #0
 800382c:	d105      	bne.n	800383a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800382e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383e:	f043 0208 	orr.w	r2, r3, #8
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 81f2 	beq.w	8003c34 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <HAL_UART_IRQHandler+0x14e>
 800385c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fb24 	bl	8003eb6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003878:	2b40      	cmp	r3, #64	@ 0x40
 800387a:	bf0c      	ite	eq
 800387c:	2301      	moveq	r3, #1
 800387e:	2300      	movne	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d103      	bne.n	800389a <HAL_UART_IRQHandler+0x17a>
 8003892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003896:	2b00      	cmp	r3, #0
 8003898:	d04f      	beq.n	800393a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fa2c 	bl	8003cf8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038aa:	2b40      	cmp	r3, #64	@ 0x40
 80038ac:	d141      	bne.n	8003932 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3314      	adds	r3, #20
 80038b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038bc:	e853 3f00 	ldrex	r3, [r3]
 80038c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80038c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80038c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3314      	adds	r3, #20
 80038d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80038de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80038e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038ea:	e841 2300 	strex	r3, r2, [r1]
 80038ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1d9      	bne.n	80038ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d013      	beq.n	800392a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003906:	4a7e      	ldr	r2, [pc, #504]	@ (8003b00 <HAL_UART_IRQHandler+0x3e0>)
 8003908:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800390e:	4618      	mov	r0, r3
 8003910:	f7fe f99b 	bl	8001c4a <HAL_DMA_Abort_IT>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d016      	beq.n	8003948 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003924:	4610      	mov	r0, r2
 8003926:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003928:	e00e      	b.n	8003948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f994 	bl	8003c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003930:	e00a      	b.n	8003948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f990 	bl	8003c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003938:	e006      	b.n	8003948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f98c 	bl	8003c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003946:	e175      	b.n	8003c34 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003948:	bf00      	nop
    return;
 800394a:	e173      	b.n	8003c34 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003950:	2b01      	cmp	r3, #1
 8003952:	f040 814f 	bne.w	8003bf4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 8148 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8141 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003972:	2300      	movs	r3, #0
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003992:	2b40      	cmp	r3, #64	@ 0x40
 8003994:	f040 80b6 	bne.w	8003b04 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 8145 	beq.w	8003c38 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039b6:	429a      	cmp	r2, r3
 80039b8:	f080 813e 	bcs.w	8003c38 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039ce:	f000 8088 	beq.w	8003ae2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	330c      	adds	r3, #12
 80039d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039e0:	e853 3f00 	ldrex	r3, [r3]
 80039e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	330c      	adds	r3, #12
 80039fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80039fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a06:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a0e:	e841 2300 	strex	r3, r2, [r1]
 8003a12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1d9      	bne.n	80039d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3314      	adds	r3, #20
 8003a24:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a28:	e853 3f00 	ldrex	r3, [r3]
 8003a2c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a30:	f023 0301 	bic.w	r3, r3, #1
 8003a34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3314      	adds	r3, #20
 8003a3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a42:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a46:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a4e:	e841 2300 	strex	r3, r2, [r1]
 8003a52:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1e1      	bne.n	8003a1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3314      	adds	r3, #20
 8003a60:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a64:	e853 3f00 	ldrex	r3, [r3]
 8003a68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3314      	adds	r3, #20
 8003a7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a86:	e841 2300 	strex	r3, r2, [r1]
 8003a8a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1e3      	bne.n	8003a5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	330c      	adds	r3, #12
 8003aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003aaa:	e853 3f00 	ldrex	r3, [r3]
 8003aae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ab0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ab2:	f023 0310 	bic.w	r3, r3, #16
 8003ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	330c      	adds	r3, #12
 8003ac0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003ac4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ac6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003aca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003acc:	e841 2300 	strex	r3, r2, [r1]
 8003ad0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ad2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1e3      	bne.n	8003aa0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fe f844 	bl	8001b6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	4619      	mov	r1, r3
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f8b7 	bl	8003c6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003afe:	e09b      	b.n	8003c38 <HAL_UART_IRQHandler+0x518>
 8003b00:	08003dbf 	.word	0x08003dbf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 808e 	beq.w	8003c3c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003b20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8089 	beq.w	8003c3c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	330c      	adds	r3, #12
 8003b30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b34:	e853 3f00 	ldrex	r3, [r3]
 8003b38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	330c      	adds	r3, #12
 8003b4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003b4e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b56:	e841 2300 	strex	r3, r2, [r1]
 8003b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1e3      	bne.n	8003b2a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	3314      	adds	r3, #20
 8003b68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6c:	e853 3f00 	ldrex	r3, [r3]
 8003b70:	623b      	str	r3, [r7, #32]
   return(result);
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	f023 0301 	bic.w	r3, r3, #1
 8003b78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3314      	adds	r3, #20
 8003b82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b86:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b8e:	e841 2300 	strex	r3, r2, [r1]
 8003b92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1e3      	bne.n	8003b62 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	330c      	adds	r3, #12
 8003bae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	e853 3f00 	ldrex	r3, [r3]
 8003bb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0310 	bic.w	r3, r3, #16
 8003bbe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	330c      	adds	r3, #12
 8003bc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003bcc:	61fa      	str	r2, [r7, #28]
 8003bce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd0:	69b9      	ldr	r1, [r7, #24]
 8003bd2:	69fa      	ldr	r2, [r7, #28]
 8003bd4:	e841 2300 	strex	r3, r2, [r1]
 8003bd8:	617b      	str	r3, [r7, #20]
   return(result);
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1e3      	bne.n	8003ba8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003be6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bea:	4619      	mov	r1, r3
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f83d 	bl	8003c6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bf2:	e023      	b.n	8003c3c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d009      	beq.n	8003c14 <HAL_UART_IRQHandler+0x4f4>
 8003c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f8ea 	bl	8003de6 <UART_Transmit_IT>
    return;
 8003c12:	e014      	b.n	8003c3e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00e      	beq.n	8003c3e <HAL_UART_IRQHandler+0x51e>
 8003c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d008      	beq.n	8003c3e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f92a 	bl	8003e86 <UART_EndTransmit_IT>
    return;
 8003c32:	e004      	b.n	8003c3e <HAL_UART_IRQHandler+0x51e>
    return;
 8003c34:	bf00      	nop
 8003c36:	e002      	b.n	8003c3e <HAL_UART_IRQHandler+0x51e>
      return;
 8003c38:	bf00      	nop
 8003c3a:	e000      	b.n	8003c3e <HAL_UART_IRQHandler+0x51e>
      return;
 8003c3c:	bf00      	nop
  }
}
 8003c3e:	37e8      	adds	r7, #232	@ 0xe8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	460b      	mov	r3, r1
 8003c76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	88fa      	ldrh	r2, [r7, #6]
 8003c9c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	88fa      	ldrh	r2, [r7, #6]
 8003ca2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2222      	movs	r2, #34	@ 0x22
 8003cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d007      	beq.n	8003cca <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cc8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695a      	ldr	r2, [r3, #20]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f042 0201 	orr.w	r2, r2, #1
 8003cd8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f042 0220 	orr.w	r2, r2, #32
 8003ce8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b095      	sub	sp, #84	@ 0x54
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	330c      	adds	r3, #12
 8003d06:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d0a:	e853 3f00 	ldrex	r3, [r3]
 8003d0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	330c      	adds	r3, #12
 8003d1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d20:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d28:	e841 2300 	strex	r3, r2, [r1]
 8003d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1e5      	bne.n	8003d00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3314      	adds	r3, #20
 8003d3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	e853 3f00 	ldrex	r3, [r3]
 8003d42:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f023 0301 	bic.w	r3, r3, #1
 8003d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3314      	adds	r3, #20
 8003d52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d5c:	e841 2300 	strex	r3, r2, [r1]
 8003d60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e5      	bne.n	8003d34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d119      	bne.n	8003da4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	330c      	adds	r3, #12
 8003d76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	e853 3f00 	ldrex	r3, [r3]
 8003d7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f023 0310 	bic.w	r3, r3, #16
 8003d86:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	330c      	adds	r3, #12
 8003d8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d90:	61ba      	str	r2, [r7, #24]
 8003d92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d94:	6979      	ldr	r1, [r7, #20]
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	e841 2300 	strex	r3, r2, [r1]
 8003d9c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1e5      	bne.n	8003d70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003db2:	bf00      	nop
 8003db4:	3754      	adds	r7, #84	@ 0x54
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f7ff ff3d 	bl	8003c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dde:	bf00      	nop
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b085      	sub	sp, #20
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b21      	cmp	r3, #33	@ 0x21
 8003df8:	d13e      	bne.n	8003e78 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e02:	d114      	bne.n	8003e2e <UART_Transmit_IT+0x48>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d110      	bne.n	8003e2e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e20:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	1c9a      	adds	r2, r3, #2
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	621a      	str	r2, [r3, #32]
 8003e2c:	e008      	b.n	8003e40 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	1c59      	adds	r1, r3, #1
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6211      	str	r1, [r2, #32]
 8003e38:	781a      	ldrb	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10f      	bne.n	8003e74 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e62:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e72:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	e000      	b.n	8003e7a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e78:	2302      	movs	r3, #2
  }
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b082      	sub	sp, #8
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff fecc 	bl	8003c44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b08c      	sub	sp, #48	@ 0x30
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b22      	cmp	r3, #34	@ 0x22
 8003ec8:	f040 80ae 	bne.w	8004028 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ed4:	d117      	bne.n	8003f06 <UART_Receive_IT+0x50>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d113      	bne.n	8003f06 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efe:	1c9a      	adds	r2, r3, #2
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f04:	e026      	b.n	8003f54 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f18:	d007      	beq.n	8003f2a <UART_Receive_IT+0x74>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10a      	bne.n	8003f38 <UART_Receive_IT+0x82>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d106      	bne.n	8003f38 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f34:	701a      	strb	r2, [r3, #0]
 8003f36:	e008      	b.n	8003f4a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	4619      	mov	r1, r3
 8003f62:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d15d      	bne.n	8004024 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0220 	bic.w	r2, r2, #32
 8003f76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695a      	ldr	r2, [r3, #20]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0201 	bic.w	r2, r2, #1
 8003f96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d135      	bne.n	800401a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	330c      	adds	r3, #12
 8003fba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f023 0310 	bic.w	r3, r3, #16
 8003fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd4:	623a      	str	r2, [r7, #32]
 8003fd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	69f9      	ldr	r1, [r7, #28]
 8003fda:	6a3a      	ldr	r2, [r7, #32]
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e5      	bne.n	8003fb4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0310 	and.w	r3, r3, #16
 8003ff2:	2b10      	cmp	r3, #16
 8003ff4:	d10a      	bne.n	800400c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004010:	4619      	mov	r1, r3
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff fe2a 	bl	8003c6c <HAL_UARTEx_RxEventCallback>
 8004018:	e002      	b.n	8004020 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fd f94c 	bl	80012b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	e002      	b.n	800402a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	e000      	b.n	800402a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004028:	2302      	movs	r3, #2
  }
}
 800402a:	4618      	mov	r0, r3
 800402c:	3730      	adds	r7, #48	@ 0x30
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004038:	b0c0      	sub	sp, #256	@ 0x100
 800403a:	af00      	add	r7, sp, #0
 800403c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004050:	68d9      	ldr	r1, [r3, #12]
 8004052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	ea40 0301 	orr.w	r3, r0, r1
 800405c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800405e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	431a      	orrs	r2, r3
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	431a      	orrs	r2, r3
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800408c:	f021 010c 	bic.w	r1, r1, #12
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800409a:	430b      	orrs	r3, r1
 800409c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800409e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ae:	6999      	ldr	r1, [r3, #24]
 80040b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	ea40 0301 	orr.w	r3, r0, r1
 80040ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	4b8f      	ldr	r3, [pc, #572]	@ (8004300 <UART_SetConfig+0x2cc>)
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d005      	beq.n	80040d4 <UART_SetConfig+0xa0>
 80040c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	4b8d      	ldr	r3, [pc, #564]	@ (8004304 <UART_SetConfig+0x2d0>)
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d104      	bne.n	80040de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040d4:	f7fe fc16 	bl	8002904 <HAL_RCC_GetPCLK2Freq>
 80040d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040dc:	e003      	b.n	80040e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040de:	f7fe fbfd 	bl	80028dc <HAL_RCC_GetPCLK1Freq>
 80040e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040f0:	f040 810c 	bne.w	800430c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040f8:	2200      	movs	r2, #0
 80040fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004102:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004106:	4622      	mov	r2, r4
 8004108:	462b      	mov	r3, r5
 800410a:	1891      	adds	r1, r2, r2
 800410c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800410e:	415b      	adcs	r3, r3
 8004110:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004112:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004116:	4621      	mov	r1, r4
 8004118:	eb12 0801 	adds.w	r8, r2, r1
 800411c:	4629      	mov	r1, r5
 800411e:	eb43 0901 	adc.w	r9, r3, r1
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800412e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004132:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004136:	4690      	mov	r8, r2
 8004138:	4699      	mov	r9, r3
 800413a:	4623      	mov	r3, r4
 800413c:	eb18 0303 	adds.w	r3, r8, r3
 8004140:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004144:	462b      	mov	r3, r5
 8004146:	eb49 0303 	adc.w	r3, r9, r3
 800414a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800414e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800415a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800415e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004162:	460b      	mov	r3, r1
 8004164:	18db      	adds	r3, r3, r3
 8004166:	653b      	str	r3, [r7, #80]	@ 0x50
 8004168:	4613      	mov	r3, r2
 800416a:	eb42 0303 	adc.w	r3, r2, r3
 800416e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004170:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004174:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004178:	f7fc fc4c 	bl	8000a14 <__aeabi_uldivmod>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4b61      	ldr	r3, [pc, #388]	@ (8004308 <UART_SetConfig+0x2d4>)
 8004182:	fba3 2302 	umull	r2, r3, r3, r2
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	011c      	lsls	r4, r3, #4
 800418a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800418e:	2200      	movs	r2, #0
 8004190:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004194:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004198:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800419c:	4642      	mov	r2, r8
 800419e:	464b      	mov	r3, r9
 80041a0:	1891      	adds	r1, r2, r2
 80041a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80041a4:	415b      	adcs	r3, r3
 80041a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041ac:	4641      	mov	r1, r8
 80041ae:	eb12 0a01 	adds.w	sl, r2, r1
 80041b2:	4649      	mov	r1, r9
 80041b4:	eb43 0b01 	adc.w	fp, r3, r1
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041cc:	4692      	mov	sl, r2
 80041ce:	469b      	mov	fp, r3
 80041d0:	4643      	mov	r3, r8
 80041d2:	eb1a 0303 	adds.w	r3, sl, r3
 80041d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041da:	464b      	mov	r3, r9
 80041dc:	eb4b 0303 	adc.w	r3, fp, r3
 80041e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80041f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041f8:	460b      	mov	r3, r1
 80041fa:	18db      	adds	r3, r3, r3
 80041fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80041fe:	4613      	mov	r3, r2
 8004200:	eb42 0303 	adc.w	r3, r2, r3
 8004204:	647b      	str	r3, [r7, #68]	@ 0x44
 8004206:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800420a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800420e:	f7fc fc01 	bl	8000a14 <__aeabi_uldivmod>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	4611      	mov	r1, r2
 8004218:	4b3b      	ldr	r3, [pc, #236]	@ (8004308 <UART_SetConfig+0x2d4>)
 800421a:	fba3 2301 	umull	r2, r3, r3, r1
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	2264      	movs	r2, #100	@ 0x64
 8004222:	fb02 f303 	mul.w	r3, r2, r3
 8004226:	1acb      	subs	r3, r1, r3
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800422e:	4b36      	ldr	r3, [pc, #216]	@ (8004308 <UART_SetConfig+0x2d4>)
 8004230:	fba3 2302 	umull	r2, r3, r3, r2
 8004234:	095b      	lsrs	r3, r3, #5
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800423c:	441c      	add	r4, r3
 800423e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004242:	2200      	movs	r2, #0
 8004244:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004248:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800424c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004250:	4642      	mov	r2, r8
 8004252:	464b      	mov	r3, r9
 8004254:	1891      	adds	r1, r2, r2
 8004256:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004258:	415b      	adcs	r3, r3
 800425a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800425c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004260:	4641      	mov	r1, r8
 8004262:	1851      	adds	r1, r2, r1
 8004264:	6339      	str	r1, [r7, #48]	@ 0x30
 8004266:	4649      	mov	r1, r9
 8004268:	414b      	adcs	r3, r1
 800426a:	637b      	str	r3, [r7, #52]	@ 0x34
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004278:	4659      	mov	r1, fp
 800427a:	00cb      	lsls	r3, r1, #3
 800427c:	4651      	mov	r1, sl
 800427e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004282:	4651      	mov	r1, sl
 8004284:	00ca      	lsls	r2, r1, #3
 8004286:	4610      	mov	r0, r2
 8004288:	4619      	mov	r1, r3
 800428a:	4603      	mov	r3, r0
 800428c:	4642      	mov	r2, r8
 800428e:	189b      	adds	r3, r3, r2
 8004290:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004294:	464b      	mov	r3, r9
 8004296:	460a      	mov	r2, r1
 8004298:	eb42 0303 	adc.w	r3, r2, r3
 800429c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042b4:	460b      	mov	r3, r1
 80042b6:	18db      	adds	r3, r3, r3
 80042b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042ba:	4613      	mov	r3, r2
 80042bc:	eb42 0303 	adc.w	r3, r2, r3
 80042c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042ca:	f7fc fba3 	bl	8000a14 <__aeabi_uldivmod>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004308 <UART_SetConfig+0x2d4>)
 80042d4:	fba3 1302 	umull	r1, r3, r3, r2
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	2164      	movs	r1, #100	@ 0x64
 80042dc:	fb01 f303 	mul.w	r3, r1, r3
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	3332      	adds	r3, #50	@ 0x32
 80042e6:	4a08      	ldr	r2, [pc, #32]	@ (8004308 <UART_SetConfig+0x2d4>)
 80042e8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	f003 0207 	and.w	r2, r3, #7
 80042f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4422      	add	r2, r4
 80042fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042fc:	e106      	b.n	800450c <UART_SetConfig+0x4d8>
 80042fe:	bf00      	nop
 8004300:	40011000 	.word	0x40011000
 8004304:	40011400 	.word	0x40011400
 8004308:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800430c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004310:	2200      	movs	r2, #0
 8004312:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004316:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800431a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800431e:	4642      	mov	r2, r8
 8004320:	464b      	mov	r3, r9
 8004322:	1891      	adds	r1, r2, r2
 8004324:	6239      	str	r1, [r7, #32]
 8004326:	415b      	adcs	r3, r3
 8004328:	627b      	str	r3, [r7, #36]	@ 0x24
 800432a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800432e:	4641      	mov	r1, r8
 8004330:	1854      	adds	r4, r2, r1
 8004332:	4649      	mov	r1, r9
 8004334:	eb43 0501 	adc.w	r5, r3, r1
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	00eb      	lsls	r3, r5, #3
 8004342:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004346:	00e2      	lsls	r2, r4, #3
 8004348:	4614      	mov	r4, r2
 800434a:	461d      	mov	r5, r3
 800434c:	4643      	mov	r3, r8
 800434e:	18e3      	adds	r3, r4, r3
 8004350:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004354:	464b      	mov	r3, r9
 8004356:	eb45 0303 	adc.w	r3, r5, r3
 800435a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800435e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800436a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	f04f 0300 	mov.w	r3, #0
 8004376:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800437a:	4629      	mov	r1, r5
 800437c:	008b      	lsls	r3, r1, #2
 800437e:	4621      	mov	r1, r4
 8004380:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004384:	4621      	mov	r1, r4
 8004386:	008a      	lsls	r2, r1, #2
 8004388:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800438c:	f7fc fb42 	bl	8000a14 <__aeabi_uldivmod>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	4b60      	ldr	r3, [pc, #384]	@ (8004518 <UART_SetConfig+0x4e4>)
 8004396:	fba3 2302 	umull	r2, r3, r3, r2
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	011c      	lsls	r4, r3, #4
 800439e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043a2:	2200      	movs	r2, #0
 80043a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80043b0:	4642      	mov	r2, r8
 80043b2:	464b      	mov	r3, r9
 80043b4:	1891      	adds	r1, r2, r2
 80043b6:	61b9      	str	r1, [r7, #24]
 80043b8:	415b      	adcs	r3, r3
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043c0:	4641      	mov	r1, r8
 80043c2:	1851      	adds	r1, r2, r1
 80043c4:	6139      	str	r1, [r7, #16]
 80043c6:	4649      	mov	r1, r9
 80043c8:	414b      	adcs	r3, r1
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043d8:	4659      	mov	r1, fp
 80043da:	00cb      	lsls	r3, r1, #3
 80043dc:	4651      	mov	r1, sl
 80043de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043e2:	4651      	mov	r1, sl
 80043e4:	00ca      	lsls	r2, r1, #3
 80043e6:	4610      	mov	r0, r2
 80043e8:	4619      	mov	r1, r3
 80043ea:	4603      	mov	r3, r0
 80043ec:	4642      	mov	r2, r8
 80043ee:	189b      	adds	r3, r3, r2
 80043f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043f4:	464b      	mov	r3, r9
 80043f6:	460a      	mov	r2, r1
 80043f8:	eb42 0303 	adc.w	r3, r2, r3
 80043fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	67bb      	str	r3, [r7, #120]	@ 0x78
 800440a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004418:	4649      	mov	r1, r9
 800441a:	008b      	lsls	r3, r1, #2
 800441c:	4641      	mov	r1, r8
 800441e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004422:	4641      	mov	r1, r8
 8004424:	008a      	lsls	r2, r1, #2
 8004426:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800442a:	f7fc faf3 	bl	8000a14 <__aeabi_uldivmod>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4611      	mov	r1, r2
 8004434:	4b38      	ldr	r3, [pc, #224]	@ (8004518 <UART_SetConfig+0x4e4>)
 8004436:	fba3 2301 	umull	r2, r3, r3, r1
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	2264      	movs	r2, #100	@ 0x64
 800443e:	fb02 f303 	mul.w	r3, r2, r3
 8004442:	1acb      	subs	r3, r1, r3
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	3332      	adds	r3, #50	@ 0x32
 8004448:	4a33      	ldr	r2, [pc, #204]	@ (8004518 <UART_SetConfig+0x4e4>)
 800444a:	fba2 2303 	umull	r2, r3, r2, r3
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004454:	441c      	add	r4, r3
 8004456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800445a:	2200      	movs	r2, #0
 800445c:	673b      	str	r3, [r7, #112]	@ 0x70
 800445e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004460:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004464:	4642      	mov	r2, r8
 8004466:	464b      	mov	r3, r9
 8004468:	1891      	adds	r1, r2, r2
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	415b      	adcs	r3, r3
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004474:	4641      	mov	r1, r8
 8004476:	1851      	adds	r1, r2, r1
 8004478:	6039      	str	r1, [r7, #0]
 800447a:	4649      	mov	r1, r9
 800447c:	414b      	adcs	r3, r1
 800447e:	607b      	str	r3, [r7, #4]
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800448c:	4659      	mov	r1, fp
 800448e:	00cb      	lsls	r3, r1, #3
 8004490:	4651      	mov	r1, sl
 8004492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004496:	4651      	mov	r1, sl
 8004498:	00ca      	lsls	r2, r1, #3
 800449a:	4610      	mov	r0, r2
 800449c:	4619      	mov	r1, r3
 800449e:	4603      	mov	r3, r0
 80044a0:	4642      	mov	r2, r8
 80044a2:	189b      	adds	r3, r3, r2
 80044a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044a6:	464b      	mov	r3, r9
 80044a8:	460a      	mov	r2, r1
 80044aa:	eb42 0303 	adc.w	r3, r2, r3
 80044ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80044ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	f04f 0300 	mov.w	r3, #0
 80044c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044c8:	4649      	mov	r1, r9
 80044ca:	008b      	lsls	r3, r1, #2
 80044cc:	4641      	mov	r1, r8
 80044ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044d2:	4641      	mov	r1, r8
 80044d4:	008a      	lsls	r2, r1, #2
 80044d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044da:	f7fc fa9b 	bl	8000a14 <__aeabi_uldivmod>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004518 <UART_SetConfig+0x4e4>)
 80044e4:	fba3 1302 	umull	r1, r3, r3, r2
 80044e8:	095b      	lsrs	r3, r3, #5
 80044ea:	2164      	movs	r1, #100	@ 0x64
 80044ec:	fb01 f303 	mul.w	r3, r1, r3
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	3332      	adds	r3, #50	@ 0x32
 80044f6:	4a08      	ldr	r2, [pc, #32]	@ (8004518 <UART_SetConfig+0x4e4>)
 80044f8:	fba2 2303 	umull	r2, r3, r2, r3
 80044fc:	095b      	lsrs	r3, r3, #5
 80044fe:	f003 020f 	and.w	r2, r3, #15
 8004502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4422      	add	r2, r4
 800450a:	609a      	str	r2, [r3, #8]
}
 800450c:	bf00      	nop
 800450e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004512:	46bd      	mov	sp, r7
 8004514:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004518:	51eb851f 	.word	0x51eb851f

0800451c <memset>:
 800451c:	4402      	add	r2, r0
 800451e:	4603      	mov	r3, r0
 8004520:	4293      	cmp	r3, r2
 8004522:	d100      	bne.n	8004526 <memset+0xa>
 8004524:	4770      	bx	lr
 8004526:	f803 1b01 	strb.w	r1, [r3], #1
 800452a:	e7f9      	b.n	8004520 <memset+0x4>

0800452c <__libc_init_array>:
 800452c:	b570      	push	{r4, r5, r6, lr}
 800452e:	4d0d      	ldr	r5, [pc, #52]	@ (8004564 <__libc_init_array+0x38>)
 8004530:	4c0d      	ldr	r4, [pc, #52]	@ (8004568 <__libc_init_array+0x3c>)
 8004532:	1b64      	subs	r4, r4, r5
 8004534:	10a4      	asrs	r4, r4, #2
 8004536:	2600      	movs	r6, #0
 8004538:	42a6      	cmp	r6, r4
 800453a:	d109      	bne.n	8004550 <__libc_init_array+0x24>
 800453c:	4d0b      	ldr	r5, [pc, #44]	@ (800456c <__libc_init_array+0x40>)
 800453e:	4c0c      	ldr	r4, [pc, #48]	@ (8004570 <__libc_init_array+0x44>)
 8004540:	f000 f818 	bl	8004574 <_init>
 8004544:	1b64      	subs	r4, r4, r5
 8004546:	10a4      	asrs	r4, r4, #2
 8004548:	2600      	movs	r6, #0
 800454a:	42a6      	cmp	r6, r4
 800454c:	d105      	bne.n	800455a <__libc_init_array+0x2e>
 800454e:	bd70      	pop	{r4, r5, r6, pc}
 8004550:	f855 3b04 	ldr.w	r3, [r5], #4
 8004554:	4798      	blx	r3
 8004556:	3601      	adds	r6, #1
 8004558:	e7ee      	b.n	8004538 <__libc_init_array+0xc>
 800455a:	f855 3b04 	ldr.w	r3, [r5], #4
 800455e:	4798      	blx	r3
 8004560:	3601      	adds	r6, #1
 8004562:	e7f2      	b.n	800454a <__libc_init_array+0x1e>
 8004564:	080045ac 	.word	0x080045ac
 8004568:	080045ac 	.word	0x080045ac
 800456c:	080045ac 	.word	0x080045ac
 8004570:	080045b0 	.word	0x080045b0

08004574 <_init>:
 8004574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004576:	bf00      	nop
 8004578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457a:	bc08      	pop	{r3}
 800457c:	469e      	mov	lr, r3
 800457e:	4770      	bx	lr

08004580 <_fini>:
 8004580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004582:	bf00      	nop
 8004584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004586:	bc08      	pop	{r3}
 8004588:	469e      	mov	lr, r3
 800458a:	4770      	bx	lr
