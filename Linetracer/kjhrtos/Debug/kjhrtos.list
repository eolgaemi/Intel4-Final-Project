
kjhrtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003884  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003a24  08003a24  00004a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ab0  08003ab0  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  08003ab0  08003ab0  00004ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ab8  08003ab8  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ab8  08003ab8  00004ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003abc  08003abc  00004abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003ac0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004064  20000010  08003ad0  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004074  08003ad0  00005074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001040f  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002653  00000000  00000000  0001544f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  00017aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb2  00000000  00000000  00018af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017138  00000000  00000000  000197a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011aea  00000000  00000000  000308da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096205  00000000  00000000  000423c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d85c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004434  00000000  00000000  000d860c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000dca40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003a0c 	.word	0x08003a0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08003a0c 	.word	0x08003a0c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	@ (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	@ (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000002c 	.word	0x2000002c
 8000500:	20000080 	.word	0x20000080

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b096      	sub	sp, #88	@ 0x58
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fadb 	bl	8000ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f84d 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f92d 	bl	8000770 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000516:	f000 f901 	bl	800071c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800051a:	f000 f8b1 	bl	8000680 <MX_TIM3_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task1 */
  osThreadDef(task1, StartDefaultTask, osPriorityAboveNormal, 0, 128);
 800051e:	4b1d      	ldr	r3, [pc, #116]	@ (8000594 <main+0x90>)
 8000520:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000524:	461d      	mov	r5, r3
 8000526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800052e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 8000532:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000536:	2100      	movs	r1, #0
 8000538:	4618      	mov	r0, r3
 800053a:	f001 ffde 	bl	80024fa <osThreadCreate>
 800053e:	4603      	mov	r3, r0
 8000540:	4a15      	ldr	r2, [pc, #84]	@ (8000598 <main+0x94>)
 8000542:	6013      	str	r3, [r2, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, StartTask02, osPriorityHigh, 0, 128);
 8000544:	4b15      	ldr	r3, [pc, #84]	@ (800059c <main+0x98>)
 8000546:	f107 0420 	add.w	r4, r7, #32
 800054a:	461d      	mov	r5, r3
 800054c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000550:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000554:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 8000558:	f107 0320 	add.w	r3, r7, #32
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f001 ffcb 	bl	80024fa <osThreadCreate>
 8000564:	4603      	mov	r3, r0
 8000566:	4a0e      	ldr	r2, [pc, #56]	@ (80005a0 <main+0x9c>)
 8000568:	6013      	str	r3, [r2, #0]

  /* definition and creation of task3 */
  osThreadDef(task3, StartTask03, osPriorityIdle, 0, 128);
 800056a:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <main+0xa0>)
 800056c:	1d3c      	adds	r4, r7, #4
 800056e:	461d      	mov	r5, r3
 8000570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000574:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000578:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task3Handle = osThreadCreate(osThread(task3), NULL);
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f001 ffba 	bl	80024fa <osThreadCreate>
 8000586:	4603      	mov	r3, r0
 8000588:	4a07      	ldr	r2, [pc, #28]	@ (80005a8 <main+0xa4>)
 800058a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800058c:	f001 ffae 	bl	80024ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <main+0x8c>
 8000594:	08003a2c 	.word	0x08003a2c
 8000598:	20000310 	.word	0x20000310
 800059c:	08003a50 	.word	0x08003a50
 80005a0:	20000314 	.word	0x20000314
 80005a4:	08003a74 	.word	0x08003a74
 80005a8:	20000318 	.word	0x20000318

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	@ 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	2230      	movs	r2, #48	@ 0x30
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 f9fa 	bl	80039b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	4b28      	ldr	r3, [pc, #160]	@ (8000678 <SystemClock_Config+0xcc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d8:	4a27      	ldr	r2, [pc, #156]	@ (8000678 <SystemClock_Config+0xcc>)
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e0:	4b25      	ldr	r3, [pc, #148]	@ (8000678 <SystemClock_Config+0xcc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ec:	2300      	movs	r3, #0
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	4b22      	ldr	r3, [pc, #136]	@ (800067c <SystemClock_Config+0xd0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a21      	ldr	r2, [pc, #132]	@ (800067c <SystemClock_Config+0xd0>)
 80005f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b1f      	ldr	r3, [pc, #124]	@ (800067c <SystemClock_Config+0xd0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000608:	2302      	movs	r3, #2
 800060a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000610:	2310      	movs	r3, #16
 8000612:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000618:	2300      	movs	r3, #0
 800061a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800061c:	2310      	movs	r3, #16
 800061e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000620:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000624:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000626:	2304      	movs	r3, #4
 8000628:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800062a:	2304      	movs	r3, #4
 800062c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	4618      	mov	r0, r3
 8000634:	f000 fd3c 	bl	80010b0 <HAL_RCC_OscConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800063e:	f000 f941 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	2302      	movs	r3, #2
 8000648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000652:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2102      	movs	r1, #2
 800065e:	4618      	mov	r0, r3
 8000660:	f000 ff9e 	bl	80015a0 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800066a:	f000 f92b 	bl	80008c4 <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3750      	adds	r7, #80	@ 0x50
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000694:	463b      	mov	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800069c:	4b1d      	ldr	r3, [pc, #116]	@ (8000714 <MX_TIM3_Init+0x94>)
 800069e:	4a1e      	ldr	r2, [pc, #120]	@ (8000718 <MX_TIM3_Init+0x98>)
 80006a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80006a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000714 <MX_TIM3_Init+0x94>)
 80006a4:	2253      	movs	r2, #83	@ 0x53
 80006a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000714 <MX_TIM3_Init+0x94>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006ae:	4b19      	ldr	r3, [pc, #100]	@ (8000714 <MX_TIM3_Init+0x94>)
 80006b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b6:	4b17      	ldr	r3, [pc, #92]	@ (8000714 <MX_TIM3_Init+0x94>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006bc:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <MX_TIM3_Init+0x94>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006c2:	4814      	ldr	r0, [pc, #80]	@ (8000714 <MX_TIM3_Init+0x94>)
 80006c4:	f001 f98c 	bl	80019e0 <HAL_TIM_Base_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80006ce:	f000 f8f9 	bl	80008c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	4619      	mov	r1, r3
 80006de:	480d      	ldr	r0, [pc, #52]	@ (8000714 <MX_TIM3_Init+0x94>)
 80006e0:	f001 f9cd 	bl	8001a7e <HAL_TIM_ConfigClockSource>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80006ea:	f000 f8eb 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	4619      	mov	r1, r3
 80006fa:	4806      	ldr	r0, [pc, #24]	@ (8000714 <MX_TIM3_Init+0x94>)
 80006fc:	f001 fbac 	bl	8001e58 <HAL_TIMEx_MasterConfigSynchronization>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000706:	f000 f8dd 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000280 	.word	0x20000280
 8000718:	40000400 	.word	0x40000400

0800071c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000720:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_USART2_UART_Init+0x4c>)
 8000722:	4a12      	ldr	r2, [pc, #72]	@ (800076c <MX_USART2_UART_Init+0x50>)
 8000724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000726:	4b10      	ldr	r3, [pc, #64]	@ (8000768 <MX_USART2_UART_Init+0x4c>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_USART2_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_USART2_UART_Init+0x4c>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_USART2_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_USART2_UART_Init+0x4c>)
 8000754:	f001 fbee 	bl	8001f34 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800075e:	f000 f8b1 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200002c8 	.word	0x200002c8
 800076c:	40004400 	.word	0x40004400

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	@ 0x28
 8000774:	af00      	add	r7, sp, #0
static void MX_GPIO_Init(void)
 8000776:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800077a:	613b      	str	r3, [r7, #16]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	4b33      	ldr	r3, [pc, #204]	@ (8000860 <MX_GPIO_Init+0xf0>)
 8000792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000794:	4a32      	ldr	r2, [pc, #200]	@ (8000860 <MX_GPIO_Init+0xf0>)
 8000796:	f043 0304 	orr.w	r3, r3, #4
 800079a:	6313      	str	r3, [r2, #48]	@ 0x30
 800079c:	4b30      	ldr	r3, [pc, #192]	@ (8000860 <MX_GPIO_Init+0xf0>)
 800079e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a0:	f003 0304 	and.w	r3, r3, #4
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a8:	2300      	movs	r3, #0
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	4b2c      	ldr	r3, [pc, #176]	@ (8000860 <MX_GPIO_Init+0xf0>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b0:	4a2b      	ldr	r2, [pc, #172]	@ (8000860 <MX_GPIO_Init+0xf0>)
 80007b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b8:	4b29      	ldr	r3, [pc, #164]	@ (8000860 <MX_GPIO_Init+0xf0>)
 80007ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	4b25      	ldr	r3, [pc, #148]	@ (8000860 <MX_GPIO_Init+0xf0>)
 80007ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007cc:	4a24      	ldr	r2, [pc, #144]	@ (8000860 <MX_GPIO_Init+0xf0>)
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d4:	4b22      	ldr	r3, [pc, #136]	@ (8000860 <MX_GPIO_Init+0xf0>)
 80007d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e0:	2300      	movs	r3, #0
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000860 <MX_GPIO_Init+0xf0>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000860 <MX_GPIO_Init+0xf0>)
 80007ea:	f043 0302 	orr.w	r3, r3, #2
 80007ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000860 <MX_GPIO_Init+0xf0>)
 80007f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f4:	f003 0302 	and.w	r3, r3, #2
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2131      	movs	r1, #49	@ 0x31
 8000800:	4818      	ldr	r0, [pc, #96]	@ (8000864 <MX_GPIO_Init+0xf4>)
 8000802:	f000 fc3b 	bl	800107c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000806:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	4812      	ldr	r0, [pc, #72]	@ (8000868 <MX_GPIO_Init+0xf8>)
 800081e:	f000 faa9 	bl	8000d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|LD2_Pin;
 8000822:	2331      	movs	r3, #49	@ 0x31
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	480a      	ldr	r0, [pc, #40]	@ (8000864 <MX_GPIO_Init+0xf4>)
 800083a:	f000 fa9b 	bl	8000d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800083e:	2302      	movs	r3, #2
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	4804      	ldr	r0, [pc, #16]	@ (8000864 <MX_GPIO_Init+0xf4>)
 8000852:	f000 fa8f 	bl	8000d74 <HAL_GPIO_Init>

		/* USER CODE BEGIN 2 */
		/* USER CODE END 2 */
}
/* USER CODE END MX_GPIO_Init_2 */
}
 8000856:	bf00      	nop
 8000858:	3728      	adds	r7, #40	@ 0x28
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	40020000 	.word	0x40020000
 8000868:	40020800 	.word	0x40020800

0800086c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	2110      	movs	r1, #16
 8000878:	4804      	ldr	r0, [pc, #16]	@ (800088c <StartDefaultTask+0x20>)
 800087a:	f000 fbff 	bl	800107c <HAL_GPIO_WritePin>
  	osDelay(5000);
 800087e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000882:	f001 fe86 	bl	8002592 <osDelay>
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000886:	bf00      	nop
 8000888:	e7f4      	b.n	8000874 <StartDefaultTask+0x8>
 800088a:	bf00      	nop
 800088c:	40020000 	.word	0x40020000

08000890 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2110      	movs	r1, #16
 800089c:	4804      	ldr	r0, [pc, #16]	@ (80008b0 <StartTask02+0x20>)
 800089e:	f000 fbed 	bl	800107c <HAL_GPIO_WritePin>
    osDelay(10000);
 80008a2:	f242 7010 	movw	r0, #10000	@ 0x2710
 80008a6:	f001 fe74 	bl	8002592 <osDelay>
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80008aa:	bf00      	nop
 80008ac:	e7f4      	b.n	8000898 <StartTask02+0x8>
 80008ae:	bf00      	nop
 80008b0:	40020000 	.word	0x40020000

080008b4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008bc:	2001      	movs	r0, #1
 80008be:	f001 fe68 	bl	8002592 <osDelay>
 80008c2:	e7fb      	b.n	80008bc <StartTask03+0x8>

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <Error_Handler+0x8>

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <HAL_MspInit+0x54>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008de:	4a11      	ldr	r2, [pc, #68]	@ (8000924 <HAL_MspInit+0x54>)
 80008e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <HAL_MspInit+0x54>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000924 <HAL_MspInit+0x54>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000924 <HAL_MspInit+0x54>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000900:	6413      	str	r3, [r2, #64]	@ 0x40
 8000902:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <HAL_MspInit+0x54>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	210f      	movs	r1, #15
 8000912:	f06f 0001 	mvn.w	r0, #1
 8000916:	f000 fa04 	bl	8000d22 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a0b      	ldr	r2, [pc, #44]	@ (8000964 <HAL_TIM_Base_MspInit+0x3c>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d10d      	bne.n	8000956 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <HAL_TIM_Base_MspInit+0x40>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000942:	4a09      	ldr	r2, [pc, #36]	@ (8000968 <HAL_TIM_Base_MspInit+0x40>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6413      	str	r3, [r2, #64]	@ 0x40
 800094a:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <HAL_TIM_Base_MspInit+0x40>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000956:	bf00      	nop
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40000400 	.word	0x40000400
 8000968:	40023800 	.word	0x40023800

0800096c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	@ 0x28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a19      	ldr	r2, [pc, #100]	@ (80009f0 <HAL_UART_MspInit+0x84>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d12b      	bne.n	80009e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <HAL_UART_MspInit+0x88>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000996:	4a17      	ldr	r2, [pc, #92]	@ (80009f4 <HAL_UART_MspInit+0x88>)
 8000998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800099c:	6413      	str	r3, [r2, #64]	@ 0x40
 800099e:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <HAL_UART_MspInit+0x88>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <HAL_UART_MspInit+0x88>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a10      	ldr	r2, [pc, #64]	@ (80009f4 <HAL_UART_MspInit+0x88>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <HAL_UART_MspInit+0x88>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009c6:	230c      	movs	r3, #12
 80009c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009d6:	2307      	movs	r3, #7
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <HAL_UART_MspInit+0x8c>)
 80009e2:	f000 f9c7 	bl	8000d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	@ 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40004400 	.word	0x40004400
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020000 	.word	0x40020000

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <NMI_Handler+0x4>

08000a04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <MemManage_Handler+0x4>

08000a14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <BusFault_Handler+0x4>

08000a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <UsageFault_Handler+0x4>

08000a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a36:	f000 f897 	bl	8000b68 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a3a:	f002 fb39 	bl	80030b0 <xTaskGetSchedulerState>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d001      	beq.n	8000a48 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a44:	f002 fd78 	bl	8003538 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <SystemInit+0x20>)
 8000a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a56:	4a05      	ldr	r2, [pc, #20]	@ (8000a6c <SystemInit+0x20>)
 8000a58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aa8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a74:	f7ff ffea 	bl	8000a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a78:	480c      	ldr	r0, [pc, #48]	@ (8000aac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a7a:	490d      	ldr	r1, [pc, #52]	@ (8000ab0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a80:	e002      	b.n	8000a88 <LoopCopyDataInit>

08000a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a86:	3304      	adds	r3, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a8c:	d3f9      	bcc.n	8000a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a90:	4c0a      	ldr	r4, [pc, #40]	@ (8000abc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a94:	e001      	b.n	8000a9a <LoopFillZerobss>

08000a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a98:	3204      	adds	r2, #4

08000a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a9c:	d3fb      	bcc.n	8000a96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a9e:	f002 ff91 	bl	80039c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa2:	f7ff fd2f 	bl	8000504 <main>
  bx  lr    
 8000aa6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ab4:	08003ac0 	.word	0x08003ac0
  ldr r2, =_sbss
 8000ab8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000abc:	20004074 	.word	0x20004074

08000ac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC_IRQHandler>
	...

08000ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <HAL_Init+0x40>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b04 <HAL_Init+0x40>)
 8000ace:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <HAL_Init+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b04 <HAL_Init+0x40>)
 8000ada:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae0:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a07      	ldr	r2, [pc, #28]	@ (8000b04 <HAL_Init+0x40>)
 8000ae6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aec:	2003      	movs	r0, #3
 8000aee:	f000 f90d 	bl	8000d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af2:	200f      	movs	r0, #15
 8000af4:	f000 f808 	bl	8000b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af8:	f7ff feea 	bl	80008d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023c00 	.word	0x40023c00

08000b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b10:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <HAL_InitTick+0x54>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <HAL_InitTick+0x58>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f917 	bl	8000d5a <HAL_SYSTICK_Config>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e00e      	b.n	8000b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b0f      	cmp	r3, #15
 8000b3a:	d80a      	bhi.n	8000b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	f000 f8ed 	bl	8000d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b48:	4a06      	ldr	r2, [pc, #24]	@ (8000b64 <HAL_InitTick+0x5c>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e000      	b.n	8000b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20000004 	.word	0x20000004

08000b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <HAL_IncTick+0x20>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_IncTick+0x24>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4413      	add	r3, r2
 8000b78:	4a04      	ldr	r2, [pc, #16]	@ (8000b8c <HAL_IncTick+0x24>)
 8000b7a:	6013      	str	r3, [r2, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	2000031c 	.word	0x2000031c

08000b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b03      	ldr	r3, [pc, #12]	@ (8000ba4 <HAL_GetTick+0x14>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	2000031c 	.word	0x2000031c

08000ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bda:	4a04      	ldr	r2, [pc, #16]	@ (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	60d3      	str	r3, [r2, #12]
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf4:	4b04      	ldr	r3, [pc, #16]	@ (8000c08 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	f003 0307 	and.w	r3, r3, #7
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db0a      	blt.n	8000c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	490c      	ldr	r1, [pc, #48]	@ (8000c58 <__NVIC_SetPriority+0x4c>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c34:	e00a      	b.n	8000c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4908      	ldr	r1, [pc, #32]	@ (8000c5c <__NVIC_SetPriority+0x50>)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	3b04      	subs	r3, #4
 8000c44:	0112      	lsls	r2, r2, #4
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	440b      	add	r3, r1
 8000c4a:	761a      	strb	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	@ 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f1c3 0307 	rsb	r3, r3, #7
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf28      	it	cs
 8000c7e:	2304      	movcs	r3, #4
 8000c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3304      	adds	r3, #4
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d902      	bls.n	8000c90 <NVIC_EncodePriority+0x30>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	e000      	b.n	8000c92 <NVIC_EncodePriority+0x32>
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43d9      	mvns	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	4313      	orrs	r3, r2
         );
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	@ 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cd8:	d301      	bcc.n	8000cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00f      	b.n	8000cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <SysTick_Config+0x40>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f7ff ff8e 	bl	8000c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf0:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <SysTick_Config+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf6:	4b04      	ldr	r3, [pc, #16]	@ (8000d08 <SysTick_Config+0x40>)
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e000e010 	.word	0xe000e010

08000d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ff47 	bl	8000ba8 <__NVIC_SetPriorityGrouping>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d34:	f7ff ff5c 	bl	8000bf0 <__NVIC_GetPriorityGrouping>
 8000d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	68b9      	ldr	r1, [r7, #8]
 8000d3e:	6978      	ldr	r0, [r7, #20]
 8000d40:	f7ff ff8e 	bl	8000c60 <NVIC_EncodePriority>
 8000d44:	4602      	mov	r2, r0
 8000d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff5d 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff ffb0 	bl	8000cc8 <SysTick_Config>
 8000d68:	4603      	mov	r3, r0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	@ 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
 8000d8e:	e159      	b.n	8001044 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d90:	2201      	movs	r2, #1
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	f040 8148 	bne.w	800103e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d005      	beq.n	8000dc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d130      	bne.n	8000e28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	091b      	lsrs	r3, r3, #4
 8000e12:	f003 0201 	and.w	r2, r3, #1
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 0303 	and.w	r3, r3, #3
 8000e30:	2b03      	cmp	r3, #3
 8000e32:	d017      	beq.n	8000e64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	2203      	movs	r2, #3
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d123      	bne.n	8000eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	08da      	lsrs	r2, r3, #3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3208      	adds	r2, #8
 8000e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	f003 0307 	and.w	r3, r3, #7
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	220f      	movs	r2, #15
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	691a      	ldr	r2, [r3, #16]
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	08da      	lsrs	r2, r3, #3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3208      	adds	r2, #8
 8000eb2:	69b9      	ldr	r1, [r7, #24]
 8000eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0203 	and.w	r2, r3, #3
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f000 80a2 	beq.w	800103e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b57      	ldr	r3, [pc, #348]	@ (800105c <HAL_GPIO_Init+0x2e8>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f02:	4a56      	ldr	r2, [pc, #344]	@ (800105c <HAL_GPIO_Init+0x2e8>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f0a:	4b54      	ldr	r3, [pc, #336]	@ (800105c <HAL_GPIO_Init+0x2e8>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f16:	4a52      	ldr	r2, [pc, #328]	@ (8001060 <HAL_GPIO_Init+0x2ec>)
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a49      	ldr	r2, [pc, #292]	@ (8001064 <HAL_GPIO_Init+0x2f0>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d019      	beq.n	8000f76 <HAL_GPIO_Init+0x202>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a48      	ldr	r2, [pc, #288]	@ (8001068 <HAL_GPIO_Init+0x2f4>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d013      	beq.n	8000f72 <HAL_GPIO_Init+0x1fe>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a47      	ldr	r2, [pc, #284]	@ (800106c <HAL_GPIO_Init+0x2f8>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d00d      	beq.n	8000f6e <HAL_GPIO_Init+0x1fa>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a46      	ldr	r2, [pc, #280]	@ (8001070 <HAL_GPIO_Init+0x2fc>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d007      	beq.n	8000f6a <HAL_GPIO_Init+0x1f6>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a45      	ldr	r2, [pc, #276]	@ (8001074 <HAL_GPIO_Init+0x300>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d101      	bne.n	8000f66 <HAL_GPIO_Init+0x1f2>
 8000f62:	2304      	movs	r3, #4
 8000f64:	e008      	b.n	8000f78 <HAL_GPIO_Init+0x204>
 8000f66:	2307      	movs	r3, #7
 8000f68:	e006      	b.n	8000f78 <HAL_GPIO_Init+0x204>
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e004      	b.n	8000f78 <HAL_GPIO_Init+0x204>
 8000f6e:	2302      	movs	r3, #2
 8000f70:	e002      	b.n	8000f78 <HAL_GPIO_Init+0x204>
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <HAL_GPIO_Init+0x204>
 8000f76:	2300      	movs	r3, #0
 8000f78:	69fa      	ldr	r2, [r7, #28]
 8000f7a:	f002 0203 	and.w	r2, r2, #3
 8000f7e:	0092      	lsls	r2, r2, #2
 8000f80:	4093      	lsls	r3, r2
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f88:	4935      	ldr	r1, [pc, #212]	@ (8001060 <HAL_GPIO_Init+0x2ec>)
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	089b      	lsrs	r3, r3, #2
 8000f8e:	3302      	adds	r3, #2
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f96:	4b38      	ldr	r3, [pc, #224]	@ (8001078 <HAL_GPIO_Init+0x304>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fba:	4a2f      	ldr	r2, [pc, #188]	@ (8001078 <HAL_GPIO_Init+0x304>)
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001078 <HAL_GPIO_Init+0x304>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fe4:	4a24      	ldr	r2, [pc, #144]	@ (8001078 <HAL_GPIO_Init+0x304>)
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fea:	4b23      	ldr	r3, [pc, #140]	@ (8001078 <HAL_GPIO_Init+0x304>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800100e:	4a1a      	ldr	r2, [pc, #104]	@ (8001078 <HAL_GPIO_Init+0x304>)
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001014:	4b18      	ldr	r3, [pc, #96]	@ (8001078 <HAL_GPIO_Init+0x304>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001038:	4a0f      	ldr	r2, [pc, #60]	@ (8001078 <HAL_GPIO_Init+0x304>)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3301      	adds	r3, #1
 8001042:	61fb      	str	r3, [r7, #28]
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	2b0f      	cmp	r3, #15
 8001048:	f67f aea2 	bls.w	8000d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3724      	adds	r7, #36	@ 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40023800 	.word	0x40023800
 8001060:	40013800 	.word	0x40013800
 8001064:	40020000 	.word	0x40020000
 8001068:	40020400 	.word	0x40020400
 800106c:	40020800 	.word	0x40020800
 8001070:	40020c00 	.word	0x40020c00
 8001074:	40021000 	.word	0x40021000
 8001078:	40013c00 	.word	0x40013c00

0800107c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	807b      	strh	r3, [r7, #2]
 8001088:	4613      	mov	r3, r2
 800108a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800108c:	787b      	ldrb	r3, [r7, #1]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001092:	887a      	ldrh	r2, [r7, #2]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001098:	e003      	b.n	80010a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800109a:	887b      	ldrh	r3, [r7, #2]
 800109c:	041a      	lsls	r2, r3, #16
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	619a      	str	r2, [r3, #24]
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e267      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d075      	beq.n	80011ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010ce:	4b88      	ldr	r3, [pc, #544]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 030c 	and.w	r3, r3, #12
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d00c      	beq.n	80010f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010da:	4b85      	ldr	r3, [pc, #532]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010e2:	2b08      	cmp	r3, #8
 80010e4:	d112      	bne.n	800110c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010e6:	4b82      	ldr	r3, [pc, #520]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010f2:	d10b      	bne.n	800110c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f4:	4b7e      	ldr	r3, [pc, #504]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d05b      	beq.n	80011b8 <HAL_RCC_OscConfig+0x108>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d157      	bne.n	80011b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e242      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001114:	d106      	bne.n	8001124 <HAL_RCC_OscConfig+0x74>
 8001116:	4b76      	ldr	r3, [pc, #472]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a75      	ldr	r2, [pc, #468]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 800111c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	e01d      	b.n	8001160 <HAL_RCC_OscConfig+0xb0>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800112c:	d10c      	bne.n	8001148 <HAL_RCC_OscConfig+0x98>
 800112e:	4b70      	ldr	r3, [pc, #448]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a6f      	ldr	r2, [pc, #444]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001134:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	4b6d      	ldr	r3, [pc, #436]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a6c      	ldr	r2, [pc, #432]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	e00b      	b.n	8001160 <HAL_RCC_OscConfig+0xb0>
 8001148:	4b69      	ldr	r3, [pc, #420]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a68      	ldr	r2, [pc, #416]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 800114e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b66      	ldr	r3, [pc, #408]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a65      	ldr	r2, [pc, #404]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 800115a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800115e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d013      	beq.n	8001190 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001168:	f7ff fd12 	bl	8000b90 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001170:	f7ff fd0e 	bl	8000b90 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b64      	cmp	r3, #100	@ 0x64
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e207      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001182:	4b5b      	ldr	r3, [pc, #364]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0f0      	beq.n	8001170 <HAL_RCC_OscConfig+0xc0>
 800118e:	e014      	b.n	80011ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001190:	f7ff fcfe 	bl	8000b90 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001198:	f7ff fcfa 	bl	8000b90 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b64      	cmp	r3, #100	@ 0x64
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e1f3      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011aa:	4b51      	ldr	r3, [pc, #324]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f0      	bne.n	8001198 <HAL_RCC_OscConfig+0xe8>
 80011b6:	e000      	b.n	80011ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d063      	beq.n	800128e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011c6:	4b4a      	ldr	r3, [pc, #296]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 030c 	and.w	r3, r3, #12
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00b      	beq.n	80011ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011d2:	4b47      	ldr	r3, [pc, #284]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011da:	2b08      	cmp	r3, #8
 80011dc:	d11c      	bne.n	8001218 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011de:	4b44      	ldr	r3, [pc, #272]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d116      	bne.n	8001218 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ea:	4b41      	ldr	r3, [pc, #260]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d005      	beq.n	8001202 <HAL_RCC_OscConfig+0x152>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d001      	beq.n	8001202 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e1c7      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001202:	4b3b      	ldr	r3, [pc, #236]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	4937      	ldr	r1, [pc, #220]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001212:	4313      	orrs	r3, r2
 8001214:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001216:	e03a      	b.n	800128e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d020      	beq.n	8001262 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001220:	4b34      	ldr	r3, [pc, #208]	@ (80012f4 <HAL_RCC_OscConfig+0x244>)
 8001222:	2201      	movs	r2, #1
 8001224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001226:	f7ff fcb3 	bl	8000b90 <HAL_GetTick>
 800122a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800122e:	f7ff fcaf 	bl	8000b90 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e1a8      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001240:	4b2b      	ldr	r3, [pc, #172]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0f0      	beq.n	800122e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124c:	4b28      	ldr	r3, [pc, #160]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	4925      	ldr	r1, [pc, #148]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 800125c:	4313      	orrs	r3, r2
 800125e:	600b      	str	r3, [r1, #0]
 8001260:	e015      	b.n	800128e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001262:	4b24      	ldr	r3, [pc, #144]	@ (80012f4 <HAL_RCC_OscConfig+0x244>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001268:	f7ff fc92 	bl	8000b90 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001270:	f7ff fc8e 	bl	8000b90 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e187      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001282:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	2b00      	cmp	r3, #0
 8001298:	d036      	beq.n	8001308 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d016      	beq.n	80012d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012a2:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <HAL_RCC_OscConfig+0x248>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a8:	f7ff fc72 	bl	8000b90 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b0:	f7ff fc6e 	bl	8000b90 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e167      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c2:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80012c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0x200>
 80012ce:	e01b      	b.n	8001308 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012d0:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <HAL_RCC_OscConfig+0x248>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d6:	f7ff fc5b 	bl	8000b90 <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012dc:	e00e      	b.n	80012fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012de:	f7ff fc57 	bl	8000b90 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d907      	bls.n	80012fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e150      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
 80012f0:	40023800 	.word	0x40023800
 80012f4:	42470000 	.word	0x42470000
 80012f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012fc:	4b88      	ldr	r3, [pc, #544]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80012fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1ea      	bne.n	80012de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 8097 	beq.w	8001444 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800131a:	4b81      	ldr	r3, [pc, #516]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10f      	bne.n	8001346 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	4b7d      	ldr	r3, [pc, #500]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	4a7c      	ldr	r2, [pc, #496]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001334:	6413      	str	r3, [r2, #64]	@ 0x40
 8001336:	4b7a      	ldr	r3, [pc, #488]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001342:	2301      	movs	r3, #1
 8001344:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001346:	4b77      	ldr	r3, [pc, #476]	@ (8001524 <HAL_RCC_OscConfig+0x474>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800134e:	2b00      	cmp	r3, #0
 8001350:	d118      	bne.n	8001384 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001352:	4b74      	ldr	r3, [pc, #464]	@ (8001524 <HAL_RCC_OscConfig+0x474>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a73      	ldr	r2, [pc, #460]	@ (8001524 <HAL_RCC_OscConfig+0x474>)
 8001358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800135c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800135e:	f7ff fc17 	bl	8000b90 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001366:	f7ff fc13 	bl	8000b90 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e10c      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001378:	4b6a      	ldr	r3, [pc, #424]	@ (8001524 <HAL_RCC_OscConfig+0x474>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0f0      	beq.n	8001366 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d106      	bne.n	800139a <HAL_RCC_OscConfig+0x2ea>
 800138c:	4b64      	ldr	r3, [pc, #400]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 800138e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001390:	4a63      	ldr	r2, [pc, #396]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6713      	str	r3, [r2, #112]	@ 0x70
 8001398:	e01c      	b.n	80013d4 <HAL_RCC_OscConfig+0x324>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	2b05      	cmp	r3, #5
 80013a0:	d10c      	bne.n	80013bc <HAL_RCC_OscConfig+0x30c>
 80013a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a6:	4a5e      	ldr	r2, [pc, #376]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ba:	e00b      	b.n	80013d4 <HAL_RCC_OscConfig+0x324>
 80013bc:	4b58      	ldr	r3, [pc, #352]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013c0:	4a57      	ldr	r2, [pc, #348]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013c2:	f023 0301 	bic.w	r3, r3, #1
 80013c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80013c8:	4b55      	ldr	r3, [pc, #340]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013cc:	4a54      	ldr	r2, [pc, #336]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013ce:	f023 0304 	bic.w	r3, r3, #4
 80013d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d015      	beq.n	8001408 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013dc:	f7ff fbd8 	bl	8000b90 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e2:	e00a      	b.n	80013fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e4:	f7ff fbd4 	bl	8000b90 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e0cb      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013fa:	4b49      	ldr	r3, [pc, #292]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0ee      	beq.n	80013e4 <HAL_RCC_OscConfig+0x334>
 8001406:	e014      	b.n	8001432 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001408:	f7ff fbc2 	bl	8000b90 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800140e:	e00a      	b.n	8001426 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001410:	f7ff fbbe 	bl	8000b90 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800141e:	4293      	cmp	r3, r2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e0b5      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001426:	4b3e      	ldr	r3, [pc, #248]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 8001428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1ee      	bne.n	8001410 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001432:	7dfb      	ldrb	r3, [r7, #23]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d105      	bne.n	8001444 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001438:	4b39      	ldr	r3, [pc, #228]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143c:	4a38      	ldr	r2, [pc, #224]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 800143e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001442:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 80a1 	beq.w	8001590 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800144e:	4b34      	ldr	r3, [pc, #208]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b08      	cmp	r3, #8
 8001458:	d05c      	beq.n	8001514 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d141      	bne.n	80014e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001462:	4b31      	ldr	r3, [pc, #196]	@ (8001528 <HAL_RCC_OscConfig+0x478>)
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fb92 	bl	8000b90 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001470:	f7ff fb8e 	bl	8000b90 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e087      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001482:	4b27      	ldr	r3, [pc, #156]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69da      	ldr	r2, [r3, #28]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800149c:	019b      	lsls	r3, r3, #6
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014a4:	085b      	lsrs	r3, r3, #1
 80014a6:	3b01      	subs	r3, #1
 80014a8:	041b      	lsls	r3, r3, #16
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b0:	061b      	lsls	r3, r3, #24
 80014b2:	491b      	ldr	r1, [pc, #108]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <HAL_RCC_OscConfig+0x478>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014be:	f7ff fb67 	bl	8000b90 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c6:	f7ff fb63 	bl	8000b90 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e05c      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d8:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f0      	beq.n	80014c6 <HAL_RCC_OscConfig+0x416>
 80014e4:	e054      	b.n	8001590 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <HAL_RCC_OscConfig+0x478>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fb50 	bl	8000b90 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f4:	f7ff fb4c 	bl	8000b90 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e045      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x444>
 8001512:	e03d      	b.n	8001590 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d107      	bne.n	800152c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e038      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
 8001520:	40023800 	.word	0x40023800
 8001524:	40007000 	.word	0x40007000
 8001528:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800152c:	4b1b      	ldr	r3, [pc, #108]	@ (800159c <HAL_RCC_OscConfig+0x4ec>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d028      	beq.n	800158c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001544:	429a      	cmp	r2, r3
 8001546:	d121      	bne.n	800158c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001552:	429a      	cmp	r2, r3
 8001554:	d11a      	bne.n	800158c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800155c:	4013      	ands	r3, r2
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001562:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001564:	4293      	cmp	r3, r2
 8001566:	d111      	bne.n	800158c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001572:	085b      	lsrs	r3, r3, #1
 8001574:	3b01      	subs	r3, #1
 8001576:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001578:	429a      	cmp	r2, r3
 800157a:	d107      	bne.n	800158c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001586:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800

080015a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0cc      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015b4:	4b68      	ldr	r3, [pc, #416]	@ (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d90c      	bls.n	80015dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c2:	4b65      	ldr	r3, [pc, #404]	@ (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ca:	4b63      	ldr	r3, [pc, #396]	@ (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d001      	beq.n	80015dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0b8      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d020      	beq.n	800162a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f4:	4b59      	ldr	r3, [pc, #356]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4a58      	ldr	r2, [pc, #352]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800160c:	4b53      	ldr	r3, [pc, #332]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	4a52      	ldr	r2, [pc, #328]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001618:	4b50      	ldr	r3, [pc, #320]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	494d      	ldr	r1, [pc, #308]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	4313      	orrs	r3, r2
 8001628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d044      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d107      	bne.n	800164e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163e:	4b47      	ldr	r3, [pc, #284]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d119      	bne.n	800167e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e07f      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d003      	beq.n	800165e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800165a:	2b03      	cmp	r3, #3
 800165c:	d107      	bne.n	800166e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165e:	4b3f      	ldr	r3, [pc, #252]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d109      	bne.n	800167e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e06f      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166e:	4b3b      	ldr	r3, [pc, #236]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e067      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800167e:	4b37      	ldr	r3, [pc, #220]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f023 0203 	bic.w	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4934      	ldr	r1, [pc, #208]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	4313      	orrs	r3, r2
 800168e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001690:	f7ff fa7e 	bl	8000b90 <HAL_GetTick>
 8001694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001696:	e00a      	b.n	80016ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001698:	f7ff fa7a 	bl	8000b90 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e04f      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ae:	4b2b      	ldr	r3, [pc, #172]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 020c 	and.w	r2, r3, #12
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	429a      	cmp	r2, r3
 80016be:	d1eb      	bne.n	8001698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016c0:	4b25      	ldr	r3, [pc, #148]	@ (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d20c      	bcs.n	80016e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ce:	4b22      	ldr	r3, [pc, #136]	@ (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d6:	4b20      	ldr	r3, [pc, #128]	@ (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d001      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e032      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d008      	beq.n	8001706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f4:	4b19      	ldr	r3, [pc, #100]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	4916      	ldr	r1, [pc, #88]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	4313      	orrs	r3, r2
 8001704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	2b00      	cmp	r3, #0
 8001710:	d009      	beq.n	8001726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001712:	4b12      	ldr	r3, [pc, #72]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	490e      	ldr	r1, [pc, #56]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	4313      	orrs	r3, r2
 8001724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001726:	f000 f821 	bl	800176c <HAL_RCC_GetSysClockFreq>
 800172a:	4602      	mov	r2, r0
 800172c:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	091b      	lsrs	r3, r3, #4
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	490a      	ldr	r1, [pc, #40]	@ (8001760 <HAL_RCC_ClockConfig+0x1c0>)
 8001738:	5ccb      	ldrb	r3, [r1, r3]
 800173a:	fa22 f303 	lsr.w	r3, r2, r3
 800173e:	4a09      	ldr	r2, [pc, #36]	@ (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001742:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <HAL_RCC_ClockConfig+0x1c8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff f9de 	bl	8000b08 <HAL_InitTick>

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023c00 	.word	0x40023c00
 800175c:	40023800 	.word	0x40023800
 8001760:	08003a98 	.word	0x08003a98
 8001764:	20000000 	.word	0x20000000
 8001768:	20000004 	.word	0x20000004

0800176c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800176c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001770:	b094      	sub	sp, #80	@ 0x50
 8001772:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001784:	4b79      	ldr	r3, [pc, #484]	@ (800196c <HAL_RCC_GetSysClockFreq+0x200>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	2b08      	cmp	r3, #8
 800178e:	d00d      	beq.n	80017ac <HAL_RCC_GetSysClockFreq+0x40>
 8001790:	2b08      	cmp	r3, #8
 8001792:	f200 80e1 	bhi.w	8001958 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001796:	2b00      	cmp	r3, #0
 8001798:	d002      	beq.n	80017a0 <HAL_RCC_GetSysClockFreq+0x34>
 800179a:	2b04      	cmp	r3, #4
 800179c:	d003      	beq.n	80017a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800179e:	e0db      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017a0:	4b73      	ldr	r3, [pc, #460]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x204>)
 80017a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017a4:	e0db      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017a6:	4b73      	ldr	r3, [pc, #460]	@ (8001974 <HAL_RCC_GetSysClockFreq+0x208>)
 80017a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017aa:	e0d8      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017ac:	4b6f      	ldr	r3, [pc, #444]	@ (800196c <HAL_RCC_GetSysClockFreq+0x200>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017b6:	4b6d      	ldr	r3, [pc, #436]	@ (800196c <HAL_RCC_GetSysClockFreq+0x200>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d063      	beq.n	800188a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017c2:	4b6a      	ldr	r3, [pc, #424]	@ (800196c <HAL_RCC_GetSysClockFreq+0x200>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	099b      	lsrs	r3, r3, #6
 80017c8:	2200      	movs	r2, #0
 80017ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80017ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80017d6:	2300      	movs	r3, #0
 80017d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80017da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80017de:	4622      	mov	r2, r4
 80017e0:	462b      	mov	r3, r5
 80017e2:	f04f 0000 	mov.w	r0, #0
 80017e6:	f04f 0100 	mov.w	r1, #0
 80017ea:	0159      	lsls	r1, r3, #5
 80017ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017f0:	0150      	lsls	r0, r2, #5
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4621      	mov	r1, r4
 80017f8:	1a51      	subs	r1, r2, r1
 80017fa:	6139      	str	r1, [r7, #16]
 80017fc:	4629      	mov	r1, r5
 80017fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001810:	4659      	mov	r1, fp
 8001812:	018b      	lsls	r3, r1, #6
 8001814:	4651      	mov	r1, sl
 8001816:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800181a:	4651      	mov	r1, sl
 800181c:	018a      	lsls	r2, r1, #6
 800181e:	4651      	mov	r1, sl
 8001820:	ebb2 0801 	subs.w	r8, r2, r1
 8001824:	4659      	mov	r1, fp
 8001826:	eb63 0901 	sbc.w	r9, r3, r1
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001836:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800183a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800183e:	4690      	mov	r8, r2
 8001840:	4699      	mov	r9, r3
 8001842:	4623      	mov	r3, r4
 8001844:	eb18 0303 	adds.w	r3, r8, r3
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	462b      	mov	r3, r5
 800184c:	eb49 0303 	adc.w	r3, r9, r3
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800185e:	4629      	mov	r1, r5
 8001860:	024b      	lsls	r3, r1, #9
 8001862:	4621      	mov	r1, r4
 8001864:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001868:	4621      	mov	r1, r4
 800186a:	024a      	lsls	r2, r1, #9
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001872:	2200      	movs	r2, #0
 8001874:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001876:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001878:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800187c:	f7fe fcb0 	bl	80001e0 <__aeabi_uldivmod>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4613      	mov	r3, r2
 8001886:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001888:	e058      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800188a:	4b38      	ldr	r3, [pc, #224]	@ (800196c <HAL_RCC_GetSysClockFreq+0x200>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	099b      	lsrs	r3, r3, #6
 8001890:	2200      	movs	r2, #0
 8001892:	4618      	mov	r0, r3
 8001894:	4611      	mov	r1, r2
 8001896:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800189a:	623b      	str	r3, [r7, #32]
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
 80018a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018a4:	4642      	mov	r2, r8
 80018a6:	464b      	mov	r3, r9
 80018a8:	f04f 0000 	mov.w	r0, #0
 80018ac:	f04f 0100 	mov.w	r1, #0
 80018b0:	0159      	lsls	r1, r3, #5
 80018b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018b6:	0150      	lsls	r0, r2, #5
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4641      	mov	r1, r8
 80018be:	ebb2 0a01 	subs.w	sl, r2, r1
 80018c2:	4649      	mov	r1, r9
 80018c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018dc:	ebb2 040a 	subs.w	r4, r2, sl
 80018e0:	eb63 050b 	sbc.w	r5, r3, fp
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	00eb      	lsls	r3, r5, #3
 80018ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018f2:	00e2      	lsls	r2, r4, #3
 80018f4:	4614      	mov	r4, r2
 80018f6:	461d      	mov	r5, r3
 80018f8:	4643      	mov	r3, r8
 80018fa:	18e3      	adds	r3, r4, r3
 80018fc:	603b      	str	r3, [r7, #0]
 80018fe:	464b      	mov	r3, r9
 8001900:	eb45 0303 	adc.w	r3, r5, r3
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	f04f 0300 	mov.w	r3, #0
 800190e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001912:	4629      	mov	r1, r5
 8001914:	028b      	lsls	r3, r1, #10
 8001916:	4621      	mov	r1, r4
 8001918:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800191c:	4621      	mov	r1, r4
 800191e:	028a      	lsls	r2, r1, #10
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001926:	2200      	movs	r2, #0
 8001928:	61bb      	str	r3, [r7, #24]
 800192a:	61fa      	str	r2, [r7, #28]
 800192c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001930:	f7fe fc56 	bl	80001e0 <__aeabi_uldivmod>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4613      	mov	r3, r2
 800193a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800193c:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <HAL_RCC_GetSysClockFreq+0x200>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	0c1b      	lsrs	r3, r3, #16
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	3301      	adds	r3, #1
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800194c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800194e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001950:	fbb2 f3f3 	udiv	r3, r2, r3
 8001954:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001956:	e002      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x204>)
 800195a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800195c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800195e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001960:	4618      	mov	r0, r3
 8001962:	3750      	adds	r7, #80	@ 0x50
 8001964:	46bd      	mov	sp, r7
 8001966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	00f42400 	.word	0x00f42400
 8001974:	007a1200 	.word	0x007a1200

08001978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800197c:	4b03      	ldr	r3, [pc, #12]	@ (800198c <HAL_RCC_GetHCLKFreq+0x14>)
 800197e:	681b      	ldr	r3, [r3, #0]
}
 8001980:	4618      	mov	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000000 	.word	0x20000000

08001990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001994:	f7ff fff0 	bl	8001978 <HAL_RCC_GetHCLKFreq>
 8001998:	4602      	mov	r2, r0
 800199a:	4b05      	ldr	r3, [pc, #20]	@ (80019b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	0a9b      	lsrs	r3, r3, #10
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	4903      	ldr	r1, [pc, #12]	@ (80019b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019a6:	5ccb      	ldrb	r3, [r1, r3]
 80019a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40023800 	.word	0x40023800
 80019b4:	08003aa8 	.word	0x08003aa8

080019b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019bc:	f7ff ffdc 	bl	8001978 <HAL_RCC_GetHCLKFreq>
 80019c0:	4602      	mov	r2, r0
 80019c2:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	0b5b      	lsrs	r3, r3, #13
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	4903      	ldr	r1, [pc, #12]	@ (80019dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ce:	5ccb      	ldrb	r3, [r1, r3]
 80019d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40023800 	.word	0x40023800
 80019dc:	08003aa8 	.word	0x08003aa8

080019e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e041      	b.n	8001a76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d106      	bne.n	8001a0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7fe ff8e 	bl	8000928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4610      	mov	r0, r2
 8001a20:	f000 f8f4 	bl	8001c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b084      	sub	sp, #16
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d101      	bne.n	8001a9a <HAL_TIM_ConfigClockSource+0x1c>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e0b4      	b.n	8001c04 <HAL_TIM_ConfigClockSource+0x186>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001ab8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001ac0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ad2:	d03e      	beq.n	8001b52 <HAL_TIM_ConfigClockSource+0xd4>
 8001ad4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ad8:	f200 8087 	bhi.w	8001bea <HAL_TIM_ConfigClockSource+0x16c>
 8001adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ae0:	f000 8086 	beq.w	8001bf0 <HAL_TIM_ConfigClockSource+0x172>
 8001ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ae8:	d87f      	bhi.n	8001bea <HAL_TIM_ConfigClockSource+0x16c>
 8001aea:	2b70      	cmp	r3, #112	@ 0x70
 8001aec:	d01a      	beq.n	8001b24 <HAL_TIM_ConfigClockSource+0xa6>
 8001aee:	2b70      	cmp	r3, #112	@ 0x70
 8001af0:	d87b      	bhi.n	8001bea <HAL_TIM_ConfigClockSource+0x16c>
 8001af2:	2b60      	cmp	r3, #96	@ 0x60
 8001af4:	d050      	beq.n	8001b98 <HAL_TIM_ConfigClockSource+0x11a>
 8001af6:	2b60      	cmp	r3, #96	@ 0x60
 8001af8:	d877      	bhi.n	8001bea <HAL_TIM_ConfigClockSource+0x16c>
 8001afa:	2b50      	cmp	r3, #80	@ 0x50
 8001afc:	d03c      	beq.n	8001b78 <HAL_TIM_ConfigClockSource+0xfa>
 8001afe:	2b50      	cmp	r3, #80	@ 0x50
 8001b00:	d873      	bhi.n	8001bea <HAL_TIM_ConfigClockSource+0x16c>
 8001b02:	2b40      	cmp	r3, #64	@ 0x40
 8001b04:	d058      	beq.n	8001bb8 <HAL_TIM_ConfigClockSource+0x13a>
 8001b06:	2b40      	cmp	r3, #64	@ 0x40
 8001b08:	d86f      	bhi.n	8001bea <HAL_TIM_ConfigClockSource+0x16c>
 8001b0a:	2b30      	cmp	r3, #48	@ 0x30
 8001b0c:	d064      	beq.n	8001bd8 <HAL_TIM_ConfigClockSource+0x15a>
 8001b0e:	2b30      	cmp	r3, #48	@ 0x30
 8001b10:	d86b      	bhi.n	8001bea <HAL_TIM_ConfigClockSource+0x16c>
 8001b12:	2b20      	cmp	r3, #32
 8001b14:	d060      	beq.n	8001bd8 <HAL_TIM_ConfigClockSource+0x15a>
 8001b16:	2b20      	cmp	r3, #32
 8001b18:	d867      	bhi.n	8001bea <HAL_TIM_ConfigClockSource+0x16c>
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d05c      	beq.n	8001bd8 <HAL_TIM_ConfigClockSource+0x15a>
 8001b1e:	2b10      	cmp	r3, #16
 8001b20:	d05a      	beq.n	8001bd8 <HAL_TIM_ConfigClockSource+0x15a>
 8001b22:	e062      	b.n	8001bea <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001b34:	f000 f970 	bl	8001e18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001b46:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	609a      	str	r2, [r3, #8]
      break;
 8001b50:	e04f      	b.n	8001bf2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001b62:	f000 f959 	bl	8001e18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b74:	609a      	str	r2, [r3, #8]
      break;
 8001b76:	e03c      	b.n	8001bf2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b84:	461a      	mov	r2, r3
 8001b86:	f000 f8cd 	bl	8001d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2150      	movs	r1, #80	@ 0x50
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 f926 	bl	8001de2 <TIM_ITRx_SetConfig>
      break;
 8001b96:	e02c      	b.n	8001bf2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	f000 f8ec 	bl	8001d82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2160      	movs	r1, #96	@ 0x60
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 f916 	bl	8001de2 <TIM_ITRx_SetConfig>
      break;
 8001bb6:	e01c      	b.n	8001bf2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	f000 f8ad 	bl	8001d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2140      	movs	r1, #64	@ 0x40
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 f906 	bl	8001de2 <TIM_ITRx_SetConfig>
      break;
 8001bd6:	e00c      	b.n	8001bf2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	4610      	mov	r0, r2
 8001be4:	f000 f8fd 	bl	8001de2 <TIM_ITRx_SetConfig>
      break;
 8001be8:	e003      	b.n	8001bf2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	73fb      	strb	r3, [r7, #15]
      break;
 8001bee:	e000      	b.n	8001bf2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001bf0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a3a      	ldr	r2, [pc, #232]	@ (8001d08 <TIM_Base_SetConfig+0xfc>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d00f      	beq.n	8001c44 <TIM_Base_SetConfig+0x38>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c2a:	d00b      	beq.n	8001c44 <TIM_Base_SetConfig+0x38>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a37      	ldr	r2, [pc, #220]	@ (8001d0c <TIM_Base_SetConfig+0x100>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d007      	beq.n	8001c44 <TIM_Base_SetConfig+0x38>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a36      	ldr	r2, [pc, #216]	@ (8001d10 <TIM_Base_SetConfig+0x104>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d003      	beq.n	8001c44 <TIM_Base_SetConfig+0x38>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a35      	ldr	r2, [pc, #212]	@ (8001d14 <TIM_Base_SetConfig+0x108>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d108      	bne.n	8001c56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a2b      	ldr	r2, [pc, #172]	@ (8001d08 <TIM_Base_SetConfig+0xfc>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d01b      	beq.n	8001c96 <TIM_Base_SetConfig+0x8a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c64:	d017      	beq.n	8001c96 <TIM_Base_SetConfig+0x8a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a28      	ldr	r2, [pc, #160]	@ (8001d0c <TIM_Base_SetConfig+0x100>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d013      	beq.n	8001c96 <TIM_Base_SetConfig+0x8a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a27      	ldr	r2, [pc, #156]	@ (8001d10 <TIM_Base_SetConfig+0x104>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d00f      	beq.n	8001c96 <TIM_Base_SetConfig+0x8a>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a26      	ldr	r2, [pc, #152]	@ (8001d14 <TIM_Base_SetConfig+0x108>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00b      	beq.n	8001c96 <TIM_Base_SetConfig+0x8a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a25      	ldr	r2, [pc, #148]	@ (8001d18 <TIM_Base_SetConfig+0x10c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d007      	beq.n	8001c96 <TIM_Base_SetConfig+0x8a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a24      	ldr	r2, [pc, #144]	@ (8001d1c <TIM_Base_SetConfig+0x110>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d003      	beq.n	8001c96 <TIM_Base_SetConfig+0x8a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a23      	ldr	r2, [pc, #140]	@ (8001d20 <TIM_Base_SetConfig+0x114>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d108      	bne.n	8001ca8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a0e      	ldr	r2, [pc, #56]	@ (8001d08 <TIM_Base_SetConfig+0xfc>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d103      	bne.n	8001cdc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	691a      	ldr	r2, [r3, #16]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d105      	bne.n	8001cfa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	f023 0201 	bic.w	r2, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	611a      	str	r2, [r3, #16]
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40010000 	.word	0x40010000
 8001d0c:	40000400 	.word	0x40000400
 8001d10:	40000800 	.word	0x40000800
 8001d14:	40000c00 	.word	0x40000c00
 8001d18:	40014000 	.word	0x40014000
 8001d1c:	40014400 	.word	0x40014400
 8001d20:	40014800 	.word	0x40014800

08001d24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b087      	sub	sp, #28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	f023 0201 	bic.w	r2, r3, #1
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f023 030a 	bic.w	r3, r3, #10
 8001d60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	621a      	str	r2, [r3, #32]
}
 8001d76:	bf00      	nop
 8001d78:	371c      	adds	r7, #28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b087      	sub	sp, #28
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	f023 0210 	bic.w	r2, r3, #16
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001dac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	031b      	lsls	r3, r3, #12
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001dbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	621a      	str	r2, [r3, #32]
}
 8001dd6:	bf00      	nop
 8001dd8:	371c      	adds	r7, #28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b085      	sub	sp, #20
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001df8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	f043 0307 	orr.w	r3, r3, #7
 8001e04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	609a      	str	r2, [r3, #8]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001e32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	021a      	lsls	r2, r3, #8
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	609a      	str	r2, [r3, #8]
}
 8001e4c:	bf00      	nop
 8001e4e:	371c      	adds	r7, #28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e050      	b.n	8001f12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a1c      	ldr	r2, [pc, #112]	@ (8001f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d018      	beq.n	8001ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ebc:	d013      	beq.n	8001ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a18      	ldr	r2, [pc, #96]	@ (8001f24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d00e      	beq.n	8001ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a16      	ldr	r2, [pc, #88]	@ (8001f28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d009      	beq.n	8001ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a15      	ldr	r2, [pc, #84]	@ (8001f2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d004      	beq.n	8001ee6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a13      	ldr	r2, [pc, #76]	@ (8001f30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d10c      	bne.n	8001f00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001eec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40010000 	.word	0x40010000
 8001f24:	40000400 	.word	0x40000400
 8001f28:	40000800 	.word	0x40000800
 8001f2c:	40000c00 	.word	0x40000c00
 8001f30:	40014000 	.word	0x40014000

08001f34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e042      	b.n	8001fcc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d106      	bne.n	8001f60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7fe fd06 	bl	800096c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2224      	movs	r2, #36	@ 0x24
 8001f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f82b 	bl	8001fd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	695a      	ldr	r2, [r3, #20]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001fac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fd8:	b0c0      	sub	sp, #256	@ 0x100
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff0:	68d9      	ldr	r1, [r3, #12]
 8001ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	ea40 0301 	orr.w	r3, r0, r1
 8001ffc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	431a      	orrs	r2, r3
 800200c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	431a      	orrs	r2, r3
 8002014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	4313      	orrs	r3, r2
 800201c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800202c:	f021 010c 	bic.w	r1, r1, #12
 8002030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800203a:	430b      	orrs	r3, r1
 800203c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800203e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800204a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800204e:	6999      	ldr	r1, [r3, #24]
 8002050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	ea40 0301 	orr.w	r3, r0, r1
 800205a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800205c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	4b8f      	ldr	r3, [pc, #572]	@ (80022a0 <UART_SetConfig+0x2cc>)
 8002064:	429a      	cmp	r2, r3
 8002066:	d005      	beq.n	8002074 <UART_SetConfig+0xa0>
 8002068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	4b8d      	ldr	r3, [pc, #564]	@ (80022a4 <UART_SetConfig+0x2d0>)
 8002070:	429a      	cmp	r2, r3
 8002072:	d104      	bne.n	800207e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002074:	f7ff fca0 	bl	80019b8 <HAL_RCC_GetPCLK2Freq>
 8002078:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800207c:	e003      	b.n	8002086 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800207e:	f7ff fc87 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 8002082:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002090:	f040 810c 	bne.w	80022ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002094:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002098:	2200      	movs	r2, #0
 800209a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800209e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80020a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80020a6:	4622      	mov	r2, r4
 80020a8:	462b      	mov	r3, r5
 80020aa:	1891      	adds	r1, r2, r2
 80020ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80020ae:	415b      	adcs	r3, r3
 80020b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80020b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80020b6:	4621      	mov	r1, r4
 80020b8:	eb12 0801 	adds.w	r8, r2, r1
 80020bc:	4629      	mov	r1, r5
 80020be:	eb43 0901 	adc.w	r9, r3, r1
 80020c2:	f04f 0200 	mov.w	r2, #0
 80020c6:	f04f 0300 	mov.w	r3, #0
 80020ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020d6:	4690      	mov	r8, r2
 80020d8:	4699      	mov	r9, r3
 80020da:	4623      	mov	r3, r4
 80020dc:	eb18 0303 	adds.w	r3, r8, r3
 80020e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80020e4:	462b      	mov	r3, r5
 80020e6:	eb49 0303 	adc.w	r3, r9, r3
 80020ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80020ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80020fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80020fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002102:	460b      	mov	r3, r1
 8002104:	18db      	adds	r3, r3, r3
 8002106:	653b      	str	r3, [r7, #80]	@ 0x50
 8002108:	4613      	mov	r3, r2
 800210a:	eb42 0303 	adc.w	r3, r2, r3
 800210e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002110:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002114:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002118:	f7fe f862 	bl	80001e0 <__aeabi_uldivmod>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4b61      	ldr	r3, [pc, #388]	@ (80022a8 <UART_SetConfig+0x2d4>)
 8002122:	fba3 2302 	umull	r2, r3, r3, r2
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	011c      	lsls	r4, r3, #4
 800212a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800212e:	2200      	movs	r2, #0
 8002130:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002134:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002138:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800213c:	4642      	mov	r2, r8
 800213e:	464b      	mov	r3, r9
 8002140:	1891      	adds	r1, r2, r2
 8002142:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002144:	415b      	adcs	r3, r3
 8002146:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002148:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800214c:	4641      	mov	r1, r8
 800214e:	eb12 0a01 	adds.w	sl, r2, r1
 8002152:	4649      	mov	r1, r9
 8002154:	eb43 0b01 	adc.w	fp, r3, r1
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002164:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002168:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800216c:	4692      	mov	sl, r2
 800216e:	469b      	mov	fp, r3
 8002170:	4643      	mov	r3, r8
 8002172:	eb1a 0303 	adds.w	r3, sl, r3
 8002176:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800217a:	464b      	mov	r3, r9
 800217c:	eb4b 0303 	adc.w	r3, fp, r3
 8002180:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002190:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002194:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002198:	460b      	mov	r3, r1
 800219a:	18db      	adds	r3, r3, r3
 800219c:	643b      	str	r3, [r7, #64]	@ 0x40
 800219e:	4613      	mov	r3, r2
 80021a0:	eb42 0303 	adc.w	r3, r2, r3
 80021a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80021a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80021aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80021ae:	f7fe f817 	bl	80001e0 <__aeabi_uldivmod>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4611      	mov	r1, r2
 80021b8:	4b3b      	ldr	r3, [pc, #236]	@ (80022a8 <UART_SetConfig+0x2d4>)
 80021ba:	fba3 2301 	umull	r2, r3, r3, r1
 80021be:	095b      	lsrs	r3, r3, #5
 80021c0:	2264      	movs	r2, #100	@ 0x64
 80021c2:	fb02 f303 	mul.w	r3, r2, r3
 80021c6:	1acb      	subs	r3, r1, r3
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80021ce:	4b36      	ldr	r3, [pc, #216]	@ (80022a8 <UART_SetConfig+0x2d4>)
 80021d0:	fba3 2302 	umull	r2, r3, r3, r2
 80021d4:	095b      	lsrs	r3, r3, #5
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80021dc:	441c      	add	r4, r3
 80021de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021e2:	2200      	movs	r2, #0
 80021e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80021e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80021ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80021f0:	4642      	mov	r2, r8
 80021f2:	464b      	mov	r3, r9
 80021f4:	1891      	adds	r1, r2, r2
 80021f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80021f8:	415b      	adcs	r3, r3
 80021fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002200:	4641      	mov	r1, r8
 8002202:	1851      	adds	r1, r2, r1
 8002204:	6339      	str	r1, [r7, #48]	@ 0x30
 8002206:	4649      	mov	r1, r9
 8002208:	414b      	adcs	r3, r1
 800220a:	637b      	str	r3, [r7, #52]	@ 0x34
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	f04f 0300 	mov.w	r3, #0
 8002214:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002218:	4659      	mov	r1, fp
 800221a:	00cb      	lsls	r3, r1, #3
 800221c:	4651      	mov	r1, sl
 800221e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002222:	4651      	mov	r1, sl
 8002224:	00ca      	lsls	r2, r1, #3
 8002226:	4610      	mov	r0, r2
 8002228:	4619      	mov	r1, r3
 800222a:	4603      	mov	r3, r0
 800222c:	4642      	mov	r2, r8
 800222e:	189b      	adds	r3, r3, r2
 8002230:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002234:	464b      	mov	r3, r9
 8002236:	460a      	mov	r2, r1
 8002238:	eb42 0303 	adc.w	r3, r2, r3
 800223c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800224c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002250:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002254:	460b      	mov	r3, r1
 8002256:	18db      	adds	r3, r3, r3
 8002258:	62bb      	str	r3, [r7, #40]	@ 0x28
 800225a:	4613      	mov	r3, r2
 800225c:	eb42 0303 	adc.w	r3, r2, r3
 8002260:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002262:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002266:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800226a:	f7fd ffb9 	bl	80001e0 <__aeabi_uldivmod>
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	4b0d      	ldr	r3, [pc, #52]	@ (80022a8 <UART_SetConfig+0x2d4>)
 8002274:	fba3 1302 	umull	r1, r3, r3, r2
 8002278:	095b      	lsrs	r3, r3, #5
 800227a:	2164      	movs	r1, #100	@ 0x64
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	3332      	adds	r3, #50	@ 0x32
 8002286:	4a08      	ldr	r2, [pc, #32]	@ (80022a8 <UART_SetConfig+0x2d4>)
 8002288:	fba2 2303 	umull	r2, r3, r2, r3
 800228c:	095b      	lsrs	r3, r3, #5
 800228e:	f003 0207 	and.w	r2, r3, #7
 8002292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4422      	add	r2, r4
 800229a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800229c:	e106      	b.n	80024ac <UART_SetConfig+0x4d8>
 800229e:	bf00      	nop
 80022a0:	40011000 	.word	0x40011000
 80022a4:	40011400 	.word	0x40011400
 80022a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022b0:	2200      	movs	r2, #0
 80022b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80022b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80022ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80022be:	4642      	mov	r2, r8
 80022c0:	464b      	mov	r3, r9
 80022c2:	1891      	adds	r1, r2, r2
 80022c4:	6239      	str	r1, [r7, #32]
 80022c6:	415b      	adcs	r3, r3
 80022c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022ce:	4641      	mov	r1, r8
 80022d0:	1854      	adds	r4, r2, r1
 80022d2:	4649      	mov	r1, r9
 80022d4:	eb43 0501 	adc.w	r5, r3, r1
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	00eb      	lsls	r3, r5, #3
 80022e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022e6:	00e2      	lsls	r2, r4, #3
 80022e8:	4614      	mov	r4, r2
 80022ea:	461d      	mov	r5, r3
 80022ec:	4643      	mov	r3, r8
 80022ee:	18e3      	adds	r3, r4, r3
 80022f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80022f4:	464b      	mov	r3, r9
 80022f6:	eb45 0303 	adc.w	r3, r5, r3
 80022fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80022fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800230a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800231a:	4629      	mov	r1, r5
 800231c:	008b      	lsls	r3, r1, #2
 800231e:	4621      	mov	r1, r4
 8002320:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002324:	4621      	mov	r1, r4
 8002326:	008a      	lsls	r2, r1, #2
 8002328:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800232c:	f7fd ff58 	bl	80001e0 <__aeabi_uldivmod>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4b60      	ldr	r3, [pc, #384]	@ (80024b8 <UART_SetConfig+0x4e4>)
 8002336:	fba3 2302 	umull	r2, r3, r3, r2
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	011c      	lsls	r4, r3, #4
 800233e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002342:	2200      	movs	r2, #0
 8002344:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002348:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800234c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002350:	4642      	mov	r2, r8
 8002352:	464b      	mov	r3, r9
 8002354:	1891      	adds	r1, r2, r2
 8002356:	61b9      	str	r1, [r7, #24]
 8002358:	415b      	adcs	r3, r3
 800235a:	61fb      	str	r3, [r7, #28]
 800235c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002360:	4641      	mov	r1, r8
 8002362:	1851      	adds	r1, r2, r1
 8002364:	6139      	str	r1, [r7, #16]
 8002366:	4649      	mov	r1, r9
 8002368:	414b      	adcs	r3, r1
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002378:	4659      	mov	r1, fp
 800237a:	00cb      	lsls	r3, r1, #3
 800237c:	4651      	mov	r1, sl
 800237e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002382:	4651      	mov	r1, sl
 8002384:	00ca      	lsls	r2, r1, #3
 8002386:	4610      	mov	r0, r2
 8002388:	4619      	mov	r1, r3
 800238a:	4603      	mov	r3, r0
 800238c:	4642      	mov	r2, r8
 800238e:	189b      	adds	r3, r3, r2
 8002390:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002394:	464b      	mov	r3, r9
 8002396:	460a      	mov	r2, r1
 8002398:	eb42 0303 	adc.w	r3, r2, r3
 800239c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80023a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80023aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80023b8:	4649      	mov	r1, r9
 80023ba:	008b      	lsls	r3, r1, #2
 80023bc:	4641      	mov	r1, r8
 80023be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023c2:	4641      	mov	r1, r8
 80023c4:	008a      	lsls	r2, r1, #2
 80023c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80023ca:	f7fd ff09 	bl	80001e0 <__aeabi_uldivmod>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4611      	mov	r1, r2
 80023d4:	4b38      	ldr	r3, [pc, #224]	@ (80024b8 <UART_SetConfig+0x4e4>)
 80023d6:	fba3 2301 	umull	r2, r3, r3, r1
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	2264      	movs	r2, #100	@ 0x64
 80023de:	fb02 f303 	mul.w	r3, r2, r3
 80023e2:	1acb      	subs	r3, r1, r3
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	3332      	adds	r3, #50	@ 0x32
 80023e8:	4a33      	ldr	r2, [pc, #204]	@ (80024b8 <UART_SetConfig+0x4e4>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023f4:	441c      	add	r4, r3
 80023f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023fa:	2200      	movs	r2, #0
 80023fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80023fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8002400:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002404:	4642      	mov	r2, r8
 8002406:	464b      	mov	r3, r9
 8002408:	1891      	adds	r1, r2, r2
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	415b      	adcs	r3, r3
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002414:	4641      	mov	r1, r8
 8002416:	1851      	adds	r1, r2, r1
 8002418:	6039      	str	r1, [r7, #0]
 800241a:	4649      	mov	r1, r9
 800241c:	414b      	adcs	r3, r1
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800242c:	4659      	mov	r1, fp
 800242e:	00cb      	lsls	r3, r1, #3
 8002430:	4651      	mov	r1, sl
 8002432:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002436:	4651      	mov	r1, sl
 8002438:	00ca      	lsls	r2, r1, #3
 800243a:	4610      	mov	r0, r2
 800243c:	4619      	mov	r1, r3
 800243e:	4603      	mov	r3, r0
 8002440:	4642      	mov	r2, r8
 8002442:	189b      	adds	r3, r3, r2
 8002444:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002446:	464b      	mov	r3, r9
 8002448:	460a      	mov	r2, r1
 800244a:	eb42 0303 	adc.w	r3, r2, r3
 800244e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	663b      	str	r3, [r7, #96]	@ 0x60
 800245a:	667a      	str	r2, [r7, #100]	@ 0x64
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002468:	4649      	mov	r1, r9
 800246a:	008b      	lsls	r3, r1, #2
 800246c:	4641      	mov	r1, r8
 800246e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002472:	4641      	mov	r1, r8
 8002474:	008a      	lsls	r2, r1, #2
 8002476:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800247a:	f7fd feb1 	bl	80001e0 <__aeabi_uldivmod>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4b0d      	ldr	r3, [pc, #52]	@ (80024b8 <UART_SetConfig+0x4e4>)
 8002484:	fba3 1302 	umull	r1, r3, r3, r2
 8002488:	095b      	lsrs	r3, r3, #5
 800248a:	2164      	movs	r1, #100	@ 0x64
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	3332      	adds	r3, #50	@ 0x32
 8002496:	4a08      	ldr	r2, [pc, #32]	@ (80024b8 <UART_SetConfig+0x4e4>)
 8002498:	fba2 2303 	umull	r2, r3, r2, r3
 800249c:	095b      	lsrs	r3, r3, #5
 800249e:	f003 020f 	and.w	r2, r3, #15
 80024a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4422      	add	r2, r4
 80024aa:	609a      	str	r2, [r3, #8]
}
 80024ac:	bf00      	nop
 80024ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80024b2:	46bd      	mov	sp, r7
 80024b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024b8:	51eb851f 	.word	0x51eb851f

080024bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80024ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024ce:	2b84      	cmp	r3, #132	@ 0x84
 80024d0:	d005      	beq.n	80024de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80024d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4413      	add	r3, r2
 80024da:	3303      	adds	r3, #3
 80024dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80024de:	68fb      	ldr	r3, [r7, #12]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80024f0:	f000 fae4 	bl	8002abc <vTaskStartScheduler>
  
  return osOK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	bd80      	pop	{r7, pc}

080024fa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80024fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024fc:	b089      	sub	sp, #36	@ 0x24
 80024fe:	af04      	add	r7, sp, #16
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d020      	beq.n	800254e <osThreadCreate+0x54>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01c      	beq.n	800254e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685c      	ldr	r4, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691e      	ldr	r6, [r3, #16]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff ffc8 	bl	80024bc <makeFreeRtosPriority>
 800252c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002536:	9202      	str	r2, [sp, #8]
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	9100      	str	r1, [sp, #0]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	4632      	mov	r2, r6
 8002540:	4629      	mov	r1, r5
 8002542:	4620      	mov	r0, r4
 8002544:	f000 f8ed 	bl	8002722 <xTaskCreateStatic>
 8002548:	4603      	mov	r3, r0
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	e01c      	b.n	8002588 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685c      	ldr	r4, [r3, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800255a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ffaa 	bl	80024bc <makeFreeRtosPriority>
 8002568:	4602      	mov	r2, r0
 800256a:	f107 030c 	add.w	r3, r7, #12
 800256e:	9301      	str	r3, [sp, #4]
 8002570:	9200      	str	r2, [sp, #0]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	4632      	mov	r2, r6
 8002576:	4629      	mov	r1, r5
 8002578:	4620      	mov	r0, r4
 800257a:	f000 f932 	bl	80027e2 <xTaskCreate>
 800257e:	4603      	mov	r3, r0
 8002580:	2b01      	cmp	r3, #1
 8002582:	d001      	beq.n	8002588 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002584:	2300      	movs	r3, #0
 8002586:	e000      	b.n	800258a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002588:	68fb      	ldr	r3, [r7, #12]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002592 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <osDelay+0x16>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	e000      	b.n	80025aa <osDelay+0x18>
 80025a8:	2301      	movs	r3, #1
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 fa50 	bl	8002a50 <vTaskDelay>
  
  return osOK;
 80025b0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f103 0208 	add.w	r2, r3, #8
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f04f 32ff 	mov.w	r2, #4294967295
 80025d2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f103 0208 	add.w	r2, r3, #8
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f103 0208 	add.w	r2, r3, #8
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	601a      	str	r2, [r3, #0]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002672:	d103      	bne.n	800267c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	e00c      	b.n	8002696 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3308      	adds	r3, #8
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	e002      	b.n	800268a <vListInsert+0x2e>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	429a      	cmp	r2, r3
 8002694:	d2f6      	bcs.n	8002684 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	601a      	str	r2, [r3, #0]
}
 80026c2:	bf00      	nop
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026ce:	b480      	push	{r7}
 80026d0:	b085      	sub	sp, #20
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6892      	ldr	r2, [r2, #8]
 80026e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6852      	ldr	r2, [r2, #4]
 80026ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d103      	bne.n	8002702 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	1e5a      	subs	r2, r3, #1
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002722:	b580      	push	{r7, lr}
 8002724:	b08e      	sub	sp, #56	@ 0x38
 8002726:	af04      	add	r7, sp, #16
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10b      	bne.n	800274e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800273a:	f383 8811 	msr	BASEPRI, r3
 800273e:	f3bf 8f6f 	isb	sy
 8002742:	f3bf 8f4f 	dsb	sy
 8002746:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002748:	bf00      	nop
 800274a:	bf00      	nop
 800274c:	e7fd      	b.n	800274a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800274e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10b      	bne.n	800276c <xTaskCreateStatic+0x4a>
	__asm volatile
 8002754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002758:	f383 8811 	msr	BASEPRI, r3
 800275c:	f3bf 8f6f 	isb	sy
 8002760:	f3bf 8f4f 	dsb	sy
 8002764:	61fb      	str	r3, [r7, #28]
}
 8002766:	bf00      	nop
 8002768:	bf00      	nop
 800276a:	e7fd      	b.n	8002768 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800276c:	2354      	movs	r3, #84	@ 0x54
 800276e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	2b54      	cmp	r3, #84	@ 0x54
 8002774:	d00b      	beq.n	800278e <xTaskCreateStatic+0x6c>
	__asm volatile
 8002776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800277a:	f383 8811 	msr	BASEPRI, r3
 800277e:	f3bf 8f6f 	isb	sy
 8002782:	f3bf 8f4f 	dsb	sy
 8002786:	61bb      	str	r3, [r7, #24]
}
 8002788:	bf00      	nop
 800278a:	bf00      	nop
 800278c:	e7fd      	b.n	800278a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800278e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002792:	2b00      	cmp	r3, #0
 8002794:	d01e      	beq.n	80027d4 <xTaskCreateStatic+0xb2>
 8002796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002798:	2b00      	cmp	r3, #0
 800279a:	d01b      	beq.n	80027d4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800279c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800279e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80027a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027a4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	2202      	movs	r2, #2
 80027aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80027ae:	2300      	movs	r3, #0
 80027b0:	9303      	str	r3, [sp, #12]
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	9302      	str	r3, [sp, #8]
 80027b6:	f107 0314 	add.w	r3, r7, #20
 80027ba:	9301      	str	r3, [sp, #4]
 80027bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f850 	bl	800286c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80027cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80027ce:	f000 f8d5 	bl	800297c <prvAddNewTaskToReadyList>
 80027d2:	e001      	b.n	80027d8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80027d8:	697b      	ldr	r3, [r7, #20]
	}
 80027da:	4618      	mov	r0, r3
 80027dc:	3728      	adds	r7, #40	@ 0x28
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b08c      	sub	sp, #48	@ 0x30
 80027e6:	af04      	add	r7, sp, #16
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	603b      	str	r3, [r7, #0]
 80027ee:	4613      	mov	r3, r2
 80027f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 feee 	bl	80035d8 <pvPortMalloc>
 80027fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00e      	beq.n	8002822 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002804:	2054      	movs	r0, #84	@ 0x54
 8002806:	f000 fee7 	bl	80035d8 <pvPortMalloc>
 800280a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	631a      	str	r2, [r3, #48]	@ 0x30
 8002818:	e005      	b.n	8002826 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800281a:	6978      	ldr	r0, [r7, #20]
 800281c:	f000 ffaa 	bl	8003774 <vPortFree>
 8002820:	e001      	b.n	8002826 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d017      	beq.n	800285c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002834:	88fa      	ldrh	r2, [r7, #6]
 8002836:	2300      	movs	r3, #0
 8002838:	9303      	str	r3, [sp, #12]
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	9302      	str	r3, [sp, #8]
 800283e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002840:	9301      	str	r3, [sp, #4]
 8002842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68b9      	ldr	r1, [r7, #8]
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 f80e 	bl	800286c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002850:	69f8      	ldr	r0, [r7, #28]
 8002852:	f000 f893 	bl	800297c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002856:	2301      	movs	r3, #1
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	e002      	b.n	8002862 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800285c:	f04f 33ff 	mov.w	r3, #4294967295
 8002860:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002862:	69bb      	ldr	r3, [r7, #24]
	}
 8002864:	4618      	mov	r0, r3
 8002866:	3720      	adds	r7, #32
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800287a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800287c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002884:	3b01      	subs	r3, #1
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	f023 0307 	bic.w	r3, r3, #7
 8002892:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00b      	beq.n	80028b6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800289e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028a2:	f383 8811 	msr	BASEPRI, r3
 80028a6:	f3bf 8f6f 	isb	sy
 80028aa:	f3bf 8f4f 	dsb	sy
 80028ae:	617b      	str	r3, [r7, #20]
}
 80028b0:	bf00      	nop
 80028b2:	bf00      	nop
 80028b4:	e7fd      	b.n	80028b2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d01f      	beq.n	80028fc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028bc:	2300      	movs	r3, #0
 80028be:	61fb      	str	r3, [r7, #28]
 80028c0:	e012      	b.n	80028e8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	4413      	add	r3, r2
 80028c8:	7819      	ldrb	r1, [r3, #0]
 80028ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	4413      	add	r3, r2
 80028d0:	3334      	adds	r3, #52	@ 0x34
 80028d2:	460a      	mov	r2, r1
 80028d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	4413      	add	r3, r2
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d006      	beq.n	80028f0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3301      	adds	r3, #1
 80028e6:	61fb      	str	r3, [r7, #28]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	2b0f      	cmp	r3, #15
 80028ec:	d9e9      	bls.n	80028c2 <prvInitialiseNewTask+0x56>
 80028ee:	e000      	b.n	80028f2 <prvInitialiseNewTask+0x86>
			{
				break;
 80028f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80028f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028fa:	e003      	b.n	8002904 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80028fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002906:	2b06      	cmp	r3, #6
 8002908:	d901      	bls.n	800290e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800290a:	2306      	movs	r3, #6
 800290c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800290e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002910:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002912:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002916:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002918:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800291a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291c:	2200      	movs	r2, #0
 800291e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002922:	3304      	adds	r3, #4
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fe68 	bl	80025fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800292a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800292c:	3318      	adds	r3, #24
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fe63 	bl	80025fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002938:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800293a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293c:	f1c3 0207 	rsb	r2, r3, #7
 8002940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002942:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002948:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800294a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800294c:	2200      	movs	r2, #0
 800294e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	68f9      	ldr	r1, [r7, #12]
 800295c:	69b8      	ldr	r0, [r7, #24]
 800295e:	f000 fc2b 	bl	80031b8 <pxPortInitialiseStack>
 8002962:	4602      	mov	r2, r0
 8002964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002966:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800296e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002972:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002974:	bf00      	nop
 8002976:	3720      	adds	r7, #32
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002984:	f000 fd48 	bl	8003418 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002988:	4b2a      	ldr	r3, [pc, #168]	@ (8002a34 <prvAddNewTaskToReadyList+0xb8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3301      	adds	r3, #1
 800298e:	4a29      	ldr	r2, [pc, #164]	@ (8002a34 <prvAddNewTaskToReadyList+0xb8>)
 8002990:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002992:	4b29      	ldr	r3, [pc, #164]	@ (8002a38 <prvAddNewTaskToReadyList+0xbc>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800299a:	4a27      	ldr	r2, [pc, #156]	@ (8002a38 <prvAddNewTaskToReadyList+0xbc>)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029a0:	4b24      	ldr	r3, [pc, #144]	@ (8002a34 <prvAddNewTaskToReadyList+0xb8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d110      	bne.n	80029ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80029a8:	f000 fac4 	bl	8002f34 <prvInitialiseTaskLists>
 80029ac:	e00d      	b.n	80029ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80029ae:	4b23      	ldr	r3, [pc, #140]	@ (8002a3c <prvAddNewTaskToReadyList+0xc0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029b6:	4b20      	ldr	r3, [pc, #128]	@ (8002a38 <prvAddNewTaskToReadyList+0xbc>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d802      	bhi.n	80029ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80029c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002a38 <prvAddNewTaskToReadyList+0xbc>)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80029ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002a40 <prvAddNewTaskToReadyList+0xc4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	3301      	adds	r3, #1
 80029d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a40 <prvAddNewTaskToReadyList+0xc4>)
 80029d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d8:	2201      	movs	r2, #1
 80029da:	409a      	lsls	r2, r3
 80029dc:	4b19      	ldr	r3, [pc, #100]	@ (8002a44 <prvAddNewTaskToReadyList+0xc8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	4a18      	ldr	r2, [pc, #96]	@ (8002a44 <prvAddNewTaskToReadyList+0xc8>)
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4a15      	ldr	r2, [pc, #84]	@ (8002a48 <prvAddNewTaskToReadyList+0xcc>)
 80029f4:	441a      	add	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3304      	adds	r3, #4
 80029fa:	4619      	mov	r1, r3
 80029fc:	4610      	mov	r0, r2
 80029fe:	f7ff fe09 	bl	8002614 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002a02:	f000 fd3b 	bl	800347c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002a06:	4b0d      	ldr	r3, [pc, #52]	@ (8002a3c <prvAddNewTaskToReadyList+0xc0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00e      	beq.n	8002a2c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a38 <prvAddNewTaskToReadyList+0xbc>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d207      	bcs.n	8002a2c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a4c <prvAddNewTaskToReadyList+0xd0>)
 8002a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	f3bf 8f4f 	dsb	sy
 8002a28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20000420 	.word	0x20000420
 8002a38:	20000320 	.word	0x20000320
 8002a3c:	2000042c 	.word	0x2000042c
 8002a40:	2000043c 	.word	0x2000043c
 8002a44:	20000428 	.word	0x20000428
 8002a48:	20000324 	.word	0x20000324
 8002a4c:	e000ed04 	.word	0xe000ed04

08002a50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d018      	beq.n	8002a94 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002a62:	4b14      	ldr	r3, [pc, #80]	@ (8002ab4 <vTaskDelay+0x64>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00b      	beq.n	8002a82 <vTaskDelay+0x32>
	__asm volatile
 8002a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a6e:	f383 8811 	msr	BASEPRI, r3
 8002a72:	f3bf 8f6f 	isb	sy
 8002a76:	f3bf 8f4f 	dsb	sy
 8002a7a:	60bb      	str	r3, [r7, #8]
}
 8002a7c:	bf00      	nop
 8002a7e:	bf00      	nop
 8002a80:	e7fd      	b.n	8002a7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002a82:	f000 f87d 	bl	8002b80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a86:	2100      	movs	r1, #0
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fb2f 	bl	80030ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002a8e:	f000 f885 	bl	8002b9c <xTaskResumeAll>
 8002a92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d107      	bne.n	8002aaa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002a9a:	4b07      	ldr	r3, [pc, #28]	@ (8002ab8 <vTaskDelay+0x68>)
 8002a9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000448 	.word	0x20000448
 8002ab8:	e000ed04 	.word	0xe000ed04

08002abc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	@ 0x28
 8002ac0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002aca:	463a      	mov	r2, r7
 8002acc:	1d39      	adds	r1, r7, #4
 8002ace:	f107 0308 	add.w	r3, r7, #8
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fd fcfc 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002ad8:	6839      	ldr	r1, [r7, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	9202      	str	r2, [sp, #8]
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	460a      	mov	r2, r1
 8002aea:	491f      	ldr	r1, [pc, #124]	@ (8002b68 <vTaskStartScheduler+0xac>)
 8002aec:	481f      	ldr	r0, [pc, #124]	@ (8002b6c <vTaskStartScheduler+0xb0>)
 8002aee:	f7ff fe18 	bl	8002722 <xTaskCreateStatic>
 8002af2:	4603      	mov	r3, r0
 8002af4:	4a1e      	ldr	r2, [pc, #120]	@ (8002b70 <vTaskStartScheduler+0xb4>)
 8002af6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002af8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b70 <vTaskStartScheduler+0xb4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002b00:	2301      	movs	r3, #1
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	e001      	b.n	8002b0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d116      	bne.n	8002b3e <vTaskStartScheduler+0x82>
	__asm volatile
 8002b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b14:	f383 8811 	msr	BASEPRI, r3
 8002b18:	f3bf 8f6f 	isb	sy
 8002b1c:	f3bf 8f4f 	dsb	sy
 8002b20:	613b      	str	r3, [r7, #16]
}
 8002b22:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b24:	4b13      	ldr	r3, [pc, #76]	@ (8002b74 <vTaskStartScheduler+0xb8>)
 8002b26:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b2c:	4b12      	ldr	r3, [pc, #72]	@ (8002b78 <vTaskStartScheduler+0xbc>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b32:	4b12      	ldr	r3, [pc, #72]	@ (8002b7c <vTaskStartScheduler+0xc0>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b38:	f000 fbca 	bl	80032d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b3c:	e00f      	b.n	8002b5e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b44:	d10b      	bne.n	8002b5e <vTaskStartScheduler+0xa2>
	__asm volatile
 8002b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b4a:	f383 8811 	msr	BASEPRI, r3
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	f3bf 8f4f 	dsb	sy
 8002b56:	60fb      	str	r3, [r7, #12]
}
 8002b58:	bf00      	nop
 8002b5a:	bf00      	nop
 8002b5c:	e7fd      	b.n	8002b5a <vTaskStartScheduler+0x9e>
}
 8002b5e:	bf00      	nop
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	08003a90 	.word	0x08003a90
 8002b6c:	08002f05 	.word	0x08002f05
 8002b70:	20000444 	.word	0x20000444
 8002b74:	20000440 	.word	0x20000440
 8002b78:	2000042c 	.word	0x2000042c
 8002b7c:	20000424 	.word	0x20000424

08002b80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002b84:	4b04      	ldr	r3, [pc, #16]	@ (8002b98 <vTaskSuspendAll+0x18>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	4a03      	ldr	r2, [pc, #12]	@ (8002b98 <vTaskSuspendAll+0x18>)
 8002b8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002b8e:	bf00      	nop
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	20000448 	.word	0x20000448

08002b9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002baa:	4b42      	ldr	r3, [pc, #264]	@ (8002cb4 <xTaskResumeAll+0x118>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10b      	bne.n	8002bca <xTaskResumeAll+0x2e>
	__asm volatile
 8002bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb6:	f383 8811 	msr	BASEPRI, r3
 8002bba:	f3bf 8f6f 	isb	sy
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	603b      	str	r3, [r7, #0]
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	e7fd      	b.n	8002bc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002bca:	f000 fc25 	bl	8003418 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002bce:	4b39      	ldr	r3, [pc, #228]	@ (8002cb4 <xTaskResumeAll+0x118>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	4a37      	ldr	r2, [pc, #220]	@ (8002cb4 <xTaskResumeAll+0x118>)
 8002bd6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bd8:	4b36      	ldr	r3, [pc, #216]	@ (8002cb4 <xTaskResumeAll+0x118>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d161      	bne.n	8002ca4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002be0:	4b35      	ldr	r3, [pc, #212]	@ (8002cb8 <xTaskResumeAll+0x11c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d05d      	beq.n	8002ca4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002be8:	e02e      	b.n	8002c48 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bea:	4b34      	ldr	r3, [pc, #208]	@ (8002cbc <xTaskResumeAll+0x120>)
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3318      	adds	r3, #24
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fd69 	bl	80026ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	3304      	adds	r3, #4
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fd64 	bl	80026ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8002cc0 <xTaskResumeAll+0x124>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	4a2a      	ldr	r2, [pc, #168]	@ (8002cc0 <xTaskResumeAll+0x124>)
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4a27      	ldr	r2, [pc, #156]	@ (8002cc4 <xTaskResumeAll+0x128>)
 8002c26:	441a      	add	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4610      	mov	r0, r2
 8002c30:	f7ff fcf0 	bl	8002614 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c38:	4b23      	ldr	r3, [pc, #140]	@ (8002cc8 <xTaskResumeAll+0x12c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d302      	bcc.n	8002c48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002c42:	4b22      	ldr	r3, [pc, #136]	@ (8002ccc <xTaskResumeAll+0x130>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c48:	4b1c      	ldr	r3, [pc, #112]	@ (8002cbc <xTaskResumeAll+0x120>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1cc      	bne.n	8002bea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c56:	f000 fa0b 	bl	8003070 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd0 <xTaskResumeAll+0x134>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d010      	beq.n	8002c88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c66:	f000 f837 	bl	8002cd8 <xTaskIncrementTick>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002c70:	4b16      	ldr	r3, [pc, #88]	@ (8002ccc <xTaskResumeAll+0x130>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f1      	bne.n	8002c66 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002c82:	4b13      	ldr	r3, [pc, #76]	@ (8002cd0 <xTaskResumeAll+0x134>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002c88:	4b10      	ldr	r3, [pc, #64]	@ (8002ccc <xTaskResumeAll+0x130>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d009      	beq.n	8002ca4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002c90:	2301      	movs	r3, #1
 8002c92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002c94:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd4 <xTaskResumeAll+0x138>)
 8002c96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	f3bf 8f4f 	dsb	sy
 8002ca0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002ca4:	f000 fbea 	bl	800347c <vPortExitCritical>

	return xAlreadyYielded;
 8002ca8:	68bb      	ldr	r3, [r7, #8]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20000448 	.word	0x20000448
 8002cb8:	20000420 	.word	0x20000420
 8002cbc:	200003e0 	.word	0x200003e0
 8002cc0:	20000428 	.word	0x20000428
 8002cc4:	20000324 	.word	0x20000324
 8002cc8:	20000320 	.word	0x20000320
 8002ccc:	20000434 	.word	0x20000434
 8002cd0:	20000430 	.word	0x20000430
 8002cd4:	e000ed04 	.word	0xe000ed04

08002cd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ce2:	4b4f      	ldr	r3, [pc, #316]	@ (8002e20 <xTaskIncrementTick+0x148>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f040 808f 	bne.w	8002e0a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002cec:	4b4d      	ldr	r3, [pc, #308]	@ (8002e24 <xTaskIncrementTick+0x14c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002cf4:	4a4b      	ldr	r2, [pc, #300]	@ (8002e24 <xTaskIncrementTick+0x14c>)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d121      	bne.n	8002d44 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d00:	4b49      	ldr	r3, [pc, #292]	@ (8002e28 <xTaskIncrementTick+0x150>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00b      	beq.n	8002d22 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d0e:	f383 8811 	msr	BASEPRI, r3
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	f3bf 8f4f 	dsb	sy
 8002d1a:	603b      	str	r3, [r7, #0]
}
 8002d1c:	bf00      	nop
 8002d1e:	bf00      	nop
 8002d20:	e7fd      	b.n	8002d1e <xTaskIncrementTick+0x46>
 8002d22:	4b41      	ldr	r3, [pc, #260]	@ (8002e28 <xTaskIncrementTick+0x150>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	4b40      	ldr	r3, [pc, #256]	@ (8002e2c <xTaskIncrementTick+0x154>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a3e      	ldr	r2, [pc, #248]	@ (8002e28 <xTaskIncrementTick+0x150>)
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	4a3e      	ldr	r2, [pc, #248]	@ (8002e2c <xTaskIncrementTick+0x154>)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	4b3e      	ldr	r3, [pc, #248]	@ (8002e30 <xTaskIncrementTick+0x158>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	4a3c      	ldr	r2, [pc, #240]	@ (8002e30 <xTaskIncrementTick+0x158>)
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	f000 f996 	bl	8003070 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d44:	4b3b      	ldr	r3, [pc, #236]	@ (8002e34 <xTaskIncrementTick+0x15c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d348      	bcc.n	8002de0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d4e:	4b36      	ldr	r3, [pc, #216]	@ (8002e28 <xTaskIncrementTick+0x150>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d104      	bne.n	8002d62 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d58:	4b36      	ldr	r3, [pc, #216]	@ (8002e34 <xTaskIncrementTick+0x15c>)
 8002d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d5e:	601a      	str	r2, [r3, #0]
					break;
 8002d60:	e03e      	b.n	8002de0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d62:	4b31      	ldr	r3, [pc, #196]	@ (8002e28 <xTaskIncrementTick+0x150>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d203      	bcs.n	8002d82 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002d7a:	4a2e      	ldr	r2, [pc, #184]	@ (8002e34 <xTaskIncrementTick+0x15c>)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d80:	e02e      	b.n	8002de0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	3304      	adds	r3, #4
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fca1 	bl	80026ce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d004      	beq.n	8002d9e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	3318      	adds	r3, #24
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fc98 	bl	80026ce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da2:	2201      	movs	r2, #1
 8002da4:	409a      	lsls	r2, r3
 8002da6:	4b24      	ldr	r3, [pc, #144]	@ (8002e38 <xTaskIncrementTick+0x160>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	4a22      	ldr	r2, [pc, #136]	@ (8002e38 <xTaskIncrementTick+0x160>)
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4a1f      	ldr	r2, [pc, #124]	@ (8002e3c <xTaskIncrementTick+0x164>)
 8002dbe:	441a      	add	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	f7ff fc24 	bl	8002614 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e40 <xTaskIncrementTick+0x168>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d3b9      	bcc.n	8002d4e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dde:	e7b6      	b.n	8002d4e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002de0:	4b17      	ldr	r3, [pc, #92]	@ (8002e40 <xTaskIncrementTick+0x168>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002de6:	4915      	ldr	r1, [pc, #84]	@ (8002e3c <xTaskIncrementTick+0x164>)
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d901      	bls.n	8002dfc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002dfc:	4b11      	ldr	r3, [pc, #68]	@ (8002e44 <xTaskIncrementTick+0x16c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d007      	beq.n	8002e14 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002e04:	2301      	movs	r3, #1
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	e004      	b.n	8002e14 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e48 <xTaskIncrementTick+0x170>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	4a0d      	ldr	r2, [pc, #52]	@ (8002e48 <xTaskIncrementTick+0x170>)
 8002e12:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002e14:	697b      	ldr	r3, [r7, #20]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000448 	.word	0x20000448
 8002e24:	20000424 	.word	0x20000424
 8002e28:	200003d8 	.word	0x200003d8
 8002e2c:	200003dc 	.word	0x200003dc
 8002e30:	20000438 	.word	0x20000438
 8002e34:	20000440 	.word	0x20000440
 8002e38:	20000428 	.word	0x20000428
 8002e3c:	20000324 	.word	0x20000324
 8002e40:	20000320 	.word	0x20000320
 8002e44:	20000434 	.word	0x20000434
 8002e48:	20000430 	.word	0x20000430

08002e4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e52:	4b27      	ldr	r3, [pc, #156]	@ (8002ef0 <vTaskSwitchContext+0xa4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e5a:	4b26      	ldr	r3, [pc, #152]	@ (8002ef4 <vTaskSwitchContext+0xa8>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e60:	e040      	b.n	8002ee4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8002e62:	4b24      	ldr	r3, [pc, #144]	@ (8002ef4 <vTaskSwitchContext+0xa8>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e68:	4b23      	ldr	r3, [pc, #140]	@ (8002ef8 <vTaskSwitchContext+0xac>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	fab3 f383 	clz	r3, r3
 8002e74:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002e76:	7afb      	ldrb	r3, [r7, #11]
 8002e78:	f1c3 031f 	rsb	r3, r3, #31
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	491f      	ldr	r1, [pc, #124]	@ (8002efc <vTaskSwitchContext+0xb0>)
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10b      	bne.n	8002eaa <vTaskSwitchContext+0x5e>
	__asm volatile
 8002e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e96:	f383 8811 	msr	BASEPRI, r3
 8002e9a:	f3bf 8f6f 	isb	sy
 8002e9e:	f3bf 8f4f 	dsb	sy
 8002ea2:	607b      	str	r3, [r7, #4]
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	e7fd      	b.n	8002ea6 <vTaskSwitchContext+0x5a>
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4a11      	ldr	r2, [pc, #68]	@ (8002efc <vTaskSwitchContext+0xb0>)
 8002eb6:	4413      	add	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	3308      	adds	r3, #8
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d104      	bne.n	8002eda <vTaskSwitchContext+0x8e>
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4a07      	ldr	r2, [pc, #28]	@ (8002f00 <vTaskSwitchContext+0xb4>)
 8002ee2:	6013      	str	r3, [r2, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	371c      	adds	r7, #28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	20000448 	.word	0x20000448
 8002ef4:	20000434 	.word	0x20000434
 8002ef8:	20000428 	.word	0x20000428
 8002efc:	20000324 	.word	0x20000324
 8002f00:	20000320 	.word	0x20000320

08002f04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002f0c:	f000 f852 	bl	8002fb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f10:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <prvIdleTask+0x28>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d9f9      	bls.n	8002f0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002f18:	4b05      	ldr	r3, [pc, #20]	@ (8002f30 <prvIdleTask+0x2c>)
 8002f1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002f28:	e7f0      	b.n	8002f0c <prvIdleTask+0x8>
 8002f2a:	bf00      	nop
 8002f2c:	20000324 	.word	0x20000324
 8002f30:	e000ed04 	.word	0xe000ed04

08002f34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	607b      	str	r3, [r7, #4]
 8002f3e:	e00c      	b.n	8002f5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4a12      	ldr	r2, [pc, #72]	@ (8002f94 <prvInitialiseTaskLists+0x60>)
 8002f4c:	4413      	add	r3, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fb33 	bl	80025ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3301      	adds	r3, #1
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b06      	cmp	r3, #6
 8002f5e:	d9ef      	bls.n	8002f40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002f60:	480d      	ldr	r0, [pc, #52]	@ (8002f98 <prvInitialiseTaskLists+0x64>)
 8002f62:	f7ff fb2a 	bl	80025ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002f66:	480d      	ldr	r0, [pc, #52]	@ (8002f9c <prvInitialiseTaskLists+0x68>)
 8002f68:	f7ff fb27 	bl	80025ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002f6c:	480c      	ldr	r0, [pc, #48]	@ (8002fa0 <prvInitialiseTaskLists+0x6c>)
 8002f6e:	f7ff fb24 	bl	80025ba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002f72:	480c      	ldr	r0, [pc, #48]	@ (8002fa4 <prvInitialiseTaskLists+0x70>)
 8002f74:	f7ff fb21 	bl	80025ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002f78:	480b      	ldr	r0, [pc, #44]	@ (8002fa8 <prvInitialiseTaskLists+0x74>)
 8002f7a:	f7ff fb1e 	bl	80025ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002fac <prvInitialiseTaskLists+0x78>)
 8002f80:	4a05      	ldr	r2, [pc, #20]	@ (8002f98 <prvInitialiseTaskLists+0x64>)
 8002f82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f84:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb0 <prvInitialiseTaskLists+0x7c>)
 8002f86:	4a05      	ldr	r2, [pc, #20]	@ (8002f9c <prvInitialiseTaskLists+0x68>)
 8002f88:	601a      	str	r2, [r3, #0]
}
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000324 	.word	0x20000324
 8002f98:	200003b0 	.word	0x200003b0
 8002f9c:	200003c4 	.word	0x200003c4
 8002fa0:	200003e0 	.word	0x200003e0
 8002fa4:	200003f4 	.word	0x200003f4
 8002fa8:	2000040c 	.word	0x2000040c
 8002fac:	200003d8 	.word	0x200003d8
 8002fb0:	200003dc 	.word	0x200003dc

08002fb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fba:	e019      	b.n	8002ff0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002fbc:	f000 fa2c 	bl	8003418 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fc0:	4b10      	ldr	r3, [pc, #64]	@ (8003004 <prvCheckTasksWaitingTermination+0x50>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3304      	adds	r3, #4
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff fb7e 	bl	80026ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003008 <prvCheckTasksWaitingTermination+0x54>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	4a0b      	ldr	r2, [pc, #44]	@ (8003008 <prvCheckTasksWaitingTermination+0x54>)
 8002fda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800300c <prvCheckTasksWaitingTermination+0x58>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800300c <prvCheckTasksWaitingTermination+0x58>)
 8002fe4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002fe6:	f000 fa49 	bl	800347c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f810 	bl	8003010 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ff0:	4b06      	ldr	r3, [pc, #24]	@ (800300c <prvCheckTasksWaitingTermination+0x58>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1e1      	bne.n	8002fbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002ff8:	bf00      	nop
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	200003f4 	.word	0x200003f4
 8003008:	20000420 	.word	0x20000420
 800300c:	20000408 	.word	0x20000408

08003010 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800301e:	2b00      	cmp	r3, #0
 8003020:	d108      	bne.n	8003034 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fba4 	bl	8003774 <vPortFree>
				vPortFree( pxTCB );
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 fba1 	bl	8003774 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003032:	e019      	b.n	8003068 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800303a:	2b01      	cmp	r3, #1
 800303c:	d103      	bne.n	8003046 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fb98 	bl	8003774 <vPortFree>
	}
 8003044:	e010      	b.n	8003068 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800304c:	2b02      	cmp	r3, #2
 800304e:	d00b      	beq.n	8003068 <prvDeleteTCB+0x58>
	__asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	60fb      	str	r3, [r7, #12]
}
 8003062:	bf00      	nop
 8003064:	bf00      	nop
 8003066:	e7fd      	b.n	8003064 <prvDeleteTCB+0x54>
	}
 8003068:	bf00      	nop
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003076:	4b0c      	ldr	r3, [pc, #48]	@ (80030a8 <prvResetNextTaskUnblockTime+0x38>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d104      	bne.n	800308a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003080:	4b0a      	ldr	r3, [pc, #40]	@ (80030ac <prvResetNextTaskUnblockTime+0x3c>)
 8003082:	f04f 32ff 	mov.w	r2, #4294967295
 8003086:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003088:	e008      	b.n	800309c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800308a:	4b07      	ldr	r3, [pc, #28]	@ (80030a8 <prvResetNextTaskUnblockTime+0x38>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4a04      	ldr	r2, [pc, #16]	@ (80030ac <prvResetNextTaskUnblockTime+0x3c>)
 800309a:	6013      	str	r3, [r2, #0]
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	200003d8 	.word	0x200003d8
 80030ac:	20000440 	.word	0x20000440

080030b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80030b6:	4b0b      	ldr	r3, [pc, #44]	@ (80030e4 <xTaskGetSchedulerState+0x34>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d102      	bne.n	80030c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80030be:	2301      	movs	r3, #1
 80030c0:	607b      	str	r3, [r7, #4]
 80030c2:	e008      	b.n	80030d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030c4:	4b08      	ldr	r3, [pc, #32]	@ (80030e8 <xTaskGetSchedulerState+0x38>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d102      	bne.n	80030d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80030cc:	2302      	movs	r3, #2
 80030ce:	607b      	str	r3, [r7, #4]
 80030d0:	e001      	b.n	80030d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80030d2:	2300      	movs	r3, #0
 80030d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80030d6:	687b      	ldr	r3, [r7, #4]
	}
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	2000042c 	.word	0x2000042c
 80030e8:	20000448 	.word	0x20000448

080030ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80030f6:	4b29      	ldr	r3, [pc, #164]	@ (800319c <prvAddCurrentTaskToDelayedList+0xb0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030fc:	4b28      	ldr	r3, [pc, #160]	@ (80031a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3304      	adds	r3, #4
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fae3 	bl	80026ce <uxListRemove>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10b      	bne.n	8003126 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800310e:	4b24      	ldr	r3, [pc, #144]	@ (80031a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003114:	2201      	movs	r2, #1
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43da      	mvns	r2, r3
 800311c:	4b21      	ldr	r3, [pc, #132]	@ (80031a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4013      	ands	r3, r2
 8003122:	4a20      	ldr	r2, [pc, #128]	@ (80031a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003124:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312c:	d10a      	bne.n	8003144 <prvAddCurrentTaskToDelayedList+0x58>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d007      	beq.n	8003144 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003134:	4b1a      	ldr	r3, [pc, #104]	@ (80031a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3304      	adds	r3, #4
 800313a:	4619      	mov	r1, r3
 800313c:	481a      	ldr	r0, [pc, #104]	@ (80031a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800313e:	f7ff fa69 	bl	8002614 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003142:	e026      	b.n	8003192 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4413      	add	r3, r2
 800314a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800314c:	4b14      	ldr	r3, [pc, #80]	@ (80031a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	429a      	cmp	r2, r3
 800315a:	d209      	bcs.n	8003170 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800315c:	4b13      	ldr	r3, [pc, #76]	@ (80031ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b0f      	ldr	r3, [pc, #60]	@ (80031a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3304      	adds	r3, #4
 8003166:	4619      	mov	r1, r3
 8003168:	4610      	mov	r0, r2
 800316a:	f7ff fa77 	bl	800265c <vListInsert>
}
 800316e:	e010      	b.n	8003192 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003170:	4b0f      	ldr	r3, [pc, #60]	@ (80031b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4b0a      	ldr	r3, [pc, #40]	@ (80031a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3304      	adds	r3, #4
 800317a:	4619      	mov	r1, r3
 800317c:	4610      	mov	r0, r2
 800317e:	f7ff fa6d 	bl	800265c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003182:	4b0c      	ldr	r3, [pc, #48]	@ (80031b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	429a      	cmp	r2, r3
 800318a:	d202      	bcs.n	8003192 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800318c:	4a09      	ldr	r2, [pc, #36]	@ (80031b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	6013      	str	r3, [r2, #0]
}
 8003192:	bf00      	nop
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000424 	.word	0x20000424
 80031a0:	20000320 	.word	0x20000320
 80031a4:	20000428 	.word	0x20000428
 80031a8:	2000040c 	.word	0x2000040c
 80031ac:	200003dc 	.word	0x200003dc
 80031b0:	200003d8 	.word	0x200003d8
 80031b4:	20000440 	.word	0x20000440

080031b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	3b04      	subs	r3, #4
 80031c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3b04      	subs	r3, #4
 80031d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f023 0201 	bic.w	r2, r3, #1
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	3b04      	subs	r3, #4
 80031e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80031e8:	4a0c      	ldr	r2, [pc, #48]	@ (800321c <pxPortInitialiseStack+0x64>)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	3b14      	subs	r3, #20
 80031f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	3b04      	subs	r3, #4
 80031fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f06f 0202 	mvn.w	r2, #2
 8003206:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	3b20      	subs	r3, #32
 800320c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800320e:	68fb      	ldr	r3, [r7, #12]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	08003221 	.word	0x08003221

08003220 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800322a:	4b13      	ldr	r3, [pc, #76]	@ (8003278 <prvTaskExitError+0x58>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003232:	d00b      	beq.n	800324c <prvTaskExitError+0x2c>
	__asm volatile
 8003234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003238:	f383 8811 	msr	BASEPRI, r3
 800323c:	f3bf 8f6f 	isb	sy
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	60fb      	str	r3, [r7, #12]
}
 8003246:	bf00      	nop
 8003248:	bf00      	nop
 800324a:	e7fd      	b.n	8003248 <prvTaskExitError+0x28>
	__asm volatile
 800324c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	60bb      	str	r3, [r7, #8]
}
 800325e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003260:	bf00      	nop
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0fc      	beq.n	8003262 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	2000000c 	.word	0x2000000c
 800327c:	00000000 	.word	0x00000000

08003280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003280:	4b07      	ldr	r3, [pc, #28]	@ (80032a0 <pxCurrentTCBConst2>)
 8003282:	6819      	ldr	r1, [r3, #0]
 8003284:	6808      	ldr	r0, [r1, #0]
 8003286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800328a:	f380 8809 	msr	PSP, r0
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f04f 0000 	mov.w	r0, #0
 8003296:	f380 8811 	msr	BASEPRI, r0
 800329a:	4770      	bx	lr
 800329c:	f3af 8000 	nop.w

080032a0 <pxCurrentTCBConst2>:
 80032a0:	20000320 	.word	0x20000320
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop

080032a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80032a8:	4808      	ldr	r0, [pc, #32]	@ (80032cc <prvPortStartFirstTask+0x24>)
 80032aa:	6800      	ldr	r0, [r0, #0]
 80032ac:	6800      	ldr	r0, [r0, #0]
 80032ae:	f380 8808 	msr	MSP, r0
 80032b2:	f04f 0000 	mov.w	r0, #0
 80032b6:	f380 8814 	msr	CONTROL, r0
 80032ba:	b662      	cpsie	i
 80032bc:	b661      	cpsie	f
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	f3bf 8f6f 	isb	sy
 80032c6:	df00      	svc	0
 80032c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80032ca:	bf00      	nop
 80032cc:	e000ed08 	.word	0xe000ed08

080032d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80032d6:	4b47      	ldr	r3, [pc, #284]	@ (80033f4 <xPortStartScheduler+0x124>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a47      	ldr	r2, [pc, #284]	@ (80033f8 <xPortStartScheduler+0x128>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d10b      	bne.n	80032f8 <xPortStartScheduler+0x28>
	__asm volatile
 80032e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	613b      	str	r3, [r7, #16]
}
 80032f2:	bf00      	nop
 80032f4:	bf00      	nop
 80032f6:	e7fd      	b.n	80032f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80032f8:	4b3e      	ldr	r3, [pc, #248]	@ (80033f4 <xPortStartScheduler+0x124>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a3f      	ldr	r2, [pc, #252]	@ (80033fc <xPortStartScheduler+0x12c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d10b      	bne.n	800331a <xPortStartScheduler+0x4a>
	__asm volatile
 8003302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003306:	f383 8811 	msr	BASEPRI, r3
 800330a:	f3bf 8f6f 	isb	sy
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	60fb      	str	r3, [r7, #12]
}
 8003314:	bf00      	nop
 8003316:	bf00      	nop
 8003318:	e7fd      	b.n	8003316 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800331a:	4b39      	ldr	r3, [pc, #228]	@ (8003400 <xPortStartScheduler+0x130>)
 800331c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	22ff      	movs	r2, #255	@ 0xff
 800332a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	b2db      	uxtb	r3, r3
 8003332:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800333c:	b2da      	uxtb	r2, r3
 800333e:	4b31      	ldr	r3, [pc, #196]	@ (8003404 <xPortStartScheduler+0x134>)
 8003340:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003342:	4b31      	ldr	r3, [pc, #196]	@ (8003408 <xPortStartScheduler+0x138>)
 8003344:	2207      	movs	r2, #7
 8003346:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003348:	e009      	b.n	800335e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800334a:	4b2f      	ldr	r3, [pc, #188]	@ (8003408 <xPortStartScheduler+0x138>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3b01      	subs	r3, #1
 8003350:	4a2d      	ldr	r2, [pc, #180]	@ (8003408 <xPortStartScheduler+0x138>)
 8003352:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003354:	78fb      	ldrb	r3, [r7, #3]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	b2db      	uxtb	r3, r3
 800335c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003366:	2b80      	cmp	r3, #128	@ 0x80
 8003368:	d0ef      	beq.n	800334a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800336a:	4b27      	ldr	r3, [pc, #156]	@ (8003408 <xPortStartScheduler+0x138>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f1c3 0307 	rsb	r3, r3, #7
 8003372:	2b04      	cmp	r3, #4
 8003374:	d00b      	beq.n	800338e <xPortStartScheduler+0xbe>
	__asm volatile
 8003376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800337a:	f383 8811 	msr	BASEPRI, r3
 800337e:	f3bf 8f6f 	isb	sy
 8003382:	f3bf 8f4f 	dsb	sy
 8003386:	60bb      	str	r3, [r7, #8]
}
 8003388:	bf00      	nop
 800338a:	bf00      	nop
 800338c:	e7fd      	b.n	800338a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800338e:	4b1e      	ldr	r3, [pc, #120]	@ (8003408 <xPortStartScheduler+0x138>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	021b      	lsls	r3, r3, #8
 8003394:	4a1c      	ldr	r2, [pc, #112]	@ (8003408 <xPortStartScheduler+0x138>)
 8003396:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003398:	4b1b      	ldr	r3, [pc, #108]	@ (8003408 <xPortStartScheduler+0x138>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80033a0:	4a19      	ldr	r2, [pc, #100]	@ (8003408 <xPortStartScheduler+0x138>)
 80033a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80033ac:	4b17      	ldr	r3, [pc, #92]	@ (800340c <xPortStartScheduler+0x13c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a16      	ldr	r2, [pc, #88]	@ (800340c <xPortStartScheduler+0x13c>)
 80033b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80033b8:	4b14      	ldr	r3, [pc, #80]	@ (800340c <xPortStartScheduler+0x13c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a13      	ldr	r2, [pc, #76]	@ (800340c <xPortStartScheduler+0x13c>)
 80033be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80033c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80033c4:	f000 f8da 	bl	800357c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80033c8:	4b11      	ldr	r3, [pc, #68]	@ (8003410 <xPortStartScheduler+0x140>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80033ce:	f000 f8f9 	bl	80035c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80033d2:	4b10      	ldr	r3, [pc, #64]	@ (8003414 <xPortStartScheduler+0x144>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a0f      	ldr	r2, [pc, #60]	@ (8003414 <xPortStartScheduler+0x144>)
 80033d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80033dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80033de:	f7ff ff63 	bl	80032a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80033e2:	f7ff fd33 	bl	8002e4c <vTaskSwitchContext>
	prvTaskExitError();
 80033e6:	f7ff ff1b 	bl	8003220 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	e000ed00 	.word	0xe000ed00
 80033f8:	410fc271 	.word	0x410fc271
 80033fc:	410fc270 	.word	0x410fc270
 8003400:	e000e400 	.word	0xe000e400
 8003404:	2000044c 	.word	0x2000044c
 8003408:	20000450 	.word	0x20000450
 800340c:	e000ed20 	.word	0xe000ed20
 8003410:	2000000c 	.word	0x2000000c
 8003414:	e000ef34 	.word	0xe000ef34

08003418 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
	__asm volatile
 800341e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003422:	f383 8811 	msr	BASEPRI, r3
 8003426:	f3bf 8f6f 	isb	sy
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	607b      	str	r3, [r7, #4]
}
 8003430:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003432:	4b10      	ldr	r3, [pc, #64]	@ (8003474 <vPortEnterCritical+0x5c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	3301      	adds	r3, #1
 8003438:	4a0e      	ldr	r2, [pc, #56]	@ (8003474 <vPortEnterCritical+0x5c>)
 800343a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800343c:	4b0d      	ldr	r3, [pc, #52]	@ (8003474 <vPortEnterCritical+0x5c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d110      	bne.n	8003466 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003444:	4b0c      	ldr	r3, [pc, #48]	@ (8003478 <vPortEnterCritical+0x60>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00b      	beq.n	8003466 <vPortEnterCritical+0x4e>
	__asm volatile
 800344e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003452:	f383 8811 	msr	BASEPRI, r3
 8003456:	f3bf 8f6f 	isb	sy
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	603b      	str	r3, [r7, #0]
}
 8003460:	bf00      	nop
 8003462:	bf00      	nop
 8003464:	e7fd      	b.n	8003462 <vPortEnterCritical+0x4a>
	}
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	2000000c 	.word	0x2000000c
 8003478:	e000ed04 	.word	0xe000ed04

0800347c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003482:	4b12      	ldr	r3, [pc, #72]	@ (80034cc <vPortExitCritical+0x50>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10b      	bne.n	80034a2 <vPortExitCritical+0x26>
	__asm volatile
 800348a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800348e:	f383 8811 	msr	BASEPRI, r3
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	607b      	str	r3, [r7, #4]
}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	e7fd      	b.n	800349e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80034a2:	4b0a      	ldr	r3, [pc, #40]	@ (80034cc <vPortExitCritical+0x50>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	4a08      	ldr	r2, [pc, #32]	@ (80034cc <vPortExitCritical+0x50>)
 80034aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80034ac:	4b07      	ldr	r3, [pc, #28]	@ (80034cc <vPortExitCritical+0x50>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d105      	bne.n	80034c0 <vPortExitCritical+0x44>
 80034b4:	2300      	movs	r3, #0
 80034b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80034be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	2000000c 	.word	0x2000000c

080034d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80034d0:	f3ef 8009 	mrs	r0, PSP
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	4b15      	ldr	r3, [pc, #84]	@ (8003530 <pxCurrentTCBConst>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	f01e 0f10 	tst.w	lr, #16
 80034e0:	bf08      	it	eq
 80034e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80034e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ea:	6010      	str	r0, [r2, #0]
 80034ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80034f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80034f4:	f380 8811 	msr	BASEPRI, r0
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f7ff fca4 	bl	8002e4c <vTaskSwitchContext>
 8003504:	f04f 0000 	mov.w	r0, #0
 8003508:	f380 8811 	msr	BASEPRI, r0
 800350c:	bc09      	pop	{r0, r3}
 800350e:	6819      	ldr	r1, [r3, #0]
 8003510:	6808      	ldr	r0, [r1, #0]
 8003512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003516:	f01e 0f10 	tst.w	lr, #16
 800351a:	bf08      	it	eq
 800351c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003520:	f380 8809 	msr	PSP, r0
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	f3af 8000 	nop.w

08003530 <pxCurrentTCBConst>:
 8003530:	20000320 	.word	0x20000320
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003534:	bf00      	nop
 8003536:	bf00      	nop

08003538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
	__asm volatile
 800353e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003542:	f383 8811 	msr	BASEPRI, r3
 8003546:	f3bf 8f6f 	isb	sy
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	607b      	str	r3, [r7, #4]
}
 8003550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003552:	f7ff fbc1 	bl	8002cd8 <xTaskIncrementTick>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800355c:	4b06      	ldr	r3, [pc, #24]	@ (8003578 <xPortSysTickHandler+0x40>)
 800355e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	2300      	movs	r3, #0
 8003566:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	f383 8811 	msr	BASEPRI, r3
}
 800356e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003570:	bf00      	nop
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	e000ed04 	.word	0xe000ed04

0800357c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003580:	4b0b      	ldr	r3, [pc, #44]	@ (80035b0 <vPortSetupTimerInterrupt+0x34>)
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003586:	4b0b      	ldr	r3, [pc, #44]	@ (80035b4 <vPortSetupTimerInterrupt+0x38>)
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800358c:	4b0a      	ldr	r3, [pc, #40]	@ (80035b8 <vPortSetupTimerInterrupt+0x3c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a0a      	ldr	r2, [pc, #40]	@ (80035bc <vPortSetupTimerInterrupt+0x40>)
 8003592:	fba2 2303 	umull	r2, r3, r2, r3
 8003596:	099b      	lsrs	r3, r3, #6
 8003598:	4a09      	ldr	r2, [pc, #36]	@ (80035c0 <vPortSetupTimerInterrupt+0x44>)
 800359a:	3b01      	subs	r3, #1
 800359c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800359e:	4b04      	ldr	r3, [pc, #16]	@ (80035b0 <vPortSetupTimerInterrupt+0x34>)
 80035a0:	2207      	movs	r2, #7
 80035a2:	601a      	str	r2, [r3, #0]
}
 80035a4:	bf00      	nop
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	e000e010 	.word	0xe000e010
 80035b4:	e000e018 	.word	0xe000e018
 80035b8:	20000000 	.word	0x20000000
 80035bc:	10624dd3 	.word	0x10624dd3
 80035c0:	e000e014 	.word	0xe000e014

080035c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80035c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80035d4 <vPortEnableVFP+0x10>
 80035c8:	6801      	ldr	r1, [r0, #0]
 80035ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80035ce:	6001      	str	r1, [r0, #0]
 80035d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80035d2:	bf00      	nop
 80035d4:	e000ed88 	.word	0xe000ed88

080035d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08a      	sub	sp, #40	@ 0x28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80035e4:	f7ff facc 	bl	8002b80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80035e8:	4b5c      	ldr	r3, [pc, #368]	@ (800375c <pvPortMalloc+0x184>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80035f0:	f000 f924 	bl	800383c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80035f4:	4b5a      	ldr	r3, [pc, #360]	@ (8003760 <pvPortMalloc+0x188>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f040 8095 	bne.w	800372c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d01e      	beq.n	8003646 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003608:	2208      	movs	r2, #8
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4413      	add	r3, r2
 800360e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	2b00      	cmp	r3, #0
 8003618:	d015      	beq.n	8003646 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f023 0307 	bic.w	r3, r3, #7
 8003620:	3308      	adds	r3, #8
 8003622:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00b      	beq.n	8003646 <pvPortMalloc+0x6e>
	__asm volatile
 800362e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003632:	f383 8811 	msr	BASEPRI, r3
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	617b      	str	r3, [r7, #20]
}
 8003640:	bf00      	nop
 8003642:	bf00      	nop
 8003644:	e7fd      	b.n	8003642 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d06f      	beq.n	800372c <pvPortMalloc+0x154>
 800364c:	4b45      	ldr	r3, [pc, #276]	@ (8003764 <pvPortMalloc+0x18c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	429a      	cmp	r2, r3
 8003654:	d86a      	bhi.n	800372c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003656:	4b44      	ldr	r3, [pc, #272]	@ (8003768 <pvPortMalloc+0x190>)
 8003658:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800365a:	4b43      	ldr	r3, [pc, #268]	@ (8003768 <pvPortMalloc+0x190>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003660:	e004      	b.n	800366c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003664:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800366c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	429a      	cmp	r2, r3
 8003674:	d903      	bls.n	800367e <pvPortMalloc+0xa6>
 8003676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f1      	bne.n	8003662 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800367e:	4b37      	ldr	r3, [pc, #220]	@ (800375c <pvPortMalloc+0x184>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003684:	429a      	cmp	r2, r3
 8003686:	d051      	beq.n	800372c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2208      	movs	r2, #8
 800368e:	4413      	add	r3, r2
 8003690:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	1ad2      	subs	r2, r2, r3
 80036a2:	2308      	movs	r3, #8
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d920      	bls.n	80036ec <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80036aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4413      	add	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00b      	beq.n	80036d4 <pvPortMalloc+0xfc>
	__asm volatile
 80036bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	613b      	str	r3, [r7, #16]
}
 80036ce:	bf00      	nop
 80036d0:	bf00      	nop
 80036d2:	e7fd      	b.n	80036d0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80036d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	1ad2      	subs	r2, r2, r3
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80036e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80036e6:	69b8      	ldr	r0, [r7, #24]
 80036e8:	f000 f90a 	bl	8003900 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80036ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003764 <pvPortMalloc+0x18c>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003764 <pvPortMalloc+0x18c>)
 80036f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80036fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003764 <pvPortMalloc+0x18c>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4b1b      	ldr	r3, [pc, #108]	@ (800376c <pvPortMalloc+0x194>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d203      	bcs.n	800370e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003706:	4b17      	ldr	r3, [pc, #92]	@ (8003764 <pvPortMalloc+0x18c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a18      	ldr	r2, [pc, #96]	@ (800376c <pvPortMalloc+0x194>)
 800370c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800370e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	4b13      	ldr	r3, [pc, #76]	@ (8003760 <pvPortMalloc+0x188>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	431a      	orrs	r2, r3
 8003718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800371c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003722:	4b13      	ldr	r3, [pc, #76]	@ (8003770 <pvPortMalloc+0x198>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	3301      	adds	r3, #1
 8003728:	4a11      	ldr	r2, [pc, #68]	@ (8003770 <pvPortMalloc+0x198>)
 800372a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800372c:	f7ff fa36 	bl	8002b9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00b      	beq.n	8003752 <pvPortMalloc+0x17a>
	__asm volatile
 800373a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800373e:	f383 8811 	msr	BASEPRI, r3
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	f3bf 8f4f 	dsb	sy
 800374a:	60fb      	str	r3, [r7, #12]
}
 800374c:	bf00      	nop
 800374e:	bf00      	nop
 8003750:	e7fd      	b.n	800374e <pvPortMalloc+0x176>
	return pvReturn;
 8003752:	69fb      	ldr	r3, [r7, #28]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3728      	adds	r7, #40	@ 0x28
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	2000405c 	.word	0x2000405c
 8003760:	20004070 	.word	0x20004070
 8003764:	20004060 	.word	0x20004060
 8003768:	20004054 	.word	0x20004054
 800376c:	20004064 	.word	0x20004064
 8003770:	20004068 	.word	0x20004068

08003774 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d04f      	beq.n	8003826 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003786:	2308      	movs	r3, #8
 8003788:	425b      	negs	r3, r3
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4413      	add	r3, r2
 800378e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	4b25      	ldr	r3, [pc, #148]	@ (8003830 <vPortFree+0xbc>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4013      	ands	r3, r2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10b      	bne.n	80037ba <vPortFree+0x46>
	__asm volatile
 80037a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a6:	f383 8811 	msr	BASEPRI, r3
 80037aa:	f3bf 8f6f 	isb	sy
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	60fb      	str	r3, [r7, #12]
}
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop
 80037b8:	e7fd      	b.n	80037b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00b      	beq.n	80037da <vPortFree+0x66>
	__asm volatile
 80037c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c6:	f383 8811 	msr	BASEPRI, r3
 80037ca:	f3bf 8f6f 	isb	sy
 80037ce:	f3bf 8f4f 	dsb	sy
 80037d2:	60bb      	str	r3, [r7, #8]
}
 80037d4:	bf00      	nop
 80037d6:	bf00      	nop
 80037d8:	e7fd      	b.n	80037d6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	4b14      	ldr	r3, [pc, #80]	@ (8003830 <vPortFree+0xbc>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01e      	beq.n	8003826 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d11a      	bne.n	8003826 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003830 <vPortFree+0xbc>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	43db      	mvns	r3, r3
 80037fa:	401a      	ands	r2, r3
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003800:	f7ff f9be 	bl	8002b80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	4b0a      	ldr	r3, [pc, #40]	@ (8003834 <vPortFree+0xc0>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4413      	add	r3, r2
 800380e:	4a09      	ldr	r2, [pc, #36]	@ (8003834 <vPortFree+0xc0>)
 8003810:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003812:	6938      	ldr	r0, [r7, #16]
 8003814:	f000 f874 	bl	8003900 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003818:	4b07      	ldr	r3, [pc, #28]	@ (8003838 <vPortFree+0xc4>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3301      	adds	r3, #1
 800381e:	4a06      	ldr	r2, [pc, #24]	@ (8003838 <vPortFree+0xc4>)
 8003820:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003822:	f7ff f9bb 	bl	8002b9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003826:	bf00      	nop
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20004070 	.word	0x20004070
 8003834:	20004060 	.word	0x20004060
 8003838:	2000406c 	.word	0x2000406c

0800383c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003842:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003846:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003848:	4b27      	ldr	r3, [pc, #156]	@ (80038e8 <prvHeapInit+0xac>)
 800384a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00c      	beq.n	8003870 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	3307      	adds	r3, #7
 800385a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0307 	bic.w	r3, r3, #7
 8003862:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	4a1f      	ldr	r2, [pc, #124]	@ (80038e8 <prvHeapInit+0xac>)
 800386c:	4413      	add	r3, r2
 800386e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003874:	4a1d      	ldr	r2, [pc, #116]	@ (80038ec <prvHeapInit+0xb0>)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800387a:	4b1c      	ldr	r3, [pc, #112]	@ (80038ec <prvHeapInit+0xb0>)
 800387c:	2200      	movs	r2, #0
 800387e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	4413      	add	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003888:	2208      	movs	r2, #8
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0307 	bic.w	r3, r3, #7
 8003896:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4a15      	ldr	r2, [pc, #84]	@ (80038f0 <prvHeapInit+0xb4>)
 800389c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800389e:	4b14      	ldr	r3, [pc, #80]	@ (80038f0 <prvHeapInit+0xb4>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2200      	movs	r2, #0
 80038a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80038a6:	4b12      	ldr	r3, [pc, #72]	@ (80038f0 <prvHeapInit+0xb4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	1ad2      	subs	r2, r2, r3
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80038bc:	4b0c      	ldr	r3, [pc, #48]	@ (80038f0 <prvHeapInit+0xb4>)
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	4a0a      	ldr	r2, [pc, #40]	@ (80038f4 <prvHeapInit+0xb8>)
 80038ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	4a09      	ldr	r2, [pc, #36]	@ (80038f8 <prvHeapInit+0xbc>)
 80038d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80038d4:	4b09      	ldr	r3, [pc, #36]	@ (80038fc <prvHeapInit+0xc0>)
 80038d6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80038da:	601a      	str	r2, [r3, #0]
}
 80038dc:	bf00      	nop
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	20000454 	.word	0x20000454
 80038ec:	20004054 	.word	0x20004054
 80038f0:	2000405c 	.word	0x2000405c
 80038f4:	20004064 	.word	0x20004064
 80038f8:	20004060 	.word	0x20004060
 80038fc:	20004070 	.word	0x20004070

08003900 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003908:	4b28      	ldr	r3, [pc, #160]	@ (80039ac <prvInsertBlockIntoFreeList+0xac>)
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	e002      	b.n	8003914 <prvInsertBlockIntoFreeList+0x14>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	429a      	cmp	r2, r3
 800391c:	d8f7      	bhi.n	800390e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	4413      	add	r3, r2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	429a      	cmp	r2, r3
 800392e:	d108      	bne.n	8003942 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	441a      	add	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	441a      	add	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d118      	bne.n	8003988 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	4b15      	ldr	r3, [pc, #84]	@ (80039b0 <prvInsertBlockIntoFreeList+0xb0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d00d      	beq.n	800397e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	441a      	add	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	e008      	b.n	8003990 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800397e:	4b0c      	ldr	r3, [pc, #48]	@ (80039b0 <prvInsertBlockIntoFreeList+0xb0>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	e003      	b.n	8003990 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	429a      	cmp	r2, r3
 8003996:	d002      	beq.n	800399e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800399e:	bf00      	nop
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	20004054 	.word	0x20004054
 80039b0:	2000405c 	.word	0x2000405c

080039b4 <memset>:
 80039b4:	4402      	add	r2, r0
 80039b6:	4603      	mov	r3, r0
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d100      	bne.n	80039be <memset+0xa>
 80039bc:	4770      	bx	lr
 80039be:	f803 1b01 	strb.w	r1, [r3], #1
 80039c2:	e7f9      	b.n	80039b8 <memset+0x4>

080039c4 <__libc_init_array>:
 80039c4:	b570      	push	{r4, r5, r6, lr}
 80039c6:	4d0d      	ldr	r5, [pc, #52]	@ (80039fc <__libc_init_array+0x38>)
 80039c8:	4c0d      	ldr	r4, [pc, #52]	@ (8003a00 <__libc_init_array+0x3c>)
 80039ca:	1b64      	subs	r4, r4, r5
 80039cc:	10a4      	asrs	r4, r4, #2
 80039ce:	2600      	movs	r6, #0
 80039d0:	42a6      	cmp	r6, r4
 80039d2:	d109      	bne.n	80039e8 <__libc_init_array+0x24>
 80039d4:	4d0b      	ldr	r5, [pc, #44]	@ (8003a04 <__libc_init_array+0x40>)
 80039d6:	4c0c      	ldr	r4, [pc, #48]	@ (8003a08 <__libc_init_array+0x44>)
 80039d8:	f000 f818 	bl	8003a0c <_init>
 80039dc:	1b64      	subs	r4, r4, r5
 80039de:	10a4      	asrs	r4, r4, #2
 80039e0:	2600      	movs	r6, #0
 80039e2:	42a6      	cmp	r6, r4
 80039e4:	d105      	bne.n	80039f2 <__libc_init_array+0x2e>
 80039e6:	bd70      	pop	{r4, r5, r6, pc}
 80039e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ec:	4798      	blx	r3
 80039ee:	3601      	adds	r6, #1
 80039f0:	e7ee      	b.n	80039d0 <__libc_init_array+0xc>
 80039f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f6:	4798      	blx	r3
 80039f8:	3601      	adds	r6, #1
 80039fa:	e7f2      	b.n	80039e2 <__libc_init_array+0x1e>
 80039fc:	08003ab8 	.word	0x08003ab8
 8003a00:	08003ab8 	.word	0x08003ab8
 8003a04:	08003ab8 	.word	0x08003ab8
 8003a08:	08003abc 	.word	0x08003abc

08003a0c <_init>:
 8003a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a0e:	bf00      	nop
 8003a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a12:	bc08      	pop	{r3}
 8003a14:	469e      	mov	lr, r3
 8003a16:	4770      	bx	lr

08003a18 <_fini>:
 8003a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1a:	bf00      	nop
 8003a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a1e:	bc08      	pop	{r3}
 8003a20:	469e      	mov	lr, r3
 8003a22:	4770      	bx	lr
