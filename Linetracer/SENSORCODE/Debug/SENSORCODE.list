
SENSORCODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cfc  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003e94  08003e94  00004e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ecc  08003ecc  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003ecc  08003ecc  00004ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ed4  08003ed4  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ed4  08003ed4  00004ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ed8  08003ed8  00004ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003edc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000068  08003f44  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08003f44  000052bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c392  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b67  00000000  00000000  0001142a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00012f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b8  00000000  00000000  00013c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170bc  00000000  00000000  000145c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbac  00000000  00000000  0002b67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fe81  00000000  00000000  00039228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c90a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aa4  00000000  00000000  000c90ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000ccb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003e7c 	.word	0x08003e7c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	08003e7c 	.word	0x08003e7c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fcfa 	bl	8000ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f856 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f9e6 	bl	80008a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f9ba 	bl	8000850 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004dc:	f000 f95a 	bl	8000794 <MX_TIM2_Init>
  MX_TIM1_Init();
 80004e0:	f000 f8b8 	bl	8000654 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004e4:	2100      	movs	r1, #0
 80004e6:	4820      	ldr	r0, [pc, #128]	@ (8000568 <main+0xa0>)
 80004e8:	f001 fde0 	bl	80020ac <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, &rx2char,1);
 80004ec:	2201      	movs	r2, #1
 80004ee:	491f      	ldr	r1, [pc, #124]	@ (800056c <main+0xa4>)
 80004f0:	481f      	ldr	r0, [pc, #124]	@ (8000570 <main+0xa8>)
 80004f2:	f002 fc88 	bl	8002e06 <HAL_UART_Receive_IT>
  printf("start main2()\r\n");
 80004f6:	481f      	ldr	r0, [pc, #124]	@ (8000574 <main+0xac>)
 80004f8:	f003 f92c 	bl	8003754 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
  	distance = Measure_Distance();
 80004fc:	f000 fa4c 	bl	8000998 <Measure_Distance>
 8000500:	eef0 7a40 	vmov.f32	s15, s0
 8000504:	4b1c      	ldr	r3, [pc, #112]	@ (8000578 <main+0xb0>)
 8000506:	edc3 7a00 	vstr	s15, [r3]
  	if(distance<10){
 800050a:	4b1b      	ldr	r3, [pc, #108]	@ (8000578 <main+0xb0>)
 800050c:	edd3 7a00 	vldr	s15, [r3]
 8000510:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800051c:	d520      	bpl.n	8000560 <main+0x98>
  		Set_Servo_Angle(0);
 800051e:	2000      	movs	r0, #0
 8000520:	f000 fa94 	bl	8000a4c <Set_Servo_Angle>
  		HAL_Delay(2000);
 8000524:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000528:	f000 fd3e 	bl	8000fa8 <HAL_Delay>
  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	2110      	movs	r1, #16
 8000530:	4812      	ldr	r0, [pc, #72]	@ (800057c <main+0xb4>)
 8000532:	f000 ffdf 	bl	80014f4 <HAL_GPIO_WritePin>
  		HAL_Delay(5000);
 8000536:	f241 3088 	movw	r0, #5000	@ 0x1388
 800053a:	f000 fd35 	bl	8000fa8 <HAL_Delay>
  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	2110      	movs	r1, #16
 8000542:	480e      	ldr	r0, [pc, #56]	@ (800057c <main+0xb4>)
 8000544:	f000 ffd6 	bl	80014f4 <HAL_GPIO_WritePin>
  		HAL_Delay(2000);
 8000548:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800054c:	f000 fd2c 	bl	8000fa8 <HAL_Delay>
  		Set_Servo_Angle(90);
 8000550:	205a      	movs	r0, #90	@ 0x5a
 8000552:	f000 fa7b 	bl	8000a4c <Set_Servo_Angle>
  		HAL_Delay(5000);
 8000556:	f241 3088 	movw	r0, #5000	@ 0x1388
 800055a:	f000 fd25 	bl	8000fa8 <HAL_Delay>
 800055e:	e7cd      	b.n	80004fc <main+0x34>

  	}
  	else{
  		Set_Servo_Angle(90);
 8000560:	205a      	movs	r0, #90	@ 0x5a
 8000562:	f000 fa73 	bl	8000a4c <Set_Servo_Angle>
  	distance = Measure_Distance();
 8000566:	e7c9      	b.n	80004fc <main+0x34>
 8000568:	20000084 	.word	0x20000084
 800056c:	20000164 	.word	0x20000164
 8000570:	20000114 	.word	0x20000114
 8000574:	08003e94 	.word	0x08003e94
 8000578:	20000160 	.word	0x20000160
 800057c:	40020000 	.word	0x40020000

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	@ 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	2230      	movs	r2, #48	@ 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f003 f9c0 	bl	8003914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	4b28      	ldr	r3, [pc, #160]	@ (800064c <SystemClock_Config+0xcc>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ac:	4a27      	ldr	r2, [pc, #156]	@ (800064c <SystemClock_Config+0xcc>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b4:	4b25      	ldr	r3, [pc, #148]	@ (800064c <SystemClock_Config+0xcc>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b22      	ldr	r3, [pc, #136]	@ (8000650 <SystemClock_Config+0xd0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a21      	ldr	r2, [pc, #132]	@ (8000650 <SystemClock_Config+0xd0>)
 80005ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000650 <SystemClock_Config+0xd0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	2301      	movs	r3, #1
 80005e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e4:	2310      	movs	r3, #16
 80005e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e8:	2302      	movs	r3, #2
 80005ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ec:	2300      	movs	r3, #0
 80005ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005f0:	2310      	movs	r3, #16
 80005f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005fa:	2304      	movs	r3, #4
 80005fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005fe:	2304      	movs	r3, #4
 8000600:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	4618      	mov	r0, r3
 8000608:	f000 ff8e 	bl	8001528 <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000612:	f000 fa63 	bl	8000adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2302      	movs	r3, #2
 800061c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000622:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000626:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2102      	movs	r1, #2
 8000632:	4618      	mov	r0, r3
 8000634:	f001 f9f0 	bl	8001a18 <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800063e:	f000 fa4d 	bl	8000adc <Error_Handler>
  }
}
 8000642:	bf00      	nop
 8000644:	3750      	adds	r7, #80	@ 0x50
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b096      	sub	sp, #88	@ 0x58
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800065a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000668:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]
 8000682:	615a      	str	r2, [r3, #20]
 8000684:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2220      	movs	r2, #32
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f003 f941 	bl	8003914 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000692:	4b3e      	ldr	r3, [pc, #248]	@ (800078c <MX_TIM1_Init+0x138>)
 8000694:	4a3e      	ldr	r2, [pc, #248]	@ (8000790 <MX_TIM1_Init+0x13c>)
 8000696:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8000698:	4b3c      	ldr	r3, [pc, #240]	@ (800078c <MX_TIM1_Init+0x138>)
 800069a:	2253      	movs	r2, #83	@ 0x53
 800069c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069e:	4b3b      	ldr	r3, [pc, #236]	@ (800078c <MX_TIM1_Init+0x138>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80006a4:	4b39      	ldr	r3, [pc, #228]	@ (800078c <MX_TIM1_Init+0x138>)
 80006a6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80006aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ac:	4b37      	ldr	r3, [pc, #220]	@ (800078c <MX_TIM1_Init+0x138>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006b2:	4b36      	ldr	r3, [pc, #216]	@ (800078c <MX_TIM1_Init+0x138>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b8:	4b34      	ldr	r3, [pc, #208]	@ (800078c <MX_TIM1_Init+0x138>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006be:	4833      	ldr	r0, [pc, #204]	@ (800078c <MX_TIM1_Init+0x138>)
 80006c0:	f001 fbca 	bl	8001e58 <HAL_TIM_Base_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80006ca:	f000 fa07 	bl	8000adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006d4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80006d8:	4619      	mov	r1, r3
 80006da:	482c      	ldr	r0, [pc, #176]	@ (800078c <MX_TIM1_Init+0x138>)
 80006dc:	f001 fe58 	bl	8002390 <HAL_TIM_ConfigClockSource>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80006e6:	f000 f9f9 	bl	8000adc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006ea:	4828      	ldr	r0, [pc, #160]	@ (800078c <MX_TIM1_Init+0x138>)
 80006ec:	f001 fc85 	bl	8001ffa <HAL_TIM_PWM_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80006f6:	f000 f9f1 	bl	8000adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fa:	2300      	movs	r3, #0
 80006fc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000702:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000706:	4619      	mov	r1, r3
 8000708:	4820      	ldr	r0, [pc, #128]	@ (800078c <MX_TIM1_Init+0x138>)
 800070a:	f002 f9e1 	bl	8002ad0 <HAL_TIMEx_MasterConfigSynchronization>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000714:	f000 f9e2 	bl	8000adc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000718:	2360      	movs	r3, #96	@ 0x60
 800071a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000720:	2300      	movs	r3, #0
 8000722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000724:	2300      	movs	r3, #0
 8000726:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000728:	2300      	movs	r3, #0
 800072a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800072c:	2300      	movs	r3, #0
 800072e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000730:	2300      	movs	r3, #0
 8000732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000738:	2200      	movs	r2, #0
 800073a:	4619      	mov	r1, r3
 800073c:	4813      	ldr	r0, [pc, #76]	@ (800078c <MX_TIM1_Init+0x138>)
 800073e:	f001 fd65 	bl	800220c <HAL_TIM_PWM_ConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000748:	f000 f9c8 	bl	8000adc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000760:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000764:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000766:	2300      	movs	r3, #0
 8000768:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	4619      	mov	r1, r3
 800076e:	4807      	ldr	r0, [pc, #28]	@ (800078c <MX_TIM1_Init+0x138>)
 8000770:	f002 fa1c 	bl	8002bac <HAL_TIMEx_ConfigBreakDeadTime>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800077a:	f000 f9af 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800077e:	4803      	ldr	r0, [pc, #12]	@ (800078c <MX_TIM1_Init+0x138>)
 8000780:	f000 fa10 	bl	8000ba4 <HAL_TIM_MspPostInit>

}
 8000784:	bf00      	nop
 8000786:	3758      	adds	r7, #88	@ 0x58
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000084 	.word	0x20000084
 8000790:	40010000 	.word	0x40010000

08000794 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079a:	f107 0310 	add.w	r3, r7, #16
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007b2:	4b25      	ldr	r3, [pc, #148]	@ (8000848 <MX_TIM2_Init+0xb4>)
 80007b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80007ba:	4b23      	ldr	r3, [pc, #140]	@ (8000848 <MX_TIM2_Init+0xb4>)
 80007bc:	2253      	movs	r2, #83	@ 0x53
 80007be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c0:	4b21      	ldr	r3, [pc, #132]	@ (8000848 <MX_TIM2_Init+0xb4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 80007c6:	4b20      	ldr	r3, [pc, #128]	@ (8000848 <MX_TIM2_Init+0xb4>)
 80007c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000848 <MX_TIM2_Init+0xb4>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000848 <MX_TIM2_Init+0xb4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007da:	481b      	ldr	r0, [pc, #108]	@ (8000848 <MX_TIM2_Init+0xb4>)
 80007dc:	f001 fb3c 	bl	8001e58 <HAL_TIM_Base_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007e6:	f000 f979 	bl	8000adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	4619      	mov	r1, r3
 80007f6:	4814      	ldr	r0, [pc, #80]	@ (8000848 <MX_TIM2_Init+0xb4>)
 80007f8:	f001 fdca 	bl	8002390 <HAL_TIM_ConfigClockSource>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000802:	f000 f96b 	bl	8000adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	4619      	mov	r1, r3
 8000814:	480c      	ldr	r0, [pc, #48]	@ (8000848 <MX_TIM2_Init+0xb4>)
 8000816:	f002 f95b 	bl	8002ad0 <HAL_TIMEx_MasterConfigSynchronization>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000820:	f000 f95c 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  __HAL_RCC_TIM2_CLK_ENABLE(); // TIM2 ?���???????????? ?��?��?��
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	4b08      	ldr	r3, [pc, #32]	@ (800084c <MX_TIM2_Init+0xb8>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082c:	4a07      	ldr	r2, [pc, #28]	@ (800084c <MX_TIM2_Init+0xb8>)
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	6413      	str	r3, [r2, #64]	@ 0x40
 8000834:	4b05      	ldr	r3, [pc, #20]	@ (800084c <MX_TIM2_Init+0xb8>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END TIM2_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	3720      	adds	r7, #32
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200000cc 	.word	0x200000cc
 800084c:	40023800 	.word	0x40023800

08000850 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000854:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 8000856:	4a12      	ldr	r2, [pc, #72]	@ (80008a0 <MX_USART2_UART_Init+0x50>)
 8000858:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800085a:	4b10      	ldr	r3, [pc, #64]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_USART2_UART_Init+0x4c>)
 8000888:	f002 f9e2 	bl	8002c50 <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000892:	f000 f923 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000114 	.word	0x20000114
 80008a0:	40004400 	.word	0x40004400

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	@ 0x28
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	4b33      	ldr	r3, [pc, #204]	@ (800098c <MX_GPIO_Init+0xe8>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a32      	ldr	r2, [pc, #200]	@ (800098c <MX_GPIO_Init+0xe8>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b30      	ldr	r3, [pc, #192]	@ (800098c <MX_GPIO_Init+0xe8>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	4b2c      	ldr	r3, [pc, #176]	@ (800098c <MX_GPIO_Init+0xe8>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a2b      	ldr	r2, [pc, #172]	@ (800098c <MX_GPIO_Init+0xe8>)
 80008e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b29      	ldr	r3, [pc, #164]	@ (800098c <MX_GPIO_Init+0xe8>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	4b25      	ldr	r3, [pc, #148]	@ (800098c <MX_GPIO_Init+0xe8>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a24      	ldr	r2, [pc, #144]	@ (800098c <MX_GPIO_Init+0xe8>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b22      	ldr	r3, [pc, #136]	@ (800098c <MX_GPIO_Init+0xe8>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b1e      	ldr	r3, [pc, #120]	@ (800098c <MX_GPIO_Init+0xe8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a1d      	ldr	r2, [pc, #116]	@ (800098c <MX_GPIO_Init+0xe8>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b1b      	ldr	r3, [pc, #108]	@ (800098c <MX_GPIO_Init+0xe8>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Sensor_Output_Pin|GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2131      	movs	r1, #49	@ 0x31
 800092e:	4818      	ldr	r0, [pc, #96]	@ (8000990 <MX_GPIO_Init+0xec>)
 8000930:	f000 fde0 	bl	80014f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000934:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800093a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800093e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4619      	mov	r1, r3
 800094a:	4812      	ldr	r0, [pc, #72]	@ (8000994 <MX_GPIO_Init+0xf0>)
 800094c:	f000 fc36 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor_Output_Pin PA4 LD2_Pin */
  GPIO_InitStruct.Pin = Sensor_Output_Pin|GPIO_PIN_4|LD2_Pin;
 8000950:	2331      	movs	r3, #49	@ 0x31
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4619      	mov	r1, r3
 8000966:	480a      	ldr	r0, [pc, #40]	@ (8000990 <MX_GPIO_Init+0xec>)
 8000968:	f000 fc28 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Sensor_Input_Pin */
  GPIO_InitStruct.Pin = Sensor_Input_Pin;
 800096c:	2302      	movs	r3, #2
 800096e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000974:	2302      	movs	r3, #2
 8000976:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sensor_Input_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	4804      	ldr	r0, [pc, #16]	@ (8000990 <MX_GPIO_Init+0xec>)
 8000980:	f000 fc1c 	bl	80011bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000984:	bf00      	nop
 8000986:	3728      	adds	r7, #40	@ 0x28
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40023800 	.word	0x40023800
 8000990:	40020000 	.word	0x40020000
 8000994:	40020800 	.word	0x40020800

08000998 <Measure_Distance>:

/* USER CODE BEGIN 4 */
float Measure_Distance(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
    // 1. ?��리거 ?? HIGH�?????????????? 10us ?��?�� ?���??????????????
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);  // Trig ?? HIGH
 800099c:	2201      	movs	r2, #1
 800099e:	2101      	movs	r1, #1
 80009a0:	4823      	ldr	r0, [pc, #140]	@ (8000a30 <Measure_Distance+0x98>)
 80009a2:	f000 fda7 	bl	80014f4 <HAL_GPIO_WritePin>
    HAL_Delay(10);  // 10us ?��?�� ??�??????????????
 80009a6:	200a      	movs	r0, #10
 80009a8:	f000 fafe 	bl	8000fa8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);  // Trig ?? LOW
 80009ac:	2200      	movs	r2, #0
 80009ae:	2101      	movs	r1, #1
 80009b0:	481f      	ldr	r0, [pc, #124]	@ (8000a30 <Measure_Distance+0x98>)
 80009b2:	f000 fd9f 	bl	80014f4 <HAL_GPIO_WritePin>
    printf("TEST10\r\n");
 80009b6:	481f      	ldr	r0, [pc, #124]	@ (8000a34 <Measure_Distance+0x9c>)
 80009b8:	f002 fecc 	bl	8003754 <puts>
    // 2. ?���?????????????? ?? HIGH ?��?�� ??�??????????????
    while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET);
 80009bc:	bf00      	nop
 80009be:	2102      	movs	r1, #2
 80009c0:	481b      	ldr	r0, [pc, #108]	@ (8000a30 <Measure_Distance+0x98>)
 80009c2:	f000 fd7f 	bl	80014c4 <HAL_GPIO_ReadPin>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d0f8      	beq.n	80009be <Measure_Distance+0x26>
    __HAL_TIM_SET_COUNTER(&htim2, 0);  // ???���???????? 카운?���???????? 0?���???????? ?��?��
 80009cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <Measure_Distance+0xa0>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2200      	movs	r2, #0
 80009d2:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim2);        // ???���???????? ?��?��
 80009d4:	4818      	ldr	r0, [pc, #96]	@ (8000a38 <Measure_Distance+0xa0>)
 80009d6:	f001 fa8f 	bl	8001ef8 <HAL_TIM_Base_Start>
//    printf("TEST11\r\n");
    // 3. ?���?????????????? ?? LOW ?��?�� ??�??????????????
    while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET);
 80009da:	bf00      	nop
 80009dc:	2102      	movs	r1, #2
 80009de:	4814      	ldr	r0, [pc, #80]	@ (8000a30 <Measure_Distance+0x98>)
 80009e0:	f000 fd70 	bl	80014c4 <HAL_GPIO_ReadPin>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d0f8      	beq.n	80009dc <Measure_Distance+0x44>
    endTime = __HAL_TIM_GET_COUNTER(&htim2);  // ?���?????????????? ?��?�� 종료 ?���?????????????? 기록
 80009ea:	4b13      	ldr	r3, [pc, #76]	@ (8000a38 <Measure_Distance+0xa0>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009f0:	4a12      	ldr	r2, [pc, #72]	@ (8000a3c <Measure_Distance+0xa4>)
 80009f2:	6013      	str	r3, [r2, #0]
    HAL_TIM_Base_Stop(&htim2);  // ???���???????? ?���????????
 80009f4:	4810      	ldr	r0, [pc, #64]	@ (8000a38 <Measure_Distance+0xa0>)
 80009f6:	f001 fad9 	bl	8001fac <HAL_TIM_Base_Stop>
    printf("TEST12\r\n");
 80009fa:	4811      	ldr	r0, [pc, #68]	@ (8000a40 <Measure_Distance+0xa8>)
 80009fc:	f002 feaa 	bl	8003754 <puts>
    // 4. ?���?????????????? �?????????????? 계산 �?????????????? 거리 계산
    //float timeElapsed = (float)(endTime - startTime);  // 경과 ?���?????????????? (마이?��로초)
    distance = (endTime * 0.0343f) / 2;  // 거리 계산 (?��?��?? 343m/s)
 8000a00:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <Measure_Distance+0xa4>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	ee07 3a90 	vmov	s15, r3
 8000a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a0c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000a44 <Measure_Distance+0xac>
 8000a10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a14:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000a18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <Measure_Distance+0xb0>)
 8000a1e:	edc3 7a00 	vstr	s15, [r3]

    return distance;
 8000a22:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <Measure_Distance+0xb0>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	ee07 3a90 	vmov	s15, r3
}
 8000a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40020000 	.word	0x40020000
 8000a34:	08003ea4 	.word	0x08003ea4
 8000a38:	200000cc 	.word	0x200000cc
 8000a3c:	2000015c 	.word	0x2000015c
 8000a40:	08003eac 	.word	0x08003eac
 8000a44:	3d0c7e28 	.word	0x3d0c7e28
 8000a48:	20000160 	.word	0x20000160

08000a4c <Set_Servo_Angle>:
void Set_Servo_Angle(uint8_t angle)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
    // 각도?�� ?��?�� ?��?�� ?�� 계산 (?��: 1ms ~ 2ms 범위�???? ?��?��)
		float pulse_ms = 0.5f + (angle * 2.0f / 180.0f); // 범위: 1ms ~ 2ms
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	ee07 3a90 	vmov	s15, r3
 8000a5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a60:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000a64:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000aac <Set_Servo_Angle+0x60>
 8000a68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a6c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000a70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a74:	edc7 7a03 	vstr	s15, [r7, #12]
	    // TIM1?�� PWM ???�� ?��?��?��?�� 맞춰 ?��?�� ?�� �?????��
	    // TIM1 주기 = 20ms (20,000µs)
	    uint32_t pulse = (uint32_t)((pulse_ms / 20.0f) * 20000.0f);
 8000a78:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a7c:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8000a80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a84:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000ab0 <Set_Servo_Angle+0x64>
 8000a88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a90:	ee17 3a90 	vmov	r3, s15
 8000a94:	60bb      	str	r3, [r7, #8]

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 8000a96:	4b07      	ldr	r3, [pc, #28]	@ (8000ab4 <Set_Servo_Angle+0x68>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000a9e:	bf00      	nop
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	43340000 	.word	0x43340000
 8000ab0:	469c4000 	.word	0x469c4000
 8000ab4:	20000084 	.word	0x20000084

08000ab8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART6 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000ac0:	1d39      	adds	r1, r7, #4
 8000ac2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4803      	ldr	r0, [pc, #12]	@ (8000ad8 <__io_putchar+0x20>)
 8000aca:	f002 f911 	bl	8002cf0 <HAL_UART_Transmit>

  return ch;
 8000ace:	687b      	ldr	r3, [r7, #4]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000114 	.word	0x20000114

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <Error_Handler+0x8>

08000ae8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000afe:	4b0d      	ldr	r3, [pc, #52]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	4a08      	ldr	r2, [pc, #32]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1a:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b26:	2007      	movs	r0, #7
 8000b28:	f000 fb14 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40023800 	.word	0x40023800

08000b38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a15      	ldr	r2, [pc, #84]	@ (8000b9c <HAL_TIM_Base_MspInit+0x64>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d10e      	bne.n	8000b68 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x68>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b52:	4a13      	ldr	r2, [pc, #76]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x68>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x68>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b66:	e012      	b.n	8000b8e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b70:	d10d      	bne.n	8000b8e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x68>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	4a09      	ldr	r2, [pc, #36]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x68>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b82:	4b07      	ldr	r3, [pc, #28]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x68>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
}
 8000b8e:	bf00      	nop
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40010000 	.word	0x40010000
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a12      	ldr	r2, [pc, #72]	@ (8000c0c <HAL_TIM_MspPostInit+0x68>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d11e      	bne.n	8000c04 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <HAL_TIM_MspPostInit+0x6c>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a10      	ldr	r2, [pc, #64]	@ (8000c10 <HAL_TIM_MspPostInit+0x6c>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <HAL_TIM_MspPostInit+0x6c>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000be2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000be6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4805      	ldr	r0, [pc, #20]	@ (8000c14 <HAL_TIM_MspPostInit+0x70>)
 8000c00:	f000 fadc 	bl	80011bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c04:	bf00      	nop
 8000c06:	3720      	adds	r7, #32
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40010000 	.word	0x40010000
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020000 	.word	0x40020000

08000c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	@ 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a19      	ldr	r2, [pc, #100]	@ (8000c9c <HAL_UART_MspInit+0x84>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d12b      	bne.n	8000c92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <HAL_UART_MspInit+0x88>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	4a17      	ldr	r2, [pc, #92]	@ (8000ca0 <HAL_UART_MspInit+0x88>)
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <HAL_UART_MspInit+0x88>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <HAL_UART_MspInit+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a10      	ldr	r2, [pc, #64]	@ (8000ca0 <HAL_UART_MspInit+0x88>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <HAL_UART_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c72:	230c      	movs	r3, #12
 8000c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c82:	2307      	movs	r3, #7
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <HAL_UART_MspInit+0x8c>)
 8000c8e:	f000 fa95 	bl	80011bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c92:	bf00      	nop
 8000c94:	3728      	adds	r7, #40	@ 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40004400 	.word	0x40004400
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <NMI_Handler+0x4>

08000cb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <MemManage_Handler+0x4>

08000cc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <BusFault_Handler+0x4>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <UsageFault_Handler+0x4>

08000cd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfe:	f000 f933 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	e00a      	b.n	8000d2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d18:	f3af 8000 	nop.w
 8000d1c:	4601      	mov	r1, r0
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	1c5a      	adds	r2, r3, #1
 8000d22:	60ba      	str	r2, [r7, #8]
 8000d24:	b2ca      	uxtb	r2, r1
 8000d26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	dbf0      	blt.n	8000d18 <_read+0x12>
  }

  return len;
 8000d36:	687b      	ldr	r3, [r7, #4]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	e009      	b.n	8000d66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	1c5a      	adds	r2, r3, #1
 8000d56:	60ba      	str	r2, [r7, #8]
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff feac 	bl	8000ab8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	3301      	adds	r3, #1
 8000d64:	617b      	str	r3, [r7, #20]
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	dbf1      	blt.n	8000d52 <_write+0x12>
  }
  return len;
 8000d6e:	687b      	ldr	r3, [r7, #4]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <_close>:

int _close(int file)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000da0:	605a      	str	r2, [r3, #4]
  return 0;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <_isatty>:

int _isatty(int file)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000db8:	2301      	movs	r3, #1
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b085      	sub	sp, #20
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	60f8      	str	r0, [r7, #12]
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	@ (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	@ (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	@ (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f002 fdce 	bl	80039b0 <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	@ (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20020000 	.word	0x20020000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	20000168 	.word	0x20000168
 8000e48:	200002c0 	.word	0x200002c0

08000e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	@ (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ea8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e74:	f7ff ffea 	bl	8000e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e78:	480c      	ldr	r0, [pc, #48]	@ (8000eac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e7a:	490d      	ldr	r1, [pc, #52]	@ (8000eb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e90:	4c0a      	ldr	r4, [pc, #40]	@ (8000ebc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f002 fd8d 	bl	80039bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea2:	f7ff fb11 	bl	80004c8 <main>
  bx  lr    
 8000ea6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ea8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000eb4:	08003edc 	.word	0x08003edc
  ldr r2, =_sbss
 8000eb8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ebc:	200002bc 	.word	0x200002bc

08000ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC_IRQHandler>
	...

08000ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f04 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f04 <HAL_Init+0x40>)
 8000ece:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <HAL_Init+0x40>)
 8000eda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee0:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	@ (8000f04 <HAL_Init+0x40>)
 8000ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f931 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 f808 	bl	8000f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef8:	f7ff fdf6 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023c00 	.word	0x40023c00

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f10:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <HAL_InitTick+0x54>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <HAL_InitTick+0x58>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f93b 	bl	80011a2 <HAL_SYSTICK_Config>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00e      	b.n	8000f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	d80a      	bhi.n	8000f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f000 f911 	bl	800116a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f48:	4a06      	ldr	r2, [pc, #24]	@ (8000f64 <HAL_InitTick+0x5c>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e000      	b.n	8000f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20000008 	.word	0x20000008
 8000f64:	20000004 	.word	0x20000004

08000f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <HAL_IncTick+0x20>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <HAL_IncTick+0x24>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a04      	ldr	r2, [pc, #16]	@ (8000f8c <HAL_IncTick+0x24>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	2000016c 	.word	0x2000016c

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b03      	ldr	r3, [pc, #12]	@ (8000fa4 <HAL_GetTick+0x14>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	2000016c 	.word	0x2000016c

08000fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff ffee 	bl	8000f90 <HAL_GetTick>
 8000fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc0:	d005      	beq.n	8000fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <HAL_Delay+0x44>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fce:	bf00      	nop
 8000fd0:	f7ff ffde 	bl	8000f90 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f7      	bhi.n	8000fd0 <HAL_Delay+0x28>
  {
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008

08000ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800100c:	4013      	ands	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001018:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800101c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001022:	4a04      	ldr	r2, [pc, #16]	@ (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	60d3      	str	r3, [r2, #12]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800103c:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <__NVIC_GetPriorityGrouping+0x18>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	f003 0307 	and.w	r3, r3, #7
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	db0a      	blt.n	800107e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	490c      	ldr	r1, [pc, #48]	@ (80010a0 <__NVIC_SetPriority+0x4c>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	0112      	lsls	r2, r2, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	440b      	add	r3, r1
 8001078:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800107c:	e00a      	b.n	8001094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4908      	ldr	r1, [pc, #32]	@ (80010a4 <__NVIC_SetPriority+0x50>)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	3b04      	subs	r3, #4
 800108c:	0112      	lsls	r2, r2, #4
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	440b      	add	r3, r1
 8001092:	761a      	strb	r2, [r3, #24]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000e100 	.word	0xe000e100
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	@ 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f1c3 0307 	rsb	r3, r3, #7
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	bf28      	it	cs
 80010c6:	2304      	movcs	r3, #4
 80010c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3304      	adds	r3, #4
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d902      	bls.n	80010d8 <NVIC_EncodePriority+0x30>
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3b03      	subs	r3, #3
 80010d6:	e000      	b.n	80010da <NVIC_EncodePriority+0x32>
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	f04f 32ff 	mov.w	r2, #4294967295
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	401a      	ands	r2, r3
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f0:	f04f 31ff 	mov.w	r1, #4294967295
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	43d9      	mvns	r1, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	4313      	orrs	r3, r2
         );
}
 8001102:	4618      	mov	r0, r3
 8001104:	3724      	adds	r7, #36	@ 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001120:	d301      	bcc.n	8001126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a0a      	ldr	r2, [pc, #40]	@ (8001150 <SysTick_Config+0x40>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112e:	210f      	movs	r1, #15
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f7ff ff8e 	bl	8001054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <SysTick_Config+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <SysTick_Config+0x40>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff47 	bl	8000ff0 <__NVIC_SetPriorityGrouping>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff5c 	bl	8001038 <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff8e 	bl	80010a8 <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5d 	bl	8001054 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ffb0 	bl	8001110 <SysTick_Config>
 80011b0:	4603      	mov	r3, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	@ 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	e159      	b.n	800148c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011d8:	2201      	movs	r2, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	f040 8148 	bne.w	8001486 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d005      	beq.n	800120e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120a:	2b02      	cmp	r3, #2
 800120c:	d130      	bne.n	8001270 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001244:	2201      	movs	r2, #1
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	f003 0201 	and.w	r2, r3, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b03      	cmp	r3, #3
 800127a:	d017      	beq.n	80012ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d123      	bne.n	8001300 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	08da      	lsrs	r2, r3, #3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3208      	adds	r2, #8
 80012c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	220f      	movs	r2, #15
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	08da      	lsrs	r2, r3, #3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3208      	adds	r2, #8
 80012fa:	69b9      	ldr	r1, [r7, #24]
 80012fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0203 	and.w	r2, r3, #3
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 80a2 	beq.w	8001486 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b57      	ldr	r3, [pc, #348]	@ (80014a4 <HAL_GPIO_Init+0x2e8>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134a:	4a56      	ldr	r2, [pc, #344]	@ (80014a4 <HAL_GPIO_Init+0x2e8>)
 800134c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001350:	6453      	str	r3, [r2, #68]	@ 0x44
 8001352:	4b54      	ldr	r3, [pc, #336]	@ (80014a4 <HAL_GPIO_Init+0x2e8>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001356:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800135e:	4a52      	ldr	r2, [pc, #328]	@ (80014a8 <HAL_GPIO_Init+0x2ec>)
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	3302      	adds	r3, #2
 8001366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	220f      	movs	r2, #15
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a49      	ldr	r2, [pc, #292]	@ (80014ac <HAL_GPIO_Init+0x2f0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d019      	beq.n	80013be <HAL_GPIO_Init+0x202>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a48      	ldr	r2, [pc, #288]	@ (80014b0 <HAL_GPIO_Init+0x2f4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d013      	beq.n	80013ba <HAL_GPIO_Init+0x1fe>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a47      	ldr	r2, [pc, #284]	@ (80014b4 <HAL_GPIO_Init+0x2f8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d00d      	beq.n	80013b6 <HAL_GPIO_Init+0x1fa>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a46      	ldr	r2, [pc, #280]	@ (80014b8 <HAL_GPIO_Init+0x2fc>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d007      	beq.n	80013b2 <HAL_GPIO_Init+0x1f6>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a45      	ldr	r2, [pc, #276]	@ (80014bc <HAL_GPIO_Init+0x300>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d101      	bne.n	80013ae <HAL_GPIO_Init+0x1f2>
 80013aa:	2304      	movs	r3, #4
 80013ac:	e008      	b.n	80013c0 <HAL_GPIO_Init+0x204>
 80013ae:	2307      	movs	r3, #7
 80013b0:	e006      	b.n	80013c0 <HAL_GPIO_Init+0x204>
 80013b2:	2303      	movs	r3, #3
 80013b4:	e004      	b.n	80013c0 <HAL_GPIO_Init+0x204>
 80013b6:	2302      	movs	r3, #2
 80013b8:	e002      	b.n	80013c0 <HAL_GPIO_Init+0x204>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <HAL_GPIO_Init+0x204>
 80013be:	2300      	movs	r3, #0
 80013c0:	69fa      	ldr	r2, [r7, #28]
 80013c2:	f002 0203 	and.w	r2, r2, #3
 80013c6:	0092      	lsls	r2, r2, #2
 80013c8:	4093      	lsls	r3, r2
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d0:	4935      	ldr	r1, [pc, #212]	@ (80014a8 <HAL_GPIO_Init+0x2ec>)
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	089b      	lsrs	r3, r3, #2
 80013d6:	3302      	adds	r3, #2
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013de:	4b38      	ldr	r3, [pc, #224]	@ (80014c0 <HAL_GPIO_Init+0x304>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001402:	4a2f      	ldr	r2, [pc, #188]	@ (80014c0 <HAL_GPIO_Init+0x304>)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001408:	4b2d      	ldr	r3, [pc, #180]	@ (80014c0 <HAL_GPIO_Init+0x304>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800142c:	4a24      	ldr	r2, [pc, #144]	@ (80014c0 <HAL_GPIO_Init+0x304>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001432:	4b23      	ldr	r3, [pc, #140]	@ (80014c0 <HAL_GPIO_Init+0x304>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001456:	4a1a      	ldr	r2, [pc, #104]	@ (80014c0 <HAL_GPIO_Init+0x304>)
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800145c:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <HAL_GPIO_Init+0x304>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001480:	4a0f      	ldr	r2, [pc, #60]	@ (80014c0 <HAL_GPIO_Init+0x304>)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3301      	adds	r3, #1
 800148a:	61fb      	str	r3, [r7, #28]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	2b0f      	cmp	r3, #15
 8001490:	f67f aea2 	bls.w	80011d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3724      	adds	r7, #36	@ 0x24
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40013800 	.word	0x40013800
 80014ac:	40020000 	.word	0x40020000
 80014b0:	40020400 	.word	0x40020400
 80014b4:	40020800 	.word	0x40020800
 80014b8:	40020c00 	.word	0x40020c00
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40013c00 	.word	0x40013c00

080014c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691a      	ldr	r2, [r3, #16]
 80014d4:	887b      	ldrh	r3, [r7, #2]
 80014d6:	4013      	ands	r3, r2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d002      	beq.n	80014e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014dc:	2301      	movs	r3, #1
 80014de:	73fb      	strb	r3, [r7, #15]
 80014e0:	e001      	b.n	80014e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	807b      	strh	r3, [r7, #2]
 8001500:	4613      	mov	r3, r2
 8001502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001504:	787b      	ldrb	r3, [r7, #1]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800150a:	887a      	ldrh	r2, [r7, #2]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001510:	e003      	b.n	800151a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001512:	887b      	ldrh	r3, [r7, #2]
 8001514:	041a      	lsls	r2, r3, #16
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	619a      	str	r2, [r3, #24]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e267      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	d075      	beq.n	8001632 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001546:	4b88      	ldr	r3, [pc, #544]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
 800154e:	2b04      	cmp	r3, #4
 8001550:	d00c      	beq.n	800156c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001552:	4b85      	ldr	r3, [pc, #532]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800155a:	2b08      	cmp	r3, #8
 800155c:	d112      	bne.n	8001584 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800155e:	4b82      	ldr	r3, [pc, #520]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001566:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800156a:	d10b      	bne.n	8001584 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156c:	4b7e      	ldr	r3, [pc, #504]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d05b      	beq.n	8001630 <HAL_RCC_OscConfig+0x108>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d157      	bne.n	8001630 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e242      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800158c:	d106      	bne.n	800159c <HAL_RCC_OscConfig+0x74>
 800158e:	4b76      	ldr	r3, [pc, #472]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a75      	ldr	r2, [pc, #468]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 8001594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e01d      	b.n	80015d8 <HAL_RCC_OscConfig+0xb0>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x98>
 80015a6:	4b70      	ldr	r3, [pc, #448]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a6f      	ldr	r2, [pc, #444]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 80015ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a6c      	ldr	r2, [pc, #432]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 80015b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e00b      	b.n	80015d8 <HAL_RCC_OscConfig+0xb0>
 80015c0:	4b69      	ldr	r3, [pc, #420]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a68      	ldr	r2, [pc, #416]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 80015c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	4b66      	ldr	r3, [pc, #408]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a65      	ldr	r2, [pc, #404]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 80015d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d013      	beq.n	8001608 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e0:	f7ff fcd6 	bl	8000f90 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e8:	f7ff fcd2 	bl	8000f90 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b64      	cmp	r3, #100	@ 0x64
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e207      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0xc0>
 8001606:	e014      	b.n	8001632 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001608:	f7ff fcc2 	bl	8000f90 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001610:	f7ff fcbe 	bl	8000f90 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b64      	cmp	r3, #100	@ 0x64
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e1f3      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001622:	4b51      	ldr	r3, [pc, #324]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0xe8>
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d063      	beq.n	8001706 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800163e:	4b4a      	ldr	r3, [pc, #296]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00b      	beq.n	8001662 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800164a:	4b47      	ldr	r3, [pc, #284]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001652:	2b08      	cmp	r3, #8
 8001654:	d11c      	bne.n	8001690 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001656:	4b44      	ldr	r3, [pc, #272]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d116      	bne.n	8001690 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001662:	4b41      	ldr	r3, [pc, #260]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d005      	beq.n	800167a <HAL_RCC_OscConfig+0x152>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d001      	beq.n	800167a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e1c7      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167a:	4b3b      	ldr	r3, [pc, #236]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	4937      	ldr	r1, [pc, #220]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 800168a:	4313      	orrs	r3, r2
 800168c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168e:	e03a      	b.n	8001706 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d020      	beq.n	80016da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001698:	4b34      	ldr	r3, [pc, #208]	@ (800176c <HAL_RCC_OscConfig+0x244>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169e:	f7ff fc77 	bl	8000f90 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a6:	f7ff fc73 	bl	8000f90 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e1a8      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c4:	4b28      	ldr	r3, [pc, #160]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	4925      	ldr	r1, [pc, #148]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	600b      	str	r3, [r1, #0]
 80016d8:	e015      	b.n	8001706 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016da:	4b24      	ldr	r3, [pc, #144]	@ (800176c <HAL_RCC_OscConfig+0x244>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e0:	f7ff fc56 	bl	8000f90 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e8:	f7ff fc52 	bl	8000f90 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e187      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	2b00      	cmp	r3, #0
 8001710:	d036      	beq.n	8001780 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d016      	beq.n	8001748 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800171a:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <HAL_RCC_OscConfig+0x248>)
 800171c:	2201      	movs	r2, #1
 800171e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001720:	f7ff fc36 	bl	8000f90 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001728:	f7ff fc32 	bl	8000f90 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e167      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173a:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <HAL_RCC_OscConfig+0x240>)
 800173c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0x200>
 8001746:	e01b      	b.n	8001780 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001748:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <HAL_RCC_OscConfig+0x248>)
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174e:	f7ff fc1f 	bl	8000f90 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001754:	e00e      	b.n	8001774 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001756:	f7ff fc1b 	bl	8000f90 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d907      	bls.n	8001774 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e150      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
 8001768:	40023800 	.word	0x40023800
 800176c:	42470000 	.word	0x42470000
 8001770:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001774:	4b88      	ldr	r3, [pc, #544]	@ (8001998 <HAL_RCC_OscConfig+0x470>)
 8001776:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1ea      	bne.n	8001756 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 8097 	beq.w	80018bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001792:	4b81      	ldr	r3, [pc, #516]	@ (8001998 <HAL_RCC_OscConfig+0x470>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10f      	bne.n	80017be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	4b7d      	ldr	r3, [pc, #500]	@ (8001998 <HAL_RCC_OscConfig+0x470>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	4a7c      	ldr	r2, [pc, #496]	@ (8001998 <HAL_RCC_OscConfig+0x470>)
 80017a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ae:	4b7a      	ldr	r3, [pc, #488]	@ (8001998 <HAL_RCC_OscConfig+0x470>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ba:	2301      	movs	r3, #1
 80017bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017be:	4b77      	ldr	r3, [pc, #476]	@ (800199c <HAL_RCC_OscConfig+0x474>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d118      	bne.n	80017fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ca:	4b74      	ldr	r3, [pc, #464]	@ (800199c <HAL_RCC_OscConfig+0x474>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a73      	ldr	r2, [pc, #460]	@ (800199c <HAL_RCC_OscConfig+0x474>)
 80017d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017d6:	f7ff fbdb 	bl	8000f90 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017de:	f7ff fbd7 	bl	8000f90 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e10c      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f0:	4b6a      	ldr	r3, [pc, #424]	@ (800199c <HAL_RCC_OscConfig+0x474>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d106      	bne.n	8001812 <HAL_RCC_OscConfig+0x2ea>
 8001804:	4b64      	ldr	r3, [pc, #400]	@ (8001998 <HAL_RCC_OscConfig+0x470>)
 8001806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001808:	4a63      	ldr	r2, [pc, #396]	@ (8001998 <HAL_RCC_OscConfig+0x470>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001810:	e01c      	b.n	800184c <HAL_RCC_OscConfig+0x324>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b05      	cmp	r3, #5
 8001818:	d10c      	bne.n	8001834 <HAL_RCC_OscConfig+0x30c>
 800181a:	4b5f      	ldr	r3, [pc, #380]	@ (8001998 <HAL_RCC_OscConfig+0x470>)
 800181c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800181e:	4a5e      	ldr	r2, [pc, #376]	@ (8001998 <HAL_RCC_OscConfig+0x470>)
 8001820:	f043 0304 	orr.w	r3, r3, #4
 8001824:	6713      	str	r3, [r2, #112]	@ 0x70
 8001826:	4b5c      	ldr	r3, [pc, #368]	@ (8001998 <HAL_RCC_OscConfig+0x470>)
 8001828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800182a:	4a5b      	ldr	r2, [pc, #364]	@ (8001998 <HAL_RCC_OscConfig+0x470>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6713      	str	r3, [r2, #112]	@ 0x70
 8001832:	e00b      	b.n	800184c <HAL_RCC_OscConfig+0x324>
 8001834:	4b58      	ldr	r3, [pc, #352]	@ (8001998 <HAL_RCC_OscConfig+0x470>)
 8001836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001838:	4a57      	ldr	r2, [pc, #348]	@ (8001998 <HAL_RCC_OscConfig+0x470>)
 800183a:	f023 0301 	bic.w	r3, r3, #1
 800183e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001840:	4b55      	ldr	r3, [pc, #340]	@ (8001998 <HAL_RCC_OscConfig+0x470>)
 8001842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001844:	4a54      	ldr	r2, [pc, #336]	@ (8001998 <HAL_RCC_OscConfig+0x470>)
 8001846:	f023 0304 	bic.w	r3, r3, #4
 800184a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d015      	beq.n	8001880 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001854:	f7ff fb9c 	bl	8000f90 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185a:	e00a      	b.n	8001872 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185c:	f7ff fb98 	bl	8000f90 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e0cb      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001872:	4b49      	ldr	r3, [pc, #292]	@ (8001998 <HAL_RCC_OscConfig+0x470>)
 8001874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0ee      	beq.n	800185c <HAL_RCC_OscConfig+0x334>
 800187e:	e014      	b.n	80018aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001880:	f7ff fb86 	bl	8000f90 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001886:	e00a      	b.n	800189e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001888:	f7ff fb82 	bl	8000f90 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e0b5      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800189e:	4b3e      	ldr	r3, [pc, #248]	@ (8001998 <HAL_RCC_OscConfig+0x470>)
 80018a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1ee      	bne.n	8001888 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018aa:	7dfb      	ldrb	r3, [r7, #23]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d105      	bne.n	80018bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018b0:	4b39      	ldr	r3, [pc, #228]	@ (8001998 <HAL_RCC_OscConfig+0x470>)
 80018b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b4:	4a38      	ldr	r2, [pc, #224]	@ (8001998 <HAL_RCC_OscConfig+0x470>)
 80018b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 80a1 	beq.w	8001a08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018c6:	4b34      	ldr	r3, [pc, #208]	@ (8001998 <HAL_RCC_OscConfig+0x470>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 030c 	and.w	r3, r3, #12
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d05c      	beq.n	800198c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d141      	bne.n	800195e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018da:	4b31      	ldr	r3, [pc, #196]	@ (80019a0 <HAL_RCC_OscConfig+0x478>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fb56 	bl	8000f90 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff fb52 	bl	8000f90 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e087      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fa:	4b27      	ldr	r3, [pc, #156]	@ (8001998 <HAL_RCC_OscConfig+0x470>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69da      	ldr	r2, [r3, #28]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001914:	019b      	lsls	r3, r3, #6
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800191c:	085b      	lsrs	r3, r3, #1
 800191e:	3b01      	subs	r3, #1
 8001920:	041b      	lsls	r3, r3, #16
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001928:	061b      	lsls	r3, r3, #24
 800192a:	491b      	ldr	r1, [pc, #108]	@ (8001998 <HAL_RCC_OscConfig+0x470>)
 800192c:	4313      	orrs	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001930:	4b1b      	ldr	r3, [pc, #108]	@ (80019a0 <HAL_RCC_OscConfig+0x478>)
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001936:	f7ff fb2b 	bl	8000f90 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193e:	f7ff fb27 	bl	8000f90 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e05c      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001950:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <HAL_RCC_OscConfig+0x470>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0f0      	beq.n	800193e <HAL_RCC_OscConfig+0x416>
 800195c:	e054      	b.n	8001a08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195e:	4b10      	ldr	r3, [pc, #64]	@ (80019a0 <HAL_RCC_OscConfig+0x478>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7ff fb14 	bl	8000f90 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff fb10 	bl	8000f90 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e045      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197e:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <HAL_RCC_OscConfig+0x470>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x444>
 800198a:	e03d      	b.n	8001a08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d107      	bne.n	80019a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e038      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
 8001998:	40023800 	.word	0x40023800
 800199c:	40007000 	.word	0x40007000
 80019a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a14 <HAL_RCC_OscConfig+0x4ec>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d028      	beq.n	8001a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019bc:	429a      	cmp	r2, r3
 80019be:	d121      	bne.n	8001a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d11a      	bne.n	8001a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019d4:	4013      	ands	r3, r2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019dc:	4293      	cmp	r3, r2
 80019de:	d111      	bne.n	8001a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ea:	085b      	lsrs	r3, r3, #1
 80019ec:	3b01      	subs	r3, #1
 80019ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d107      	bne.n	8001a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800

08001a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0cc      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b68      	ldr	r3, [pc, #416]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d90c      	bls.n	8001a54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b65      	ldr	r3, [pc, #404]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	4b63      	ldr	r3, [pc, #396]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0b8      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d020      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a6c:	4b59      	ldr	r3, [pc, #356]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	4a58      	ldr	r2, [pc, #352]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a84:	4b53      	ldr	r3, [pc, #332]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	4a52      	ldr	r2, [pc, #328]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a90:	4b50      	ldr	r3, [pc, #320]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	494d      	ldr	r1, [pc, #308]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d044      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d107      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab6:	4b47      	ldr	r3, [pc, #284]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d119      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e07f      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d003      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d107      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad6:	4b3f      	ldr	r3, [pc, #252]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d109      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e06f      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e067      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001af6:	4b37      	ldr	r3, [pc, #220]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f023 0203 	bic.w	r2, r3, #3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4934      	ldr	r1, [pc, #208]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b08:	f7ff fa42 	bl	8000f90 <HAL_GetTick>
 8001b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0e:	e00a      	b.n	8001b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b10:	f7ff fa3e 	bl	8000f90 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e04f      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b26:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 020c 	and.w	r2, r3, #12
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d1eb      	bne.n	8001b10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b38:	4b25      	ldr	r3, [pc, #148]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d20c      	bcs.n	8001b60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b46:	4b22      	ldr	r3, [pc, #136]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4e:	4b20      	ldr	r3, [pc, #128]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e032      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d008      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b6c:	4b19      	ldr	r3, [pc, #100]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	4916      	ldr	r1, [pc, #88]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d009      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b8a:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	490e      	ldr	r1, [pc, #56]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b9e:	f000 f821 	bl	8001be4 <HAL_RCC_GetSysClockFreq>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	490a      	ldr	r1, [pc, #40]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb0:	5ccb      	ldrb	r3, [r1, r3]
 8001bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb6:	4a09      	ldr	r2, [pc, #36]	@ (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001bba:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <HAL_RCC_ClockConfig+0x1c8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff f9a2 	bl	8000f08 <HAL_InitTick>

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023c00 	.word	0x40023c00
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	08003eb4 	.word	0x08003eb4
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	20000004 	.word	0x20000004

08001be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001be8:	b094      	sub	sp, #80	@ 0x50
 8001bea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bfc:	4b79      	ldr	r3, [pc, #484]	@ (8001de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d00d      	beq.n	8001c24 <HAL_RCC_GetSysClockFreq+0x40>
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	f200 80e1 	bhi.w	8001dd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <HAL_RCC_GetSysClockFreq+0x34>
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d003      	beq.n	8001c1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c16:	e0db      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c18:	4b73      	ldr	r3, [pc, #460]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c1c:	e0db      	b.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c1e:	4b73      	ldr	r3, [pc, #460]	@ (8001dec <HAL_RCC_GetSysClockFreq+0x208>)
 8001c20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c22:	e0d8      	b.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c24:	4b6f      	ldr	r3, [pc, #444]	@ (8001de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c2c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c2e:	4b6d      	ldr	r3, [pc, #436]	@ (8001de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d063      	beq.n	8001d02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c3a:	4b6a      	ldr	r3, [pc, #424]	@ (8001de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	099b      	lsrs	r3, r3, #6
 8001c40:	2200      	movs	r2, #0
 8001c42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c4e:	2300      	movs	r3, #0
 8001c50:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c56:	4622      	mov	r2, r4
 8001c58:	462b      	mov	r3, r5
 8001c5a:	f04f 0000 	mov.w	r0, #0
 8001c5e:	f04f 0100 	mov.w	r1, #0
 8001c62:	0159      	lsls	r1, r3, #5
 8001c64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c68:	0150      	lsls	r0, r2, #5
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4621      	mov	r1, r4
 8001c70:	1a51      	subs	r1, r2, r1
 8001c72:	6139      	str	r1, [r7, #16]
 8001c74:	4629      	mov	r1, r5
 8001c76:	eb63 0301 	sbc.w	r3, r3, r1
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	f04f 0300 	mov.w	r3, #0
 8001c84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c88:	4659      	mov	r1, fp
 8001c8a:	018b      	lsls	r3, r1, #6
 8001c8c:	4651      	mov	r1, sl
 8001c8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c92:	4651      	mov	r1, sl
 8001c94:	018a      	lsls	r2, r1, #6
 8001c96:	4651      	mov	r1, sl
 8001c98:	ebb2 0801 	subs.w	r8, r2, r1
 8001c9c:	4659      	mov	r1, fp
 8001c9e:	eb63 0901 	sbc.w	r9, r3, r1
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cb6:	4690      	mov	r8, r2
 8001cb8:	4699      	mov	r9, r3
 8001cba:	4623      	mov	r3, r4
 8001cbc:	eb18 0303 	adds.w	r3, r8, r3
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	462b      	mov	r3, r5
 8001cc4:	eb49 0303 	adc.w	r3, r9, r3
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cd6:	4629      	mov	r1, r5
 8001cd8:	024b      	lsls	r3, r1, #9
 8001cda:	4621      	mov	r1, r4
 8001cdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ce0:	4621      	mov	r1, r4
 8001ce2:	024a      	lsls	r2, r1, #9
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cea:	2200      	movs	r2, #0
 8001cec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001cf0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001cf4:	f7fe fa70 	bl	80001d8 <__aeabi_uldivmod>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d00:	e058      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d02:	4b38      	ldr	r3, [pc, #224]	@ (8001de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	099b      	lsrs	r3, r3, #6
 8001d08:	2200      	movs	r2, #0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d12:	623b      	str	r3, [r7, #32]
 8001d14:	2300      	movs	r3, #0
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d1c:	4642      	mov	r2, r8
 8001d1e:	464b      	mov	r3, r9
 8001d20:	f04f 0000 	mov.w	r0, #0
 8001d24:	f04f 0100 	mov.w	r1, #0
 8001d28:	0159      	lsls	r1, r3, #5
 8001d2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d2e:	0150      	lsls	r0, r2, #5
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4641      	mov	r1, r8
 8001d36:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d3a:	4649      	mov	r1, r9
 8001d3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d54:	ebb2 040a 	subs.w	r4, r2, sl
 8001d58:	eb63 050b 	sbc.w	r5, r3, fp
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	00eb      	lsls	r3, r5, #3
 8001d66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d6a:	00e2      	lsls	r2, r4, #3
 8001d6c:	4614      	mov	r4, r2
 8001d6e:	461d      	mov	r5, r3
 8001d70:	4643      	mov	r3, r8
 8001d72:	18e3      	adds	r3, r4, r3
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	464b      	mov	r3, r9
 8001d78:	eb45 0303 	adc.w	r3, r5, r3
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	028b      	lsls	r3, r1, #10
 8001d8e:	4621      	mov	r1, r4
 8001d90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d94:	4621      	mov	r1, r4
 8001d96:	028a      	lsls	r2, r1, #10
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d9e:	2200      	movs	r2, #0
 8001da0:	61bb      	str	r3, [r7, #24]
 8001da2:	61fa      	str	r2, [r7, #28]
 8001da4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001da8:	f7fe fa16 	bl	80001d8 <__aeabi_uldivmod>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4613      	mov	r3, r2
 8001db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001db4:	4b0b      	ldr	r3, [pc, #44]	@ (8001de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	0c1b      	lsrs	r3, r3, #16
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001dc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001dce:	e002      	b.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dd0:	4b05      	ldr	r3, [pc, #20]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001dd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3750      	adds	r7, #80	@ 0x50
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800
 8001de8:	00f42400 	.word	0x00f42400
 8001dec:	007a1200 	.word	0x007a1200

08001df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001df4:	4b03      	ldr	r3, [pc, #12]	@ (8001e04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001df6:	681b      	ldr	r3, [r3, #0]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000000 	.word	0x20000000

08001e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e0c:	f7ff fff0 	bl	8001df0 <HAL_RCC_GetHCLKFreq>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b05      	ldr	r3, [pc, #20]	@ (8001e28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	0a9b      	lsrs	r3, r3, #10
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	4903      	ldr	r1, [pc, #12]	@ (8001e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e1e:	5ccb      	ldrb	r3, [r1, r3]
 8001e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	08003ec4 	.word	0x08003ec4

08001e30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e34:	f7ff ffdc 	bl	8001df0 <HAL_RCC_GetHCLKFreq>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	0b5b      	lsrs	r3, r3, #13
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	4903      	ldr	r1, [pc, #12]	@ (8001e54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e46:	5ccb      	ldrb	r3, [r1, r3]
 8001e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40023800 	.word	0x40023800
 8001e54:	08003ec4 	.word	0x08003ec4

08001e58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e041      	b.n	8001eee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d106      	bne.n	8001e84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7fe fe5a 	bl	8000b38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2202      	movs	r2, #2
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3304      	adds	r3, #4
 8001e94:	4619      	mov	r1, r3
 8001e96:	4610      	mov	r0, r2
 8001e98:	f000 fb42 	bl	8002520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d001      	beq.n	8001f10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e03c      	b.n	8001f8a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1e      	ldr	r2, [pc, #120]	@ (8001f98 <HAL_TIM_Base_Start+0xa0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d018      	beq.n	8001f54 <HAL_TIM_Base_Start+0x5c>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f2a:	d013      	beq.n	8001f54 <HAL_TIM_Base_Start+0x5c>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a1a      	ldr	r2, [pc, #104]	@ (8001f9c <HAL_TIM_Base_Start+0xa4>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00e      	beq.n	8001f54 <HAL_TIM_Base_Start+0x5c>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a19      	ldr	r2, [pc, #100]	@ (8001fa0 <HAL_TIM_Base_Start+0xa8>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d009      	beq.n	8001f54 <HAL_TIM_Base_Start+0x5c>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a17      	ldr	r2, [pc, #92]	@ (8001fa4 <HAL_TIM_Base_Start+0xac>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d004      	beq.n	8001f54 <HAL_TIM_Base_Start+0x5c>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a16      	ldr	r2, [pc, #88]	@ (8001fa8 <HAL_TIM_Base_Start+0xb0>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d111      	bne.n	8001f78 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2b06      	cmp	r3, #6
 8001f64:	d010      	beq.n	8001f88 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 0201 	orr.w	r2, r2, #1
 8001f74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f76:	e007      	b.n	8001f88 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40010000 	.word	0x40010000
 8001f9c:	40000400 	.word	0x40000400
 8001fa0:	40000800 	.word	0x40000800
 8001fa4:	40000c00 	.word	0x40000c00
 8001fa8:	40014000 	.word	0x40014000

08001fac <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6a1a      	ldr	r2, [r3, #32]
 8001fba:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10f      	bne.n	8001fe4 <HAL_TIM_Base_Stop+0x38>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6a1a      	ldr	r2, [r3, #32]
 8001fca:	f240 4344 	movw	r3, #1092	@ 0x444
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d107      	bne.n	8001fe4 <HAL_TIM_Base_Stop+0x38>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0201 	bic.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e041      	b.n	8002090 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d106      	bne.n	8002026 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f839 	bl	8002098 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2202      	movs	r2, #2
 800202a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3304      	adds	r3, #4
 8002036:	4619      	mov	r1, r3
 8002038:	4610      	mov	r0, r2
 800203a:	f000 fa71 	bl	8002520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d109      	bne.n	80020d0 <HAL_TIM_PWM_Start+0x24>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	bf14      	ite	ne
 80020c8:	2301      	movne	r3, #1
 80020ca:	2300      	moveq	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	e022      	b.n	8002116 <HAL_TIM_PWM_Start+0x6a>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d109      	bne.n	80020ea <HAL_TIM_PWM_Start+0x3e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	bf14      	ite	ne
 80020e2:	2301      	movne	r3, #1
 80020e4:	2300      	moveq	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	e015      	b.n	8002116 <HAL_TIM_PWM_Start+0x6a>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d109      	bne.n	8002104 <HAL_TIM_PWM_Start+0x58>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	bf14      	ite	ne
 80020fc:	2301      	movne	r3, #1
 80020fe:	2300      	moveq	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	e008      	b.n	8002116 <HAL_TIM_PWM_Start+0x6a>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b01      	cmp	r3, #1
 800210e:	bf14      	ite	ne
 8002110:	2301      	movne	r3, #1
 8002112:	2300      	moveq	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e068      	b.n	80021f0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d104      	bne.n	800212e <HAL_TIM_PWM_Start+0x82>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800212c:	e013      	b.n	8002156 <HAL_TIM_PWM_Start+0xaa>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b04      	cmp	r3, #4
 8002132:	d104      	bne.n	800213e <HAL_TIM_PWM_Start+0x92>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800213c:	e00b      	b.n	8002156 <HAL_TIM_PWM_Start+0xaa>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b08      	cmp	r3, #8
 8002142:	d104      	bne.n	800214e <HAL_TIM_PWM_Start+0xa2>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2202      	movs	r2, #2
 8002148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800214c:	e003      	b.n	8002156 <HAL_TIM_PWM_Start+0xaa>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2202      	movs	r2, #2
 8002152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2201      	movs	r2, #1
 800215c:	6839      	ldr	r1, [r7, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f000 fc90 	bl	8002a84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a23      	ldr	r2, [pc, #140]	@ (80021f8 <HAL_TIM_PWM_Start+0x14c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d107      	bne.n	800217e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800217c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a1d      	ldr	r2, [pc, #116]	@ (80021f8 <HAL_TIM_PWM_Start+0x14c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d018      	beq.n	80021ba <HAL_TIM_PWM_Start+0x10e>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002190:	d013      	beq.n	80021ba <HAL_TIM_PWM_Start+0x10e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a19      	ldr	r2, [pc, #100]	@ (80021fc <HAL_TIM_PWM_Start+0x150>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d00e      	beq.n	80021ba <HAL_TIM_PWM_Start+0x10e>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a17      	ldr	r2, [pc, #92]	@ (8002200 <HAL_TIM_PWM_Start+0x154>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d009      	beq.n	80021ba <HAL_TIM_PWM_Start+0x10e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a16      	ldr	r2, [pc, #88]	@ (8002204 <HAL_TIM_PWM_Start+0x158>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d004      	beq.n	80021ba <HAL_TIM_PWM_Start+0x10e>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a14      	ldr	r2, [pc, #80]	@ (8002208 <HAL_TIM_PWM_Start+0x15c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d111      	bne.n	80021de <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2b06      	cmp	r3, #6
 80021ca:	d010      	beq.n	80021ee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021dc:	e007      	b.n	80021ee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f042 0201 	orr.w	r2, r2, #1
 80021ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40010000 	.word	0x40010000
 80021fc:	40000400 	.word	0x40000400
 8002200:	40000800 	.word	0x40000800
 8002204:	40000c00 	.word	0x40000c00
 8002208:	40014000 	.word	0x40014000

0800220c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002218:	2300      	movs	r3, #0
 800221a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002226:	2302      	movs	r3, #2
 8002228:	e0ae      	b.n	8002388 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b0c      	cmp	r3, #12
 8002236:	f200 809f 	bhi.w	8002378 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800223a:	a201      	add	r2, pc, #4	@ (adr r2, 8002240 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800223c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002240:	08002275 	.word	0x08002275
 8002244:	08002379 	.word	0x08002379
 8002248:	08002379 	.word	0x08002379
 800224c:	08002379 	.word	0x08002379
 8002250:	080022b5 	.word	0x080022b5
 8002254:	08002379 	.word	0x08002379
 8002258:	08002379 	.word	0x08002379
 800225c:	08002379 	.word	0x08002379
 8002260:	080022f7 	.word	0x080022f7
 8002264:	08002379 	.word	0x08002379
 8002268:	08002379 	.word	0x08002379
 800226c:	08002379 	.word	0x08002379
 8002270:	08002337 	.word	0x08002337
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	4618      	mov	r0, r3
 800227c:	f000 f9dc 	bl	8002638 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699a      	ldr	r2, [r3, #24]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0208 	orr.w	r2, r2, #8
 800228e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	699a      	ldr	r2, [r3, #24]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0204 	bic.w	r2, r2, #4
 800229e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6999      	ldr	r1, [r3, #24]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	691a      	ldr	r2, [r3, #16]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	619a      	str	r2, [r3, #24]
      break;
 80022b2:	e064      	b.n	800237e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68b9      	ldr	r1, [r7, #8]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fa22 	bl	8002704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699a      	ldr	r2, [r3, #24]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699a      	ldr	r2, [r3, #24]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6999      	ldr	r1, [r3, #24]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	021a      	lsls	r2, r3, #8
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	619a      	str	r2, [r3, #24]
      break;
 80022f4:	e043      	b.n	800237e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68b9      	ldr	r1, [r7, #8]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 fa6d 	bl	80027dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	69da      	ldr	r2, [r3, #28]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f042 0208 	orr.w	r2, r2, #8
 8002310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	69da      	ldr	r2, [r3, #28]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0204 	bic.w	r2, r2, #4
 8002320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	69d9      	ldr	r1, [r3, #28]
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	61da      	str	r2, [r3, #28]
      break;
 8002334:	e023      	b.n	800237e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68b9      	ldr	r1, [r7, #8]
 800233c:	4618      	mov	r0, r3
 800233e:	f000 fab7 	bl	80028b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69da      	ldr	r2, [r3, #28]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	69da      	ldr	r2, [r3, #28]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	69d9      	ldr	r1, [r3, #28]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	021a      	lsls	r2, r3, #8
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	61da      	str	r2, [r3, #28]
      break;
 8002376:	e002      	b.n	800237e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	75fb      	strb	r3, [r7, #23]
      break;
 800237c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002386:	7dfb      	ldrb	r3, [r7, #23]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_TIM_ConfigClockSource+0x1c>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e0b4      	b.n	8002516 <HAL_TIM_ConfigClockSource+0x186>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80023ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80023d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023e4:	d03e      	beq.n	8002464 <HAL_TIM_ConfigClockSource+0xd4>
 80023e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023ea:	f200 8087 	bhi.w	80024fc <HAL_TIM_ConfigClockSource+0x16c>
 80023ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023f2:	f000 8086 	beq.w	8002502 <HAL_TIM_ConfigClockSource+0x172>
 80023f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023fa:	d87f      	bhi.n	80024fc <HAL_TIM_ConfigClockSource+0x16c>
 80023fc:	2b70      	cmp	r3, #112	@ 0x70
 80023fe:	d01a      	beq.n	8002436 <HAL_TIM_ConfigClockSource+0xa6>
 8002400:	2b70      	cmp	r3, #112	@ 0x70
 8002402:	d87b      	bhi.n	80024fc <HAL_TIM_ConfigClockSource+0x16c>
 8002404:	2b60      	cmp	r3, #96	@ 0x60
 8002406:	d050      	beq.n	80024aa <HAL_TIM_ConfigClockSource+0x11a>
 8002408:	2b60      	cmp	r3, #96	@ 0x60
 800240a:	d877      	bhi.n	80024fc <HAL_TIM_ConfigClockSource+0x16c>
 800240c:	2b50      	cmp	r3, #80	@ 0x50
 800240e:	d03c      	beq.n	800248a <HAL_TIM_ConfigClockSource+0xfa>
 8002410:	2b50      	cmp	r3, #80	@ 0x50
 8002412:	d873      	bhi.n	80024fc <HAL_TIM_ConfigClockSource+0x16c>
 8002414:	2b40      	cmp	r3, #64	@ 0x40
 8002416:	d058      	beq.n	80024ca <HAL_TIM_ConfigClockSource+0x13a>
 8002418:	2b40      	cmp	r3, #64	@ 0x40
 800241a:	d86f      	bhi.n	80024fc <HAL_TIM_ConfigClockSource+0x16c>
 800241c:	2b30      	cmp	r3, #48	@ 0x30
 800241e:	d064      	beq.n	80024ea <HAL_TIM_ConfigClockSource+0x15a>
 8002420:	2b30      	cmp	r3, #48	@ 0x30
 8002422:	d86b      	bhi.n	80024fc <HAL_TIM_ConfigClockSource+0x16c>
 8002424:	2b20      	cmp	r3, #32
 8002426:	d060      	beq.n	80024ea <HAL_TIM_ConfigClockSource+0x15a>
 8002428:	2b20      	cmp	r3, #32
 800242a:	d867      	bhi.n	80024fc <HAL_TIM_ConfigClockSource+0x16c>
 800242c:	2b00      	cmp	r3, #0
 800242e:	d05c      	beq.n	80024ea <HAL_TIM_ConfigClockSource+0x15a>
 8002430:	2b10      	cmp	r3, #16
 8002432:	d05a      	beq.n	80024ea <HAL_TIM_ConfigClockSource+0x15a>
 8002434:	e062      	b.n	80024fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002446:	f000 fafd 	bl	8002a44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002458:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	609a      	str	r2, [r3, #8]
      break;
 8002462:	e04f      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002474:	f000 fae6 	bl	8002a44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002486:	609a      	str	r2, [r3, #8]
      break;
 8002488:	e03c      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002496:	461a      	mov	r2, r3
 8002498:	f000 fa5a 	bl	8002950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2150      	movs	r1, #80	@ 0x50
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 fab3 	bl	8002a0e <TIM_ITRx_SetConfig>
      break;
 80024a8:	e02c      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024b6:	461a      	mov	r2, r3
 80024b8:	f000 fa79 	bl	80029ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2160      	movs	r1, #96	@ 0x60
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 faa3 	bl	8002a0e <TIM_ITRx_SetConfig>
      break;
 80024c8:	e01c      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024d6:	461a      	mov	r2, r3
 80024d8:	f000 fa3a 	bl	8002950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2140      	movs	r1, #64	@ 0x40
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 fa93 	bl	8002a0e <TIM_ITRx_SetConfig>
      break;
 80024e8:	e00c      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4619      	mov	r1, r3
 80024f4:	4610      	mov	r0, r2
 80024f6:	f000 fa8a 	bl	8002a0e <TIM_ITRx_SetConfig>
      break;
 80024fa:	e003      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002500:	e000      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002502:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002514:	7bfb      	ldrb	r3, [r7, #15]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a3a      	ldr	r2, [pc, #232]	@ (800261c <TIM_Base_SetConfig+0xfc>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d00f      	beq.n	8002558 <TIM_Base_SetConfig+0x38>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800253e:	d00b      	beq.n	8002558 <TIM_Base_SetConfig+0x38>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a37      	ldr	r2, [pc, #220]	@ (8002620 <TIM_Base_SetConfig+0x100>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d007      	beq.n	8002558 <TIM_Base_SetConfig+0x38>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a36      	ldr	r2, [pc, #216]	@ (8002624 <TIM_Base_SetConfig+0x104>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d003      	beq.n	8002558 <TIM_Base_SetConfig+0x38>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a35      	ldr	r2, [pc, #212]	@ (8002628 <TIM_Base_SetConfig+0x108>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d108      	bne.n	800256a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800255e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	4313      	orrs	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a2b      	ldr	r2, [pc, #172]	@ (800261c <TIM_Base_SetConfig+0xfc>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d01b      	beq.n	80025aa <TIM_Base_SetConfig+0x8a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002578:	d017      	beq.n	80025aa <TIM_Base_SetConfig+0x8a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a28      	ldr	r2, [pc, #160]	@ (8002620 <TIM_Base_SetConfig+0x100>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d013      	beq.n	80025aa <TIM_Base_SetConfig+0x8a>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a27      	ldr	r2, [pc, #156]	@ (8002624 <TIM_Base_SetConfig+0x104>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d00f      	beq.n	80025aa <TIM_Base_SetConfig+0x8a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a26      	ldr	r2, [pc, #152]	@ (8002628 <TIM_Base_SetConfig+0x108>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d00b      	beq.n	80025aa <TIM_Base_SetConfig+0x8a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a25      	ldr	r2, [pc, #148]	@ (800262c <TIM_Base_SetConfig+0x10c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d007      	beq.n	80025aa <TIM_Base_SetConfig+0x8a>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a24      	ldr	r2, [pc, #144]	@ (8002630 <TIM_Base_SetConfig+0x110>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d003      	beq.n	80025aa <TIM_Base_SetConfig+0x8a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a23      	ldr	r2, [pc, #140]	@ (8002634 <TIM_Base_SetConfig+0x114>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d108      	bne.n	80025bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a0e      	ldr	r2, [pc, #56]	@ (800261c <TIM_Base_SetConfig+0xfc>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d103      	bne.n	80025f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d105      	bne.n	800260e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f023 0201 	bic.w	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	611a      	str	r2, [r3, #16]
  }
}
 800260e:	bf00      	nop
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40010000 	.word	0x40010000
 8002620:	40000400 	.word	0x40000400
 8002624:	40000800 	.word	0x40000800
 8002628:	40000c00 	.word	0x40000c00
 800262c:	40014000 	.word	0x40014000
 8002630:	40014400 	.word	0x40014400
 8002634:	40014800 	.word	0x40014800

08002638 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	f023 0201 	bic.w	r2, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f023 0303 	bic.w	r3, r3, #3
 800266e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4313      	orrs	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f023 0302 	bic.w	r3, r3, #2
 8002680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	4313      	orrs	r3, r2
 800268a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a1c      	ldr	r2, [pc, #112]	@ (8002700 <TIM_OC1_SetConfig+0xc8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d10c      	bne.n	80026ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f023 0308 	bic.w	r3, r3, #8
 800269a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f023 0304 	bic.w	r3, r3, #4
 80026ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a13      	ldr	r2, [pc, #76]	@ (8002700 <TIM_OC1_SetConfig+0xc8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d111      	bne.n	80026da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80026c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	621a      	str	r2, [r3, #32]
}
 80026f4:	bf00      	nop
 80026f6:	371c      	adds	r7, #28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	40010000 	.word	0x40010000

08002704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	f023 0210 	bic.w	r2, r3, #16
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800273a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	4313      	orrs	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f023 0320 	bic.w	r3, r3, #32
 800274e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4313      	orrs	r3, r2
 800275a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a1e      	ldr	r2, [pc, #120]	@ (80027d8 <TIM_OC2_SetConfig+0xd4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d10d      	bne.n	8002780 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800276a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4313      	orrs	r3, r2
 8002776:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800277e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a15      	ldr	r2, [pc, #84]	@ (80027d8 <TIM_OC2_SetConfig+0xd4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d113      	bne.n	80027b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800278e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002796:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	621a      	str	r2, [r3, #32]
}
 80027ca:	bf00      	nop
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40010000 	.word	0x40010000

080027dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800280a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f023 0303 	bic.w	r3, r3, #3
 8002812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002824:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	021b      	lsls	r3, r3, #8
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	4313      	orrs	r3, r2
 8002830:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a1d      	ldr	r2, [pc, #116]	@ (80028ac <TIM_OC3_SetConfig+0xd0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d10d      	bne.n	8002856 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002840:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	021b      	lsls	r3, r3, #8
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	4313      	orrs	r3, r2
 800284c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a14      	ldr	r2, [pc, #80]	@ (80028ac <TIM_OC3_SetConfig+0xd0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d113      	bne.n	8002886 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800286c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	621a      	str	r2, [r3, #32]
}
 80028a0:	bf00      	nop
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40010000 	.word	0x40010000

080028b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80028fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	031b      	lsls	r3, r3, #12
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a10      	ldr	r2, [pc, #64]	@ (800294c <TIM_OC4_SetConfig+0x9c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d109      	bne.n	8002924 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002916:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	019b      	lsls	r3, r3, #6
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	4313      	orrs	r3, r2
 8002922:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	621a      	str	r2, [r3, #32]
}
 800293e:	bf00      	nop
 8002940:	371c      	adds	r7, #28
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40010000 	.word	0x40010000

08002950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	f023 0201 	bic.w	r2, r3, #1
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800297a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f023 030a 	bic.w	r3, r3, #10
 800298c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4313      	orrs	r3, r2
 8002994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	621a      	str	r2, [r3, #32]
}
 80029a2:	bf00      	nop
 80029a4:	371c      	adds	r7, #28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b087      	sub	sp, #28
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	60f8      	str	r0, [r7, #12]
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	f023 0210 	bic.w	r2, r3, #16
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80029d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	031b      	lsls	r3, r3, #12
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80029ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	621a      	str	r2, [r3, #32]
}
 8002a02:	bf00      	nop
 8002a04:	371c      	adds	r7, #28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b085      	sub	sp, #20
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f043 0307 	orr.w	r3, r3, #7
 8002a30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	609a      	str	r2, [r3, #8]
}
 8002a38:	bf00      	nop
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
 8002a50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	021a      	lsls	r2, r3, #8
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	609a      	str	r2, [r3, #8]
}
 8002a78:	bf00      	nop
 8002a7a:	371c      	adds	r7, #28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	2201      	movs	r2, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a1a      	ldr	r2, [r3, #32]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a1a      	ldr	r2, [r3, #32]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8002abc:	431a      	orrs	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	621a      	str	r2, [r3, #32]
}
 8002ac2:	bf00      	nop
 8002ac4:	371c      	adds	r7, #28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
	...

08002ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e050      	b.n	8002b8a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a1c      	ldr	r2, [pc, #112]	@ (8002b98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d018      	beq.n	8002b5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b34:	d013      	beq.n	8002b5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a18      	ldr	r2, [pc, #96]	@ (8002b9c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d00e      	beq.n	8002b5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a16      	ldr	r2, [pc, #88]	@ (8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d009      	beq.n	8002b5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a15      	ldr	r2, [pc, #84]	@ (8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d004      	beq.n	8002b5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a13      	ldr	r2, [pc, #76]	@ (8002ba8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d10c      	bne.n	8002b78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40010000 	.word	0x40010000
 8002b9c:	40000400 	.word	0x40000400
 8002ba0:	40000800 	.word	0x40000800
 8002ba4:	40000c00 	.word	0x40000c00
 8002ba8:	40014000 	.word	0x40014000

08002bac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e03d      	b.n	8002c44 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e042      	b.n	8002ce8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d106      	bne.n	8002c7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7fd ffce 	bl	8000c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2224      	movs	r2, #36	@ 0x24
 8002c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f9d1 	bl	800303c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ca8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002cb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08a      	sub	sp, #40	@ 0x28
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	603b      	str	r3, [r7, #0]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	d175      	bne.n	8002dfc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <HAL_UART_Transmit+0x2c>
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e06e      	b.n	8002dfe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2221      	movs	r2, #33	@ 0x21
 8002d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d2e:	f7fe f92f 	bl	8000f90 <HAL_GetTick>
 8002d32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	88fa      	ldrh	r2, [r7, #6]
 8002d38:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	88fa      	ldrh	r2, [r7, #6]
 8002d3e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d48:	d108      	bne.n	8002d5c <HAL_UART_Transmit+0x6c>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d104      	bne.n	8002d5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	61bb      	str	r3, [r7, #24]
 8002d5a:	e003      	b.n	8002d64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d64:	e02e      	b.n	8002dc4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2180      	movs	r1, #128	@ 0x80
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f86d 	bl	8002e50 <UART_WaitOnFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e03a      	b.n	8002dfe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10b      	bne.n	8002da6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	461a      	mov	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	3302      	adds	r3, #2
 8002da2:	61bb      	str	r3, [r7, #24]
 8002da4:	e007      	b.n	8002db6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	781a      	ldrb	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	3301      	adds	r3, #1
 8002db4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1cb      	bne.n	8002d66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2140      	movs	r1, #64	@ 0x40
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f839 	bl	8002e50 <UART_WaitOnFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e006      	b.n	8002dfe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e000      	b.n	8002dfe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002dfc:	2302      	movs	r3, #2
  }
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3720      	adds	r7, #32
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	4613      	mov	r3, r2
 8002e12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b20      	cmp	r3, #32
 8002e1e:	d112      	bne.n	8002e46 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <HAL_UART_Receive_IT+0x26>
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e00b      	b.n	8002e48 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	68b9      	ldr	r1, [r7, #8]
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 f860 	bl	8002f02 <UART_Start_Receive_IT>
 8002e42:	4603      	mov	r3, r0
 8002e44:	e000      	b.n	8002e48 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002e46:	2302      	movs	r3, #2
  }
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e60:	e03b      	b.n	8002eda <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e68:	d037      	beq.n	8002eda <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e6a:	f7fe f891 	bl	8000f90 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	6a3a      	ldr	r2, [r7, #32]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d302      	bcc.n	8002e80 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e03a      	b.n	8002efa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d023      	beq.n	8002eda <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b80      	cmp	r3, #128	@ 0x80
 8002e96:	d020      	beq.n	8002eda <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b40      	cmp	r3, #64	@ 0x40
 8002e9c:	d01d      	beq.n	8002eda <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d116      	bne.n	8002eda <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f857 	bl	8002f76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2208      	movs	r2, #8
 8002ecc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e00f      	b.n	8002efa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	bf0c      	ite	eq
 8002eea:	2301      	moveq	r3, #1
 8002eec:	2300      	movne	r3, #0
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d0b4      	beq.n	8002e62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b085      	sub	sp, #20
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	88fa      	ldrh	r2, [r7, #6]
 8002f1a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	88fa      	ldrh	r2, [r7, #6]
 8002f20:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2222      	movs	r2, #34	@ 0x22
 8002f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d007      	beq.n	8002f48 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f46:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0220 	orr.w	r2, r2, #32
 8002f66:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b095      	sub	sp, #84	@ 0x54
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	330c      	adds	r3, #12
 8002f84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f88:	e853 3f00 	ldrex	r3, [r3]
 8002f8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	330c      	adds	r3, #12
 8002f9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f9e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002fa4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002fa6:	e841 2300 	strex	r3, r2, [r1]
 8002faa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1e5      	bne.n	8002f7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3314      	adds	r3, #20
 8002fb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	e853 3f00 	ldrex	r3, [r3]
 8002fc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	f023 0301 	bic.w	r3, r3, #1
 8002fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3314      	adds	r3, #20
 8002fd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fda:	e841 2300 	strex	r3, r2, [r1]
 8002fde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1e5      	bne.n	8002fb2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d119      	bne.n	8003022 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	330c      	adds	r3, #12
 8002ff4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	e853 3f00 	ldrex	r3, [r3]
 8002ffc:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f023 0310 	bic.w	r3, r3, #16
 8003004:	647b      	str	r3, [r7, #68]	@ 0x44
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	330c      	adds	r3, #12
 800300c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800300e:	61ba      	str	r2, [r7, #24]
 8003010:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003012:	6979      	ldr	r1, [r7, #20]
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	e841 2300 	strex	r3, r2, [r1]
 800301a:	613b      	str	r3, [r7, #16]
   return(result);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1e5      	bne.n	8002fee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003030:	bf00      	nop
 8003032:	3754      	adds	r7, #84	@ 0x54
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800303c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003040:	b0c0      	sub	sp, #256	@ 0x100
 8003042:	af00      	add	r7, sp, #0
 8003044:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003058:	68d9      	ldr	r1, [r3, #12]
 800305a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	ea40 0301 	orr.w	r3, r0, r1
 8003064:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	431a      	orrs	r2, r3
 8003074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	431a      	orrs	r2, r3
 800307c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003094:	f021 010c 	bic.w	r1, r1, #12
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80030a2:	430b      	orrs	r3, r1
 80030a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80030b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b6:	6999      	ldr	r1, [r3, #24]
 80030b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	ea40 0301 	orr.w	r3, r0, r1
 80030c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	4b8f      	ldr	r3, [pc, #572]	@ (8003308 <UART_SetConfig+0x2cc>)
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d005      	beq.n	80030dc <UART_SetConfig+0xa0>
 80030d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	4b8d      	ldr	r3, [pc, #564]	@ (800330c <UART_SetConfig+0x2d0>)
 80030d8:	429a      	cmp	r2, r3
 80030da:	d104      	bne.n	80030e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030dc:	f7fe fea8 	bl	8001e30 <HAL_RCC_GetPCLK2Freq>
 80030e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80030e4:	e003      	b.n	80030ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030e6:	f7fe fe8f 	bl	8001e08 <HAL_RCC_GetPCLK1Freq>
 80030ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030f8:	f040 810c 	bne.w	8003314 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003100:	2200      	movs	r2, #0
 8003102:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003106:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800310a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800310e:	4622      	mov	r2, r4
 8003110:	462b      	mov	r3, r5
 8003112:	1891      	adds	r1, r2, r2
 8003114:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003116:	415b      	adcs	r3, r3
 8003118:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800311a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800311e:	4621      	mov	r1, r4
 8003120:	eb12 0801 	adds.w	r8, r2, r1
 8003124:	4629      	mov	r1, r5
 8003126:	eb43 0901 	adc.w	r9, r3, r1
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003136:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800313a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800313e:	4690      	mov	r8, r2
 8003140:	4699      	mov	r9, r3
 8003142:	4623      	mov	r3, r4
 8003144:	eb18 0303 	adds.w	r3, r8, r3
 8003148:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800314c:	462b      	mov	r3, r5
 800314e:	eb49 0303 	adc.w	r3, r9, r3
 8003152:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003162:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003166:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800316a:	460b      	mov	r3, r1
 800316c:	18db      	adds	r3, r3, r3
 800316e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003170:	4613      	mov	r3, r2
 8003172:	eb42 0303 	adc.w	r3, r2, r3
 8003176:	657b      	str	r3, [r7, #84]	@ 0x54
 8003178:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800317c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003180:	f7fd f82a 	bl	80001d8 <__aeabi_uldivmod>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4b61      	ldr	r3, [pc, #388]	@ (8003310 <UART_SetConfig+0x2d4>)
 800318a:	fba3 2302 	umull	r2, r3, r3, r2
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	011c      	lsls	r4, r3, #4
 8003192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003196:	2200      	movs	r2, #0
 8003198:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800319c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80031a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80031a4:	4642      	mov	r2, r8
 80031a6:	464b      	mov	r3, r9
 80031a8:	1891      	adds	r1, r2, r2
 80031aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80031ac:	415b      	adcs	r3, r3
 80031ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80031b4:	4641      	mov	r1, r8
 80031b6:	eb12 0a01 	adds.w	sl, r2, r1
 80031ba:	4649      	mov	r1, r9
 80031bc:	eb43 0b01 	adc.w	fp, r3, r1
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031d4:	4692      	mov	sl, r2
 80031d6:	469b      	mov	fp, r3
 80031d8:	4643      	mov	r3, r8
 80031da:	eb1a 0303 	adds.w	r3, sl, r3
 80031de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031e2:	464b      	mov	r3, r9
 80031e4:	eb4b 0303 	adc.w	r3, fp, r3
 80031e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80031fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003200:	460b      	mov	r3, r1
 8003202:	18db      	adds	r3, r3, r3
 8003204:	643b      	str	r3, [r7, #64]	@ 0x40
 8003206:	4613      	mov	r3, r2
 8003208:	eb42 0303 	adc.w	r3, r2, r3
 800320c:	647b      	str	r3, [r7, #68]	@ 0x44
 800320e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003212:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003216:	f7fc ffdf 	bl	80001d8 <__aeabi_uldivmod>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4611      	mov	r1, r2
 8003220:	4b3b      	ldr	r3, [pc, #236]	@ (8003310 <UART_SetConfig+0x2d4>)
 8003222:	fba3 2301 	umull	r2, r3, r3, r1
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	2264      	movs	r2, #100	@ 0x64
 800322a:	fb02 f303 	mul.w	r3, r2, r3
 800322e:	1acb      	subs	r3, r1, r3
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003236:	4b36      	ldr	r3, [pc, #216]	@ (8003310 <UART_SetConfig+0x2d4>)
 8003238:	fba3 2302 	umull	r2, r3, r3, r2
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003244:	441c      	add	r4, r3
 8003246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800324a:	2200      	movs	r2, #0
 800324c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003250:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003254:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003258:	4642      	mov	r2, r8
 800325a:	464b      	mov	r3, r9
 800325c:	1891      	adds	r1, r2, r2
 800325e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003260:	415b      	adcs	r3, r3
 8003262:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003264:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003268:	4641      	mov	r1, r8
 800326a:	1851      	adds	r1, r2, r1
 800326c:	6339      	str	r1, [r7, #48]	@ 0x30
 800326e:	4649      	mov	r1, r9
 8003270:	414b      	adcs	r3, r1
 8003272:	637b      	str	r3, [r7, #52]	@ 0x34
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003280:	4659      	mov	r1, fp
 8003282:	00cb      	lsls	r3, r1, #3
 8003284:	4651      	mov	r1, sl
 8003286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800328a:	4651      	mov	r1, sl
 800328c:	00ca      	lsls	r2, r1, #3
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	4603      	mov	r3, r0
 8003294:	4642      	mov	r2, r8
 8003296:	189b      	adds	r3, r3, r2
 8003298:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800329c:	464b      	mov	r3, r9
 800329e:	460a      	mov	r2, r1
 80032a0:	eb42 0303 	adc.w	r3, r2, r3
 80032a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80032b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80032b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80032bc:	460b      	mov	r3, r1
 80032be:	18db      	adds	r3, r3, r3
 80032c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032c2:	4613      	mov	r3, r2
 80032c4:	eb42 0303 	adc.w	r3, r2, r3
 80032c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80032d2:	f7fc ff81 	bl	80001d8 <__aeabi_uldivmod>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4b0d      	ldr	r3, [pc, #52]	@ (8003310 <UART_SetConfig+0x2d4>)
 80032dc:	fba3 1302 	umull	r1, r3, r3, r2
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	2164      	movs	r1, #100	@ 0x64
 80032e4:	fb01 f303 	mul.w	r3, r1, r3
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	3332      	adds	r3, #50	@ 0x32
 80032ee:	4a08      	ldr	r2, [pc, #32]	@ (8003310 <UART_SetConfig+0x2d4>)
 80032f0:	fba2 2303 	umull	r2, r3, r2, r3
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	f003 0207 	and.w	r2, r3, #7
 80032fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4422      	add	r2, r4
 8003302:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003304:	e106      	b.n	8003514 <UART_SetConfig+0x4d8>
 8003306:	bf00      	nop
 8003308:	40011000 	.word	0x40011000
 800330c:	40011400 	.word	0x40011400
 8003310:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003318:	2200      	movs	r2, #0
 800331a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800331e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003322:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003326:	4642      	mov	r2, r8
 8003328:	464b      	mov	r3, r9
 800332a:	1891      	adds	r1, r2, r2
 800332c:	6239      	str	r1, [r7, #32]
 800332e:	415b      	adcs	r3, r3
 8003330:	627b      	str	r3, [r7, #36]	@ 0x24
 8003332:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003336:	4641      	mov	r1, r8
 8003338:	1854      	adds	r4, r2, r1
 800333a:	4649      	mov	r1, r9
 800333c:	eb43 0501 	adc.w	r5, r3, r1
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	00eb      	lsls	r3, r5, #3
 800334a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800334e:	00e2      	lsls	r2, r4, #3
 8003350:	4614      	mov	r4, r2
 8003352:	461d      	mov	r5, r3
 8003354:	4643      	mov	r3, r8
 8003356:	18e3      	adds	r3, r4, r3
 8003358:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800335c:	464b      	mov	r3, r9
 800335e:	eb45 0303 	adc.w	r3, r5, r3
 8003362:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003372:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003382:	4629      	mov	r1, r5
 8003384:	008b      	lsls	r3, r1, #2
 8003386:	4621      	mov	r1, r4
 8003388:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800338c:	4621      	mov	r1, r4
 800338e:	008a      	lsls	r2, r1, #2
 8003390:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003394:	f7fc ff20 	bl	80001d8 <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4b60      	ldr	r3, [pc, #384]	@ (8003520 <UART_SetConfig+0x4e4>)
 800339e:	fba3 2302 	umull	r2, r3, r3, r2
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	011c      	lsls	r4, r3, #4
 80033a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033aa:	2200      	movs	r2, #0
 80033ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80033b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80033b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80033b8:	4642      	mov	r2, r8
 80033ba:	464b      	mov	r3, r9
 80033bc:	1891      	adds	r1, r2, r2
 80033be:	61b9      	str	r1, [r7, #24]
 80033c0:	415b      	adcs	r3, r3
 80033c2:	61fb      	str	r3, [r7, #28]
 80033c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033c8:	4641      	mov	r1, r8
 80033ca:	1851      	adds	r1, r2, r1
 80033cc:	6139      	str	r1, [r7, #16]
 80033ce:	4649      	mov	r1, r9
 80033d0:	414b      	adcs	r3, r1
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033e0:	4659      	mov	r1, fp
 80033e2:	00cb      	lsls	r3, r1, #3
 80033e4:	4651      	mov	r1, sl
 80033e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ea:	4651      	mov	r1, sl
 80033ec:	00ca      	lsls	r2, r1, #3
 80033ee:	4610      	mov	r0, r2
 80033f0:	4619      	mov	r1, r3
 80033f2:	4603      	mov	r3, r0
 80033f4:	4642      	mov	r2, r8
 80033f6:	189b      	adds	r3, r3, r2
 80033f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033fc:	464b      	mov	r3, r9
 80033fe:	460a      	mov	r2, r1
 8003400:	eb42 0303 	adc.w	r3, r2, r3
 8003404:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003412:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003420:	4649      	mov	r1, r9
 8003422:	008b      	lsls	r3, r1, #2
 8003424:	4641      	mov	r1, r8
 8003426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800342a:	4641      	mov	r1, r8
 800342c:	008a      	lsls	r2, r1, #2
 800342e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003432:	f7fc fed1 	bl	80001d8 <__aeabi_uldivmod>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4611      	mov	r1, r2
 800343c:	4b38      	ldr	r3, [pc, #224]	@ (8003520 <UART_SetConfig+0x4e4>)
 800343e:	fba3 2301 	umull	r2, r3, r3, r1
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	2264      	movs	r2, #100	@ 0x64
 8003446:	fb02 f303 	mul.w	r3, r2, r3
 800344a:	1acb      	subs	r3, r1, r3
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	3332      	adds	r3, #50	@ 0x32
 8003450:	4a33      	ldr	r2, [pc, #204]	@ (8003520 <UART_SetConfig+0x4e4>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800345c:	441c      	add	r4, r3
 800345e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003462:	2200      	movs	r2, #0
 8003464:	673b      	str	r3, [r7, #112]	@ 0x70
 8003466:	677a      	str	r2, [r7, #116]	@ 0x74
 8003468:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800346c:	4642      	mov	r2, r8
 800346e:	464b      	mov	r3, r9
 8003470:	1891      	adds	r1, r2, r2
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	415b      	adcs	r3, r3
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800347c:	4641      	mov	r1, r8
 800347e:	1851      	adds	r1, r2, r1
 8003480:	6039      	str	r1, [r7, #0]
 8003482:	4649      	mov	r1, r9
 8003484:	414b      	adcs	r3, r1
 8003486:	607b      	str	r3, [r7, #4]
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003494:	4659      	mov	r1, fp
 8003496:	00cb      	lsls	r3, r1, #3
 8003498:	4651      	mov	r1, sl
 800349a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800349e:	4651      	mov	r1, sl
 80034a0:	00ca      	lsls	r2, r1, #3
 80034a2:	4610      	mov	r0, r2
 80034a4:	4619      	mov	r1, r3
 80034a6:	4603      	mov	r3, r0
 80034a8:	4642      	mov	r2, r8
 80034aa:	189b      	adds	r3, r3, r2
 80034ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034ae:	464b      	mov	r3, r9
 80034b0:	460a      	mov	r2, r1
 80034b2:	eb42 0303 	adc.w	r3, r2, r3
 80034b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80034c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80034d0:	4649      	mov	r1, r9
 80034d2:	008b      	lsls	r3, r1, #2
 80034d4:	4641      	mov	r1, r8
 80034d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034da:	4641      	mov	r1, r8
 80034dc:	008a      	lsls	r2, r1, #2
 80034de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80034e2:	f7fc fe79 	bl	80001d8 <__aeabi_uldivmod>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003520 <UART_SetConfig+0x4e4>)
 80034ec:	fba3 1302 	umull	r1, r3, r3, r2
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	2164      	movs	r1, #100	@ 0x64
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	3332      	adds	r3, #50	@ 0x32
 80034fe:	4a08      	ldr	r2, [pc, #32]	@ (8003520 <UART_SetConfig+0x4e4>)
 8003500:	fba2 2303 	umull	r2, r3, r2, r3
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	f003 020f 	and.w	r2, r3, #15
 800350a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4422      	add	r2, r4
 8003512:	609a      	str	r2, [r3, #8]
}
 8003514:	bf00      	nop
 8003516:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800351a:	46bd      	mov	sp, r7
 800351c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003520:	51eb851f 	.word	0x51eb851f

08003524 <std>:
 8003524:	2300      	movs	r3, #0
 8003526:	b510      	push	{r4, lr}
 8003528:	4604      	mov	r4, r0
 800352a:	e9c0 3300 	strd	r3, r3, [r0]
 800352e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003532:	6083      	str	r3, [r0, #8]
 8003534:	8181      	strh	r1, [r0, #12]
 8003536:	6643      	str	r3, [r0, #100]	@ 0x64
 8003538:	81c2      	strh	r2, [r0, #14]
 800353a:	6183      	str	r3, [r0, #24]
 800353c:	4619      	mov	r1, r3
 800353e:	2208      	movs	r2, #8
 8003540:	305c      	adds	r0, #92	@ 0x5c
 8003542:	f000 f9e7 	bl	8003914 <memset>
 8003546:	4b0d      	ldr	r3, [pc, #52]	@ (800357c <std+0x58>)
 8003548:	6263      	str	r3, [r4, #36]	@ 0x24
 800354a:	4b0d      	ldr	r3, [pc, #52]	@ (8003580 <std+0x5c>)
 800354c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800354e:	4b0d      	ldr	r3, [pc, #52]	@ (8003584 <std+0x60>)
 8003550:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003552:	4b0d      	ldr	r3, [pc, #52]	@ (8003588 <std+0x64>)
 8003554:	6323      	str	r3, [r4, #48]	@ 0x30
 8003556:	4b0d      	ldr	r3, [pc, #52]	@ (800358c <std+0x68>)
 8003558:	6224      	str	r4, [r4, #32]
 800355a:	429c      	cmp	r4, r3
 800355c:	d006      	beq.n	800356c <std+0x48>
 800355e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003562:	4294      	cmp	r4, r2
 8003564:	d002      	beq.n	800356c <std+0x48>
 8003566:	33d0      	adds	r3, #208	@ 0xd0
 8003568:	429c      	cmp	r4, r3
 800356a:	d105      	bne.n	8003578 <std+0x54>
 800356c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003574:	f000 ba46 	b.w	8003a04 <__retarget_lock_init_recursive>
 8003578:	bd10      	pop	{r4, pc}
 800357a:	bf00      	nop
 800357c:	08003765 	.word	0x08003765
 8003580:	08003787 	.word	0x08003787
 8003584:	080037bf 	.word	0x080037bf
 8003588:	080037e3 	.word	0x080037e3
 800358c:	20000170 	.word	0x20000170

08003590 <stdio_exit_handler>:
 8003590:	4a02      	ldr	r2, [pc, #8]	@ (800359c <stdio_exit_handler+0xc>)
 8003592:	4903      	ldr	r1, [pc, #12]	@ (80035a0 <stdio_exit_handler+0x10>)
 8003594:	4803      	ldr	r0, [pc, #12]	@ (80035a4 <stdio_exit_handler+0x14>)
 8003596:	f000 b869 	b.w	800366c <_fwalk_sglue>
 800359a:	bf00      	nop
 800359c:	2000000c 	.word	0x2000000c
 80035a0:	08003d05 	.word	0x08003d05
 80035a4:	2000001c 	.word	0x2000001c

080035a8 <cleanup_stdio>:
 80035a8:	6841      	ldr	r1, [r0, #4]
 80035aa:	4b0c      	ldr	r3, [pc, #48]	@ (80035dc <cleanup_stdio+0x34>)
 80035ac:	4299      	cmp	r1, r3
 80035ae:	b510      	push	{r4, lr}
 80035b0:	4604      	mov	r4, r0
 80035b2:	d001      	beq.n	80035b8 <cleanup_stdio+0x10>
 80035b4:	f000 fba6 	bl	8003d04 <_fflush_r>
 80035b8:	68a1      	ldr	r1, [r4, #8]
 80035ba:	4b09      	ldr	r3, [pc, #36]	@ (80035e0 <cleanup_stdio+0x38>)
 80035bc:	4299      	cmp	r1, r3
 80035be:	d002      	beq.n	80035c6 <cleanup_stdio+0x1e>
 80035c0:	4620      	mov	r0, r4
 80035c2:	f000 fb9f 	bl	8003d04 <_fflush_r>
 80035c6:	68e1      	ldr	r1, [r4, #12]
 80035c8:	4b06      	ldr	r3, [pc, #24]	@ (80035e4 <cleanup_stdio+0x3c>)
 80035ca:	4299      	cmp	r1, r3
 80035cc:	d004      	beq.n	80035d8 <cleanup_stdio+0x30>
 80035ce:	4620      	mov	r0, r4
 80035d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035d4:	f000 bb96 	b.w	8003d04 <_fflush_r>
 80035d8:	bd10      	pop	{r4, pc}
 80035da:	bf00      	nop
 80035dc:	20000170 	.word	0x20000170
 80035e0:	200001d8 	.word	0x200001d8
 80035e4:	20000240 	.word	0x20000240

080035e8 <global_stdio_init.part.0>:
 80035e8:	b510      	push	{r4, lr}
 80035ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003618 <global_stdio_init.part.0+0x30>)
 80035ec:	4c0b      	ldr	r4, [pc, #44]	@ (800361c <global_stdio_init.part.0+0x34>)
 80035ee:	4a0c      	ldr	r2, [pc, #48]	@ (8003620 <global_stdio_init.part.0+0x38>)
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	4620      	mov	r0, r4
 80035f4:	2200      	movs	r2, #0
 80035f6:	2104      	movs	r1, #4
 80035f8:	f7ff ff94 	bl	8003524 <std>
 80035fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003600:	2201      	movs	r2, #1
 8003602:	2109      	movs	r1, #9
 8003604:	f7ff ff8e 	bl	8003524 <std>
 8003608:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800360c:	2202      	movs	r2, #2
 800360e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003612:	2112      	movs	r1, #18
 8003614:	f7ff bf86 	b.w	8003524 <std>
 8003618:	200002a8 	.word	0x200002a8
 800361c:	20000170 	.word	0x20000170
 8003620:	08003591 	.word	0x08003591

08003624 <__sfp_lock_acquire>:
 8003624:	4801      	ldr	r0, [pc, #4]	@ (800362c <__sfp_lock_acquire+0x8>)
 8003626:	f000 b9ee 	b.w	8003a06 <__retarget_lock_acquire_recursive>
 800362a:	bf00      	nop
 800362c:	200002b1 	.word	0x200002b1

08003630 <__sfp_lock_release>:
 8003630:	4801      	ldr	r0, [pc, #4]	@ (8003638 <__sfp_lock_release+0x8>)
 8003632:	f000 b9e9 	b.w	8003a08 <__retarget_lock_release_recursive>
 8003636:	bf00      	nop
 8003638:	200002b1 	.word	0x200002b1

0800363c <__sinit>:
 800363c:	b510      	push	{r4, lr}
 800363e:	4604      	mov	r4, r0
 8003640:	f7ff fff0 	bl	8003624 <__sfp_lock_acquire>
 8003644:	6a23      	ldr	r3, [r4, #32]
 8003646:	b11b      	cbz	r3, 8003650 <__sinit+0x14>
 8003648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800364c:	f7ff bff0 	b.w	8003630 <__sfp_lock_release>
 8003650:	4b04      	ldr	r3, [pc, #16]	@ (8003664 <__sinit+0x28>)
 8003652:	6223      	str	r3, [r4, #32]
 8003654:	4b04      	ldr	r3, [pc, #16]	@ (8003668 <__sinit+0x2c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1f5      	bne.n	8003648 <__sinit+0xc>
 800365c:	f7ff ffc4 	bl	80035e8 <global_stdio_init.part.0>
 8003660:	e7f2      	b.n	8003648 <__sinit+0xc>
 8003662:	bf00      	nop
 8003664:	080035a9 	.word	0x080035a9
 8003668:	200002a8 	.word	0x200002a8

0800366c <_fwalk_sglue>:
 800366c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003670:	4607      	mov	r7, r0
 8003672:	4688      	mov	r8, r1
 8003674:	4614      	mov	r4, r2
 8003676:	2600      	movs	r6, #0
 8003678:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800367c:	f1b9 0901 	subs.w	r9, r9, #1
 8003680:	d505      	bpl.n	800368e <_fwalk_sglue+0x22>
 8003682:	6824      	ldr	r4, [r4, #0]
 8003684:	2c00      	cmp	r4, #0
 8003686:	d1f7      	bne.n	8003678 <_fwalk_sglue+0xc>
 8003688:	4630      	mov	r0, r6
 800368a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800368e:	89ab      	ldrh	r3, [r5, #12]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d907      	bls.n	80036a4 <_fwalk_sglue+0x38>
 8003694:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003698:	3301      	adds	r3, #1
 800369a:	d003      	beq.n	80036a4 <_fwalk_sglue+0x38>
 800369c:	4629      	mov	r1, r5
 800369e:	4638      	mov	r0, r7
 80036a0:	47c0      	blx	r8
 80036a2:	4306      	orrs	r6, r0
 80036a4:	3568      	adds	r5, #104	@ 0x68
 80036a6:	e7e9      	b.n	800367c <_fwalk_sglue+0x10>

080036a8 <_puts_r>:
 80036a8:	6a03      	ldr	r3, [r0, #32]
 80036aa:	b570      	push	{r4, r5, r6, lr}
 80036ac:	6884      	ldr	r4, [r0, #8]
 80036ae:	4605      	mov	r5, r0
 80036b0:	460e      	mov	r6, r1
 80036b2:	b90b      	cbnz	r3, 80036b8 <_puts_r+0x10>
 80036b4:	f7ff ffc2 	bl	800363c <__sinit>
 80036b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036ba:	07db      	lsls	r3, r3, #31
 80036bc:	d405      	bmi.n	80036ca <_puts_r+0x22>
 80036be:	89a3      	ldrh	r3, [r4, #12]
 80036c0:	0598      	lsls	r0, r3, #22
 80036c2:	d402      	bmi.n	80036ca <_puts_r+0x22>
 80036c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036c6:	f000 f99e 	bl	8003a06 <__retarget_lock_acquire_recursive>
 80036ca:	89a3      	ldrh	r3, [r4, #12]
 80036cc:	0719      	lsls	r1, r3, #28
 80036ce:	d502      	bpl.n	80036d6 <_puts_r+0x2e>
 80036d0:	6923      	ldr	r3, [r4, #16]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d135      	bne.n	8003742 <_puts_r+0x9a>
 80036d6:	4621      	mov	r1, r4
 80036d8:	4628      	mov	r0, r5
 80036da:	f000 f8c5 	bl	8003868 <__swsetup_r>
 80036de:	b380      	cbz	r0, 8003742 <_puts_r+0x9a>
 80036e0:	f04f 35ff 	mov.w	r5, #4294967295
 80036e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036e6:	07da      	lsls	r2, r3, #31
 80036e8:	d405      	bmi.n	80036f6 <_puts_r+0x4e>
 80036ea:	89a3      	ldrh	r3, [r4, #12]
 80036ec:	059b      	lsls	r3, r3, #22
 80036ee:	d402      	bmi.n	80036f6 <_puts_r+0x4e>
 80036f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036f2:	f000 f989 	bl	8003a08 <__retarget_lock_release_recursive>
 80036f6:	4628      	mov	r0, r5
 80036f8:	bd70      	pop	{r4, r5, r6, pc}
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	da04      	bge.n	8003708 <_puts_r+0x60>
 80036fe:	69a2      	ldr	r2, [r4, #24]
 8003700:	429a      	cmp	r2, r3
 8003702:	dc17      	bgt.n	8003734 <_puts_r+0x8c>
 8003704:	290a      	cmp	r1, #10
 8003706:	d015      	beq.n	8003734 <_puts_r+0x8c>
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	6022      	str	r2, [r4, #0]
 800370e:	7019      	strb	r1, [r3, #0]
 8003710:	68a3      	ldr	r3, [r4, #8]
 8003712:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003716:	3b01      	subs	r3, #1
 8003718:	60a3      	str	r3, [r4, #8]
 800371a:	2900      	cmp	r1, #0
 800371c:	d1ed      	bne.n	80036fa <_puts_r+0x52>
 800371e:	2b00      	cmp	r3, #0
 8003720:	da11      	bge.n	8003746 <_puts_r+0x9e>
 8003722:	4622      	mov	r2, r4
 8003724:	210a      	movs	r1, #10
 8003726:	4628      	mov	r0, r5
 8003728:	f000 f85f 	bl	80037ea <__swbuf_r>
 800372c:	3001      	adds	r0, #1
 800372e:	d0d7      	beq.n	80036e0 <_puts_r+0x38>
 8003730:	250a      	movs	r5, #10
 8003732:	e7d7      	b.n	80036e4 <_puts_r+0x3c>
 8003734:	4622      	mov	r2, r4
 8003736:	4628      	mov	r0, r5
 8003738:	f000 f857 	bl	80037ea <__swbuf_r>
 800373c:	3001      	adds	r0, #1
 800373e:	d1e7      	bne.n	8003710 <_puts_r+0x68>
 8003740:	e7ce      	b.n	80036e0 <_puts_r+0x38>
 8003742:	3e01      	subs	r6, #1
 8003744:	e7e4      	b.n	8003710 <_puts_r+0x68>
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	6022      	str	r2, [r4, #0]
 800374c:	220a      	movs	r2, #10
 800374e:	701a      	strb	r2, [r3, #0]
 8003750:	e7ee      	b.n	8003730 <_puts_r+0x88>
	...

08003754 <puts>:
 8003754:	4b02      	ldr	r3, [pc, #8]	@ (8003760 <puts+0xc>)
 8003756:	4601      	mov	r1, r0
 8003758:	6818      	ldr	r0, [r3, #0]
 800375a:	f7ff bfa5 	b.w	80036a8 <_puts_r>
 800375e:	bf00      	nop
 8003760:	20000018 	.word	0x20000018

08003764 <__sread>:
 8003764:	b510      	push	{r4, lr}
 8003766:	460c      	mov	r4, r1
 8003768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800376c:	f000 f8fc 	bl	8003968 <_read_r>
 8003770:	2800      	cmp	r0, #0
 8003772:	bfab      	itete	ge
 8003774:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003776:	89a3      	ldrhlt	r3, [r4, #12]
 8003778:	181b      	addge	r3, r3, r0
 800377a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800377e:	bfac      	ite	ge
 8003780:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003782:	81a3      	strhlt	r3, [r4, #12]
 8003784:	bd10      	pop	{r4, pc}

08003786 <__swrite>:
 8003786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800378a:	461f      	mov	r7, r3
 800378c:	898b      	ldrh	r3, [r1, #12]
 800378e:	05db      	lsls	r3, r3, #23
 8003790:	4605      	mov	r5, r0
 8003792:	460c      	mov	r4, r1
 8003794:	4616      	mov	r6, r2
 8003796:	d505      	bpl.n	80037a4 <__swrite+0x1e>
 8003798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800379c:	2302      	movs	r3, #2
 800379e:	2200      	movs	r2, #0
 80037a0:	f000 f8d0 	bl	8003944 <_lseek_r>
 80037a4:	89a3      	ldrh	r3, [r4, #12]
 80037a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037ae:	81a3      	strh	r3, [r4, #12]
 80037b0:	4632      	mov	r2, r6
 80037b2:	463b      	mov	r3, r7
 80037b4:	4628      	mov	r0, r5
 80037b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037ba:	f000 b8e7 	b.w	800398c <_write_r>

080037be <__sseek>:
 80037be:	b510      	push	{r4, lr}
 80037c0:	460c      	mov	r4, r1
 80037c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037c6:	f000 f8bd 	bl	8003944 <_lseek_r>
 80037ca:	1c43      	adds	r3, r0, #1
 80037cc:	89a3      	ldrh	r3, [r4, #12]
 80037ce:	bf15      	itete	ne
 80037d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80037d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80037d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80037da:	81a3      	strheq	r3, [r4, #12]
 80037dc:	bf18      	it	ne
 80037de:	81a3      	strhne	r3, [r4, #12]
 80037e0:	bd10      	pop	{r4, pc}

080037e2 <__sclose>:
 80037e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037e6:	f000 b89d 	b.w	8003924 <_close_r>

080037ea <__swbuf_r>:
 80037ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ec:	460e      	mov	r6, r1
 80037ee:	4614      	mov	r4, r2
 80037f0:	4605      	mov	r5, r0
 80037f2:	b118      	cbz	r0, 80037fc <__swbuf_r+0x12>
 80037f4:	6a03      	ldr	r3, [r0, #32]
 80037f6:	b90b      	cbnz	r3, 80037fc <__swbuf_r+0x12>
 80037f8:	f7ff ff20 	bl	800363c <__sinit>
 80037fc:	69a3      	ldr	r3, [r4, #24]
 80037fe:	60a3      	str	r3, [r4, #8]
 8003800:	89a3      	ldrh	r3, [r4, #12]
 8003802:	071a      	lsls	r2, r3, #28
 8003804:	d501      	bpl.n	800380a <__swbuf_r+0x20>
 8003806:	6923      	ldr	r3, [r4, #16]
 8003808:	b943      	cbnz	r3, 800381c <__swbuf_r+0x32>
 800380a:	4621      	mov	r1, r4
 800380c:	4628      	mov	r0, r5
 800380e:	f000 f82b 	bl	8003868 <__swsetup_r>
 8003812:	b118      	cbz	r0, 800381c <__swbuf_r+0x32>
 8003814:	f04f 37ff 	mov.w	r7, #4294967295
 8003818:	4638      	mov	r0, r7
 800381a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	6922      	ldr	r2, [r4, #16]
 8003820:	1a98      	subs	r0, r3, r2
 8003822:	6963      	ldr	r3, [r4, #20]
 8003824:	b2f6      	uxtb	r6, r6
 8003826:	4283      	cmp	r3, r0
 8003828:	4637      	mov	r7, r6
 800382a:	dc05      	bgt.n	8003838 <__swbuf_r+0x4e>
 800382c:	4621      	mov	r1, r4
 800382e:	4628      	mov	r0, r5
 8003830:	f000 fa68 	bl	8003d04 <_fflush_r>
 8003834:	2800      	cmp	r0, #0
 8003836:	d1ed      	bne.n	8003814 <__swbuf_r+0x2a>
 8003838:	68a3      	ldr	r3, [r4, #8]
 800383a:	3b01      	subs	r3, #1
 800383c:	60a3      	str	r3, [r4, #8]
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	6022      	str	r2, [r4, #0]
 8003844:	701e      	strb	r6, [r3, #0]
 8003846:	6962      	ldr	r2, [r4, #20]
 8003848:	1c43      	adds	r3, r0, #1
 800384a:	429a      	cmp	r2, r3
 800384c:	d004      	beq.n	8003858 <__swbuf_r+0x6e>
 800384e:	89a3      	ldrh	r3, [r4, #12]
 8003850:	07db      	lsls	r3, r3, #31
 8003852:	d5e1      	bpl.n	8003818 <__swbuf_r+0x2e>
 8003854:	2e0a      	cmp	r6, #10
 8003856:	d1df      	bne.n	8003818 <__swbuf_r+0x2e>
 8003858:	4621      	mov	r1, r4
 800385a:	4628      	mov	r0, r5
 800385c:	f000 fa52 	bl	8003d04 <_fflush_r>
 8003860:	2800      	cmp	r0, #0
 8003862:	d0d9      	beq.n	8003818 <__swbuf_r+0x2e>
 8003864:	e7d6      	b.n	8003814 <__swbuf_r+0x2a>
	...

08003868 <__swsetup_r>:
 8003868:	b538      	push	{r3, r4, r5, lr}
 800386a:	4b29      	ldr	r3, [pc, #164]	@ (8003910 <__swsetup_r+0xa8>)
 800386c:	4605      	mov	r5, r0
 800386e:	6818      	ldr	r0, [r3, #0]
 8003870:	460c      	mov	r4, r1
 8003872:	b118      	cbz	r0, 800387c <__swsetup_r+0x14>
 8003874:	6a03      	ldr	r3, [r0, #32]
 8003876:	b90b      	cbnz	r3, 800387c <__swsetup_r+0x14>
 8003878:	f7ff fee0 	bl	800363c <__sinit>
 800387c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003880:	0719      	lsls	r1, r3, #28
 8003882:	d422      	bmi.n	80038ca <__swsetup_r+0x62>
 8003884:	06da      	lsls	r2, r3, #27
 8003886:	d407      	bmi.n	8003898 <__swsetup_r+0x30>
 8003888:	2209      	movs	r2, #9
 800388a:	602a      	str	r2, [r5, #0]
 800388c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003890:	81a3      	strh	r3, [r4, #12]
 8003892:	f04f 30ff 	mov.w	r0, #4294967295
 8003896:	e033      	b.n	8003900 <__swsetup_r+0x98>
 8003898:	0758      	lsls	r0, r3, #29
 800389a:	d512      	bpl.n	80038c2 <__swsetup_r+0x5a>
 800389c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800389e:	b141      	cbz	r1, 80038b2 <__swsetup_r+0x4a>
 80038a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80038a4:	4299      	cmp	r1, r3
 80038a6:	d002      	beq.n	80038ae <__swsetup_r+0x46>
 80038a8:	4628      	mov	r0, r5
 80038aa:	f000 f8af 	bl	8003a0c <_free_r>
 80038ae:	2300      	movs	r3, #0
 80038b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80038b2:	89a3      	ldrh	r3, [r4, #12]
 80038b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80038b8:	81a3      	strh	r3, [r4, #12]
 80038ba:	2300      	movs	r3, #0
 80038bc:	6063      	str	r3, [r4, #4]
 80038be:	6923      	ldr	r3, [r4, #16]
 80038c0:	6023      	str	r3, [r4, #0]
 80038c2:	89a3      	ldrh	r3, [r4, #12]
 80038c4:	f043 0308 	orr.w	r3, r3, #8
 80038c8:	81a3      	strh	r3, [r4, #12]
 80038ca:	6923      	ldr	r3, [r4, #16]
 80038cc:	b94b      	cbnz	r3, 80038e2 <__swsetup_r+0x7a>
 80038ce:	89a3      	ldrh	r3, [r4, #12]
 80038d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80038d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038d8:	d003      	beq.n	80038e2 <__swsetup_r+0x7a>
 80038da:	4621      	mov	r1, r4
 80038dc:	4628      	mov	r0, r5
 80038de:	f000 fa5f 	bl	8003da0 <__smakebuf_r>
 80038e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038e6:	f013 0201 	ands.w	r2, r3, #1
 80038ea:	d00a      	beq.n	8003902 <__swsetup_r+0x9a>
 80038ec:	2200      	movs	r2, #0
 80038ee:	60a2      	str	r2, [r4, #8]
 80038f0:	6962      	ldr	r2, [r4, #20]
 80038f2:	4252      	negs	r2, r2
 80038f4:	61a2      	str	r2, [r4, #24]
 80038f6:	6922      	ldr	r2, [r4, #16]
 80038f8:	b942      	cbnz	r2, 800390c <__swsetup_r+0xa4>
 80038fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80038fe:	d1c5      	bne.n	800388c <__swsetup_r+0x24>
 8003900:	bd38      	pop	{r3, r4, r5, pc}
 8003902:	0799      	lsls	r1, r3, #30
 8003904:	bf58      	it	pl
 8003906:	6962      	ldrpl	r2, [r4, #20]
 8003908:	60a2      	str	r2, [r4, #8]
 800390a:	e7f4      	b.n	80038f6 <__swsetup_r+0x8e>
 800390c:	2000      	movs	r0, #0
 800390e:	e7f7      	b.n	8003900 <__swsetup_r+0x98>
 8003910:	20000018 	.word	0x20000018

08003914 <memset>:
 8003914:	4402      	add	r2, r0
 8003916:	4603      	mov	r3, r0
 8003918:	4293      	cmp	r3, r2
 800391a:	d100      	bne.n	800391e <memset+0xa>
 800391c:	4770      	bx	lr
 800391e:	f803 1b01 	strb.w	r1, [r3], #1
 8003922:	e7f9      	b.n	8003918 <memset+0x4>

08003924 <_close_r>:
 8003924:	b538      	push	{r3, r4, r5, lr}
 8003926:	4d06      	ldr	r5, [pc, #24]	@ (8003940 <_close_r+0x1c>)
 8003928:	2300      	movs	r3, #0
 800392a:	4604      	mov	r4, r0
 800392c:	4608      	mov	r0, r1
 800392e:	602b      	str	r3, [r5, #0]
 8003930:	f7fd fa22 	bl	8000d78 <_close>
 8003934:	1c43      	adds	r3, r0, #1
 8003936:	d102      	bne.n	800393e <_close_r+0x1a>
 8003938:	682b      	ldr	r3, [r5, #0]
 800393a:	b103      	cbz	r3, 800393e <_close_r+0x1a>
 800393c:	6023      	str	r3, [r4, #0]
 800393e:	bd38      	pop	{r3, r4, r5, pc}
 8003940:	200002ac 	.word	0x200002ac

08003944 <_lseek_r>:
 8003944:	b538      	push	{r3, r4, r5, lr}
 8003946:	4d07      	ldr	r5, [pc, #28]	@ (8003964 <_lseek_r+0x20>)
 8003948:	4604      	mov	r4, r0
 800394a:	4608      	mov	r0, r1
 800394c:	4611      	mov	r1, r2
 800394e:	2200      	movs	r2, #0
 8003950:	602a      	str	r2, [r5, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	f7fd fa37 	bl	8000dc6 <_lseek>
 8003958:	1c43      	adds	r3, r0, #1
 800395a:	d102      	bne.n	8003962 <_lseek_r+0x1e>
 800395c:	682b      	ldr	r3, [r5, #0]
 800395e:	b103      	cbz	r3, 8003962 <_lseek_r+0x1e>
 8003960:	6023      	str	r3, [r4, #0]
 8003962:	bd38      	pop	{r3, r4, r5, pc}
 8003964:	200002ac 	.word	0x200002ac

08003968 <_read_r>:
 8003968:	b538      	push	{r3, r4, r5, lr}
 800396a:	4d07      	ldr	r5, [pc, #28]	@ (8003988 <_read_r+0x20>)
 800396c:	4604      	mov	r4, r0
 800396e:	4608      	mov	r0, r1
 8003970:	4611      	mov	r1, r2
 8003972:	2200      	movs	r2, #0
 8003974:	602a      	str	r2, [r5, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	f7fd f9c5 	bl	8000d06 <_read>
 800397c:	1c43      	adds	r3, r0, #1
 800397e:	d102      	bne.n	8003986 <_read_r+0x1e>
 8003980:	682b      	ldr	r3, [r5, #0]
 8003982:	b103      	cbz	r3, 8003986 <_read_r+0x1e>
 8003984:	6023      	str	r3, [r4, #0]
 8003986:	bd38      	pop	{r3, r4, r5, pc}
 8003988:	200002ac 	.word	0x200002ac

0800398c <_write_r>:
 800398c:	b538      	push	{r3, r4, r5, lr}
 800398e:	4d07      	ldr	r5, [pc, #28]	@ (80039ac <_write_r+0x20>)
 8003990:	4604      	mov	r4, r0
 8003992:	4608      	mov	r0, r1
 8003994:	4611      	mov	r1, r2
 8003996:	2200      	movs	r2, #0
 8003998:	602a      	str	r2, [r5, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	f7fd f9d0 	bl	8000d40 <_write>
 80039a0:	1c43      	adds	r3, r0, #1
 80039a2:	d102      	bne.n	80039aa <_write_r+0x1e>
 80039a4:	682b      	ldr	r3, [r5, #0]
 80039a6:	b103      	cbz	r3, 80039aa <_write_r+0x1e>
 80039a8:	6023      	str	r3, [r4, #0]
 80039aa:	bd38      	pop	{r3, r4, r5, pc}
 80039ac:	200002ac 	.word	0x200002ac

080039b0 <__errno>:
 80039b0:	4b01      	ldr	r3, [pc, #4]	@ (80039b8 <__errno+0x8>)
 80039b2:	6818      	ldr	r0, [r3, #0]
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	20000018 	.word	0x20000018

080039bc <__libc_init_array>:
 80039bc:	b570      	push	{r4, r5, r6, lr}
 80039be:	4d0d      	ldr	r5, [pc, #52]	@ (80039f4 <__libc_init_array+0x38>)
 80039c0:	4c0d      	ldr	r4, [pc, #52]	@ (80039f8 <__libc_init_array+0x3c>)
 80039c2:	1b64      	subs	r4, r4, r5
 80039c4:	10a4      	asrs	r4, r4, #2
 80039c6:	2600      	movs	r6, #0
 80039c8:	42a6      	cmp	r6, r4
 80039ca:	d109      	bne.n	80039e0 <__libc_init_array+0x24>
 80039cc:	4d0b      	ldr	r5, [pc, #44]	@ (80039fc <__libc_init_array+0x40>)
 80039ce:	4c0c      	ldr	r4, [pc, #48]	@ (8003a00 <__libc_init_array+0x44>)
 80039d0:	f000 fa54 	bl	8003e7c <_init>
 80039d4:	1b64      	subs	r4, r4, r5
 80039d6:	10a4      	asrs	r4, r4, #2
 80039d8:	2600      	movs	r6, #0
 80039da:	42a6      	cmp	r6, r4
 80039dc:	d105      	bne.n	80039ea <__libc_init_array+0x2e>
 80039de:	bd70      	pop	{r4, r5, r6, pc}
 80039e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e4:	4798      	blx	r3
 80039e6:	3601      	adds	r6, #1
 80039e8:	e7ee      	b.n	80039c8 <__libc_init_array+0xc>
 80039ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ee:	4798      	blx	r3
 80039f0:	3601      	adds	r6, #1
 80039f2:	e7f2      	b.n	80039da <__libc_init_array+0x1e>
 80039f4:	08003ed4 	.word	0x08003ed4
 80039f8:	08003ed4 	.word	0x08003ed4
 80039fc:	08003ed4 	.word	0x08003ed4
 8003a00:	08003ed8 	.word	0x08003ed8

08003a04 <__retarget_lock_init_recursive>:
 8003a04:	4770      	bx	lr

08003a06 <__retarget_lock_acquire_recursive>:
 8003a06:	4770      	bx	lr

08003a08 <__retarget_lock_release_recursive>:
 8003a08:	4770      	bx	lr
	...

08003a0c <_free_r>:
 8003a0c:	b538      	push	{r3, r4, r5, lr}
 8003a0e:	4605      	mov	r5, r0
 8003a10:	2900      	cmp	r1, #0
 8003a12:	d041      	beq.n	8003a98 <_free_r+0x8c>
 8003a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a18:	1f0c      	subs	r4, r1, #4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	bfb8      	it	lt
 8003a1e:	18e4      	addlt	r4, r4, r3
 8003a20:	f000 f8e0 	bl	8003be4 <__malloc_lock>
 8003a24:	4a1d      	ldr	r2, [pc, #116]	@ (8003a9c <_free_r+0x90>)
 8003a26:	6813      	ldr	r3, [r2, #0]
 8003a28:	b933      	cbnz	r3, 8003a38 <_free_r+0x2c>
 8003a2a:	6063      	str	r3, [r4, #4]
 8003a2c:	6014      	str	r4, [r2, #0]
 8003a2e:	4628      	mov	r0, r5
 8003a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a34:	f000 b8dc 	b.w	8003bf0 <__malloc_unlock>
 8003a38:	42a3      	cmp	r3, r4
 8003a3a:	d908      	bls.n	8003a4e <_free_r+0x42>
 8003a3c:	6820      	ldr	r0, [r4, #0]
 8003a3e:	1821      	adds	r1, r4, r0
 8003a40:	428b      	cmp	r3, r1
 8003a42:	bf01      	itttt	eq
 8003a44:	6819      	ldreq	r1, [r3, #0]
 8003a46:	685b      	ldreq	r3, [r3, #4]
 8003a48:	1809      	addeq	r1, r1, r0
 8003a4a:	6021      	streq	r1, [r4, #0]
 8003a4c:	e7ed      	b.n	8003a2a <_free_r+0x1e>
 8003a4e:	461a      	mov	r2, r3
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	b10b      	cbz	r3, 8003a58 <_free_r+0x4c>
 8003a54:	42a3      	cmp	r3, r4
 8003a56:	d9fa      	bls.n	8003a4e <_free_r+0x42>
 8003a58:	6811      	ldr	r1, [r2, #0]
 8003a5a:	1850      	adds	r0, r2, r1
 8003a5c:	42a0      	cmp	r0, r4
 8003a5e:	d10b      	bne.n	8003a78 <_free_r+0x6c>
 8003a60:	6820      	ldr	r0, [r4, #0]
 8003a62:	4401      	add	r1, r0
 8003a64:	1850      	adds	r0, r2, r1
 8003a66:	4283      	cmp	r3, r0
 8003a68:	6011      	str	r1, [r2, #0]
 8003a6a:	d1e0      	bne.n	8003a2e <_free_r+0x22>
 8003a6c:	6818      	ldr	r0, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	6053      	str	r3, [r2, #4]
 8003a72:	4408      	add	r0, r1
 8003a74:	6010      	str	r0, [r2, #0]
 8003a76:	e7da      	b.n	8003a2e <_free_r+0x22>
 8003a78:	d902      	bls.n	8003a80 <_free_r+0x74>
 8003a7a:	230c      	movs	r3, #12
 8003a7c:	602b      	str	r3, [r5, #0]
 8003a7e:	e7d6      	b.n	8003a2e <_free_r+0x22>
 8003a80:	6820      	ldr	r0, [r4, #0]
 8003a82:	1821      	adds	r1, r4, r0
 8003a84:	428b      	cmp	r3, r1
 8003a86:	bf04      	itt	eq
 8003a88:	6819      	ldreq	r1, [r3, #0]
 8003a8a:	685b      	ldreq	r3, [r3, #4]
 8003a8c:	6063      	str	r3, [r4, #4]
 8003a8e:	bf04      	itt	eq
 8003a90:	1809      	addeq	r1, r1, r0
 8003a92:	6021      	streq	r1, [r4, #0]
 8003a94:	6054      	str	r4, [r2, #4]
 8003a96:	e7ca      	b.n	8003a2e <_free_r+0x22>
 8003a98:	bd38      	pop	{r3, r4, r5, pc}
 8003a9a:	bf00      	nop
 8003a9c:	200002b8 	.word	0x200002b8

08003aa0 <sbrk_aligned>:
 8003aa0:	b570      	push	{r4, r5, r6, lr}
 8003aa2:	4e0f      	ldr	r6, [pc, #60]	@ (8003ae0 <sbrk_aligned+0x40>)
 8003aa4:	460c      	mov	r4, r1
 8003aa6:	6831      	ldr	r1, [r6, #0]
 8003aa8:	4605      	mov	r5, r0
 8003aaa:	b911      	cbnz	r1, 8003ab2 <sbrk_aligned+0x12>
 8003aac:	f000 f9d6 	bl	8003e5c <_sbrk_r>
 8003ab0:	6030      	str	r0, [r6, #0]
 8003ab2:	4621      	mov	r1, r4
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	f000 f9d1 	bl	8003e5c <_sbrk_r>
 8003aba:	1c43      	adds	r3, r0, #1
 8003abc:	d103      	bne.n	8003ac6 <sbrk_aligned+0x26>
 8003abe:	f04f 34ff 	mov.w	r4, #4294967295
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	bd70      	pop	{r4, r5, r6, pc}
 8003ac6:	1cc4      	adds	r4, r0, #3
 8003ac8:	f024 0403 	bic.w	r4, r4, #3
 8003acc:	42a0      	cmp	r0, r4
 8003ace:	d0f8      	beq.n	8003ac2 <sbrk_aligned+0x22>
 8003ad0:	1a21      	subs	r1, r4, r0
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	f000 f9c2 	bl	8003e5c <_sbrk_r>
 8003ad8:	3001      	adds	r0, #1
 8003ada:	d1f2      	bne.n	8003ac2 <sbrk_aligned+0x22>
 8003adc:	e7ef      	b.n	8003abe <sbrk_aligned+0x1e>
 8003ade:	bf00      	nop
 8003ae0:	200002b4 	.word	0x200002b4

08003ae4 <_malloc_r>:
 8003ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ae8:	1ccd      	adds	r5, r1, #3
 8003aea:	f025 0503 	bic.w	r5, r5, #3
 8003aee:	3508      	adds	r5, #8
 8003af0:	2d0c      	cmp	r5, #12
 8003af2:	bf38      	it	cc
 8003af4:	250c      	movcc	r5, #12
 8003af6:	2d00      	cmp	r5, #0
 8003af8:	4606      	mov	r6, r0
 8003afa:	db01      	blt.n	8003b00 <_malloc_r+0x1c>
 8003afc:	42a9      	cmp	r1, r5
 8003afe:	d904      	bls.n	8003b0a <_malloc_r+0x26>
 8003b00:	230c      	movs	r3, #12
 8003b02:	6033      	str	r3, [r6, #0]
 8003b04:	2000      	movs	r0, #0
 8003b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003be0 <_malloc_r+0xfc>
 8003b0e:	f000 f869 	bl	8003be4 <__malloc_lock>
 8003b12:	f8d8 3000 	ldr.w	r3, [r8]
 8003b16:	461c      	mov	r4, r3
 8003b18:	bb44      	cbnz	r4, 8003b6c <_malloc_r+0x88>
 8003b1a:	4629      	mov	r1, r5
 8003b1c:	4630      	mov	r0, r6
 8003b1e:	f7ff ffbf 	bl	8003aa0 <sbrk_aligned>
 8003b22:	1c43      	adds	r3, r0, #1
 8003b24:	4604      	mov	r4, r0
 8003b26:	d158      	bne.n	8003bda <_malloc_r+0xf6>
 8003b28:	f8d8 4000 	ldr.w	r4, [r8]
 8003b2c:	4627      	mov	r7, r4
 8003b2e:	2f00      	cmp	r7, #0
 8003b30:	d143      	bne.n	8003bba <_malloc_r+0xd6>
 8003b32:	2c00      	cmp	r4, #0
 8003b34:	d04b      	beq.n	8003bce <_malloc_r+0xea>
 8003b36:	6823      	ldr	r3, [r4, #0]
 8003b38:	4639      	mov	r1, r7
 8003b3a:	4630      	mov	r0, r6
 8003b3c:	eb04 0903 	add.w	r9, r4, r3
 8003b40:	f000 f98c 	bl	8003e5c <_sbrk_r>
 8003b44:	4581      	cmp	r9, r0
 8003b46:	d142      	bne.n	8003bce <_malloc_r+0xea>
 8003b48:	6821      	ldr	r1, [r4, #0]
 8003b4a:	1a6d      	subs	r5, r5, r1
 8003b4c:	4629      	mov	r1, r5
 8003b4e:	4630      	mov	r0, r6
 8003b50:	f7ff ffa6 	bl	8003aa0 <sbrk_aligned>
 8003b54:	3001      	adds	r0, #1
 8003b56:	d03a      	beq.n	8003bce <_malloc_r+0xea>
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	442b      	add	r3, r5
 8003b5c:	6023      	str	r3, [r4, #0]
 8003b5e:	f8d8 3000 	ldr.w	r3, [r8]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	bb62      	cbnz	r2, 8003bc0 <_malloc_r+0xdc>
 8003b66:	f8c8 7000 	str.w	r7, [r8]
 8003b6a:	e00f      	b.n	8003b8c <_malloc_r+0xa8>
 8003b6c:	6822      	ldr	r2, [r4, #0]
 8003b6e:	1b52      	subs	r2, r2, r5
 8003b70:	d420      	bmi.n	8003bb4 <_malloc_r+0xd0>
 8003b72:	2a0b      	cmp	r2, #11
 8003b74:	d917      	bls.n	8003ba6 <_malloc_r+0xc2>
 8003b76:	1961      	adds	r1, r4, r5
 8003b78:	42a3      	cmp	r3, r4
 8003b7a:	6025      	str	r5, [r4, #0]
 8003b7c:	bf18      	it	ne
 8003b7e:	6059      	strne	r1, [r3, #4]
 8003b80:	6863      	ldr	r3, [r4, #4]
 8003b82:	bf08      	it	eq
 8003b84:	f8c8 1000 	streq.w	r1, [r8]
 8003b88:	5162      	str	r2, [r4, r5]
 8003b8a:	604b      	str	r3, [r1, #4]
 8003b8c:	4630      	mov	r0, r6
 8003b8e:	f000 f82f 	bl	8003bf0 <__malloc_unlock>
 8003b92:	f104 000b 	add.w	r0, r4, #11
 8003b96:	1d23      	adds	r3, r4, #4
 8003b98:	f020 0007 	bic.w	r0, r0, #7
 8003b9c:	1ac2      	subs	r2, r0, r3
 8003b9e:	bf1c      	itt	ne
 8003ba0:	1a1b      	subne	r3, r3, r0
 8003ba2:	50a3      	strne	r3, [r4, r2]
 8003ba4:	e7af      	b.n	8003b06 <_malloc_r+0x22>
 8003ba6:	6862      	ldr	r2, [r4, #4]
 8003ba8:	42a3      	cmp	r3, r4
 8003baa:	bf0c      	ite	eq
 8003bac:	f8c8 2000 	streq.w	r2, [r8]
 8003bb0:	605a      	strne	r2, [r3, #4]
 8003bb2:	e7eb      	b.n	8003b8c <_malloc_r+0xa8>
 8003bb4:	4623      	mov	r3, r4
 8003bb6:	6864      	ldr	r4, [r4, #4]
 8003bb8:	e7ae      	b.n	8003b18 <_malloc_r+0x34>
 8003bba:	463c      	mov	r4, r7
 8003bbc:	687f      	ldr	r7, [r7, #4]
 8003bbe:	e7b6      	b.n	8003b2e <_malloc_r+0x4a>
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	42a3      	cmp	r3, r4
 8003bc6:	d1fb      	bne.n	8003bc0 <_malloc_r+0xdc>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	6053      	str	r3, [r2, #4]
 8003bcc:	e7de      	b.n	8003b8c <_malloc_r+0xa8>
 8003bce:	230c      	movs	r3, #12
 8003bd0:	6033      	str	r3, [r6, #0]
 8003bd2:	4630      	mov	r0, r6
 8003bd4:	f000 f80c 	bl	8003bf0 <__malloc_unlock>
 8003bd8:	e794      	b.n	8003b04 <_malloc_r+0x20>
 8003bda:	6005      	str	r5, [r0, #0]
 8003bdc:	e7d6      	b.n	8003b8c <_malloc_r+0xa8>
 8003bde:	bf00      	nop
 8003be0:	200002b8 	.word	0x200002b8

08003be4 <__malloc_lock>:
 8003be4:	4801      	ldr	r0, [pc, #4]	@ (8003bec <__malloc_lock+0x8>)
 8003be6:	f7ff bf0e 	b.w	8003a06 <__retarget_lock_acquire_recursive>
 8003bea:	bf00      	nop
 8003bec:	200002b0 	.word	0x200002b0

08003bf0 <__malloc_unlock>:
 8003bf0:	4801      	ldr	r0, [pc, #4]	@ (8003bf8 <__malloc_unlock+0x8>)
 8003bf2:	f7ff bf09 	b.w	8003a08 <__retarget_lock_release_recursive>
 8003bf6:	bf00      	nop
 8003bf8:	200002b0 	.word	0x200002b0

08003bfc <__sflush_r>:
 8003bfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c04:	0716      	lsls	r6, r2, #28
 8003c06:	4605      	mov	r5, r0
 8003c08:	460c      	mov	r4, r1
 8003c0a:	d454      	bmi.n	8003cb6 <__sflush_r+0xba>
 8003c0c:	684b      	ldr	r3, [r1, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	dc02      	bgt.n	8003c18 <__sflush_r+0x1c>
 8003c12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	dd48      	ble.n	8003caa <__sflush_r+0xae>
 8003c18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c1a:	2e00      	cmp	r6, #0
 8003c1c:	d045      	beq.n	8003caa <__sflush_r+0xae>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003c24:	682f      	ldr	r7, [r5, #0]
 8003c26:	6a21      	ldr	r1, [r4, #32]
 8003c28:	602b      	str	r3, [r5, #0]
 8003c2a:	d030      	beq.n	8003c8e <__sflush_r+0x92>
 8003c2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003c2e:	89a3      	ldrh	r3, [r4, #12]
 8003c30:	0759      	lsls	r1, r3, #29
 8003c32:	d505      	bpl.n	8003c40 <__sflush_r+0x44>
 8003c34:	6863      	ldr	r3, [r4, #4]
 8003c36:	1ad2      	subs	r2, r2, r3
 8003c38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003c3a:	b10b      	cbz	r3, 8003c40 <__sflush_r+0x44>
 8003c3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c3e:	1ad2      	subs	r2, r2, r3
 8003c40:	2300      	movs	r3, #0
 8003c42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c44:	6a21      	ldr	r1, [r4, #32]
 8003c46:	4628      	mov	r0, r5
 8003c48:	47b0      	blx	r6
 8003c4a:	1c43      	adds	r3, r0, #1
 8003c4c:	89a3      	ldrh	r3, [r4, #12]
 8003c4e:	d106      	bne.n	8003c5e <__sflush_r+0x62>
 8003c50:	6829      	ldr	r1, [r5, #0]
 8003c52:	291d      	cmp	r1, #29
 8003c54:	d82b      	bhi.n	8003cae <__sflush_r+0xb2>
 8003c56:	4a2a      	ldr	r2, [pc, #168]	@ (8003d00 <__sflush_r+0x104>)
 8003c58:	410a      	asrs	r2, r1
 8003c5a:	07d6      	lsls	r6, r2, #31
 8003c5c:	d427      	bmi.n	8003cae <__sflush_r+0xb2>
 8003c5e:	2200      	movs	r2, #0
 8003c60:	6062      	str	r2, [r4, #4]
 8003c62:	04d9      	lsls	r1, r3, #19
 8003c64:	6922      	ldr	r2, [r4, #16]
 8003c66:	6022      	str	r2, [r4, #0]
 8003c68:	d504      	bpl.n	8003c74 <__sflush_r+0x78>
 8003c6a:	1c42      	adds	r2, r0, #1
 8003c6c:	d101      	bne.n	8003c72 <__sflush_r+0x76>
 8003c6e:	682b      	ldr	r3, [r5, #0]
 8003c70:	b903      	cbnz	r3, 8003c74 <__sflush_r+0x78>
 8003c72:	6560      	str	r0, [r4, #84]	@ 0x54
 8003c74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c76:	602f      	str	r7, [r5, #0]
 8003c78:	b1b9      	cbz	r1, 8003caa <__sflush_r+0xae>
 8003c7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c7e:	4299      	cmp	r1, r3
 8003c80:	d002      	beq.n	8003c88 <__sflush_r+0x8c>
 8003c82:	4628      	mov	r0, r5
 8003c84:	f7ff fec2 	bl	8003a0c <_free_r>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c8c:	e00d      	b.n	8003caa <__sflush_r+0xae>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	4628      	mov	r0, r5
 8003c92:	47b0      	blx	r6
 8003c94:	4602      	mov	r2, r0
 8003c96:	1c50      	adds	r0, r2, #1
 8003c98:	d1c9      	bne.n	8003c2e <__sflush_r+0x32>
 8003c9a:	682b      	ldr	r3, [r5, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0c6      	beq.n	8003c2e <__sflush_r+0x32>
 8003ca0:	2b1d      	cmp	r3, #29
 8003ca2:	d001      	beq.n	8003ca8 <__sflush_r+0xac>
 8003ca4:	2b16      	cmp	r3, #22
 8003ca6:	d11e      	bne.n	8003ce6 <__sflush_r+0xea>
 8003ca8:	602f      	str	r7, [r5, #0]
 8003caa:	2000      	movs	r0, #0
 8003cac:	e022      	b.n	8003cf4 <__sflush_r+0xf8>
 8003cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cb2:	b21b      	sxth	r3, r3
 8003cb4:	e01b      	b.n	8003cee <__sflush_r+0xf2>
 8003cb6:	690f      	ldr	r7, [r1, #16]
 8003cb8:	2f00      	cmp	r7, #0
 8003cba:	d0f6      	beq.n	8003caa <__sflush_r+0xae>
 8003cbc:	0793      	lsls	r3, r2, #30
 8003cbe:	680e      	ldr	r6, [r1, #0]
 8003cc0:	bf08      	it	eq
 8003cc2:	694b      	ldreq	r3, [r1, #20]
 8003cc4:	600f      	str	r7, [r1, #0]
 8003cc6:	bf18      	it	ne
 8003cc8:	2300      	movne	r3, #0
 8003cca:	eba6 0807 	sub.w	r8, r6, r7
 8003cce:	608b      	str	r3, [r1, #8]
 8003cd0:	f1b8 0f00 	cmp.w	r8, #0
 8003cd4:	dde9      	ble.n	8003caa <__sflush_r+0xae>
 8003cd6:	6a21      	ldr	r1, [r4, #32]
 8003cd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003cda:	4643      	mov	r3, r8
 8003cdc:	463a      	mov	r2, r7
 8003cde:	4628      	mov	r0, r5
 8003ce0:	47b0      	blx	r6
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	dc08      	bgt.n	8003cf8 <__sflush_r+0xfc>
 8003ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cee:	81a3      	strh	r3, [r4, #12]
 8003cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cf8:	4407      	add	r7, r0
 8003cfa:	eba8 0800 	sub.w	r8, r8, r0
 8003cfe:	e7e7      	b.n	8003cd0 <__sflush_r+0xd4>
 8003d00:	dfbffffe 	.word	0xdfbffffe

08003d04 <_fflush_r>:
 8003d04:	b538      	push	{r3, r4, r5, lr}
 8003d06:	690b      	ldr	r3, [r1, #16]
 8003d08:	4605      	mov	r5, r0
 8003d0a:	460c      	mov	r4, r1
 8003d0c:	b913      	cbnz	r3, 8003d14 <_fflush_r+0x10>
 8003d0e:	2500      	movs	r5, #0
 8003d10:	4628      	mov	r0, r5
 8003d12:	bd38      	pop	{r3, r4, r5, pc}
 8003d14:	b118      	cbz	r0, 8003d1e <_fflush_r+0x1a>
 8003d16:	6a03      	ldr	r3, [r0, #32]
 8003d18:	b90b      	cbnz	r3, 8003d1e <_fflush_r+0x1a>
 8003d1a:	f7ff fc8f 	bl	800363c <__sinit>
 8003d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f3      	beq.n	8003d0e <_fflush_r+0xa>
 8003d26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003d28:	07d0      	lsls	r0, r2, #31
 8003d2a:	d404      	bmi.n	8003d36 <_fflush_r+0x32>
 8003d2c:	0599      	lsls	r1, r3, #22
 8003d2e:	d402      	bmi.n	8003d36 <_fflush_r+0x32>
 8003d30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d32:	f7ff fe68 	bl	8003a06 <__retarget_lock_acquire_recursive>
 8003d36:	4628      	mov	r0, r5
 8003d38:	4621      	mov	r1, r4
 8003d3a:	f7ff ff5f 	bl	8003bfc <__sflush_r>
 8003d3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d40:	07da      	lsls	r2, r3, #31
 8003d42:	4605      	mov	r5, r0
 8003d44:	d4e4      	bmi.n	8003d10 <_fflush_r+0xc>
 8003d46:	89a3      	ldrh	r3, [r4, #12]
 8003d48:	059b      	lsls	r3, r3, #22
 8003d4a:	d4e1      	bmi.n	8003d10 <_fflush_r+0xc>
 8003d4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d4e:	f7ff fe5b 	bl	8003a08 <__retarget_lock_release_recursive>
 8003d52:	e7dd      	b.n	8003d10 <_fflush_r+0xc>

08003d54 <__swhatbuf_r>:
 8003d54:	b570      	push	{r4, r5, r6, lr}
 8003d56:	460c      	mov	r4, r1
 8003d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d5c:	2900      	cmp	r1, #0
 8003d5e:	b096      	sub	sp, #88	@ 0x58
 8003d60:	4615      	mov	r5, r2
 8003d62:	461e      	mov	r6, r3
 8003d64:	da0d      	bge.n	8003d82 <__swhatbuf_r+0x2e>
 8003d66:	89a3      	ldrh	r3, [r4, #12]
 8003d68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003d6c:	f04f 0100 	mov.w	r1, #0
 8003d70:	bf14      	ite	ne
 8003d72:	2340      	movne	r3, #64	@ 0x40
 8003d74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003d78:	2000      	movs	r0, #0
 8003d7a:	6031      	str	r1, [r6, #0]
 8003d7c:	602b      	str	r3, [r5, #0]
 8003d7e:	b016      	add	sp, #88	@ 0x58
 8003d80:	bd70      	pop	{r4, r5, r6, pc}
 8003d82:	466a      	mov	r2, sp
 8003d84:	f000 f848 	bl	8003e18 <_fstat_r>
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	dbec      	blt.n	8003d66 <__swhatbuf_r+0x12>
 8003d8c:	9901      	ldr	r1, [sp, #4]
 8003d8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003d92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003d96:	4259      	negs	r1, r3
 8003d98:	4159      	adcs	r1, r3
 8003d9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d9e:	e7eb      	b.n	8003d78 <__swhatbuf_r+0x24>

08003da0 <__smakebuf_r>:
 8003da0:	898b      	ldrh	r3, [r1, #12]
 8003da2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003da4:	079d      	lsls	r5, r3, #30
 8003da6:	4606      	mov	r6, r0
 8003da8:	460c      	mov	r4, r1
 8003daa:	d507      	bpl.n	8003dbc <__smakebuf_r+0x1c>
 8003dac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003db0:	6023      	str	r3, [r4, #0]
 8003db2:	6123      	str	r3, [r4, #16]
 8003db4:	2301      	movs	r3, #1
 8003db6:	6163      	str	r3, [r4, #20]
 8003db8:	b003      	add	sp, #12
 8003dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dbc:	ab01      	add	r3, sp, #4
 8003dbe:	466a      	mov	r2, sp
 8003dc0:	f7ff ffc8 	bl	8003d54 <__swhatbuf_r>
 8003dc4:	9f00      	ldr	r7, [sp, #0]
 8003dc6:	4605      	mov	r5, r0
 8003dc8:	4639      	mov	r1, r7
 8003dca:	4630      	mov	r0, r6
 8003dcc:	f7ff fe8a 	bl	8003ae4 <_malloc_r>
 8003dd0:	b948      	cbnz	r0, 8003de6 <__smakebuf_r+0x46>
 8003dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dd6:	059a      	lsls	r2, r3, #22
 8003dd8:	d4ee      	bmi.n	8003db8 <__smakebuf_r+0x18>
 8003dda:	f023 0303 	bic.w	r3, r3, #3
 8003dde:	f043 0302 	orr.w	r3, r3, #2
 8003de2:	81a3      	strh	r3, [r4, #12]
 8003de4:	e7e2      	b.n	8003dac <__smakebuf_r+0xc>
 8003de6:	89a3      	ldrh	r3, [r4, #12]
 8003de8:	6020      	str	r0, [r4, #0]
 8003dea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dee:	81a3      	strh	r3, [r4, #12]
 8003df0:	9b01      	ldr	r3, [sp, #4]
 8003df2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003df6:	b15b      	cbz	r3, 8003e10 <__smakebuf_r+0x70>
 8003df8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dfc:	4630      	mov	r0, r6
 8003dfe:	f000 f81d 	bl	8003e3c <_isatty_r>
 8003e02:	b128      	cbz	r0, 8003e10 <__smakebuf_r+0x70>
 8003e04:	89a3      	ldrh	r3, [r4, #12]
 8003e06:	f023 0303 	bic.w	r3, r3, #3
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	81a3      	strh	r3, [r4, #12]
 8003e10:	89a3      	ldrh	r3, [r4, #12]
 8003e12:	431d      	orrs	r5, r3
 8003e14:	81a5      	strh	r5, [r4, #12]
 8003e16:	e7cf      	b.n	8003db8 <__smakebuf_r+0x18>

08003e18 <_fstat_r>:
 8003e18:	b538      	push	{r3, r4, r5, lr}
 8003e1a:	4d07      	ldr	r5, [pc, #28]	@ (8003e38 <_fstat_r+0x20>)
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	4604      	mov	r4, r0
 8003e20:	4608      	mov	r0, r1
 8003e22:	4611      	mov	r1, r2
 8003e24:	602b      	str	r3, [r5, #0]
 8003e26:	f7fc ffb3 	bl	8000d90 <_fstat>
 8003e2a:	1c43      	adds	r3, r0, #1
 8003e2c:	d102      	bne.n	8003e34 <_fstat_r+0x1c>
 8003e2e:	682b      	ldr	r3, [r5, #0]
 8003e30:	b103      	cbz	r3, 8003e34 <_fstat_r+0x1c>
 8003e32:	6023      	str	r3, [r4, #0]
 8003e34:	bd38      	pop	{r3, r4, r5, pc}
 8003e36:	bf00      	nop
 8003e38:	200002ac 	.word	0x200002ac

08003e3c <_isatty_r>:
 8003e3c:	b538      	push	{r3, r4, r5, lr}
 8003e3e:	4d06      	ldr	r5, [pc, #24]	@ (8003e58 <_isatty_r+0x1c>)
 8003e40:	2300      	movs	r3, #0
 8003e42:	4604      	mov	r4, r0
 8003e44:	4608      	mov	r0, r1
 8003e46:	602b      	str	r3, [r5, #0]
 8003e48:	f7fc ffb2 	bl	8000db0 <_isatty>
 8003e4c:	1c43      	adds	r3, r0, #1
 8003e4e:	d102      	bne.n	8003e56 <_isatty_r+0x1a>
 8003e50:	682b      	ldr	r3, [r5, #0]
 8003e52:	b103      	cbz	r3, 8003e56 <_isatty_r+0x1a>
 8003e54:	6023      	str	r3, [r4, #0]
 8003e56:	bd38      	pop	{r3, r4, r5, pc}
 8003e58:	200002ac 	.word	0x200002ac

08003e5c <_sbrk_r>:
 8003e5c:	b538      	push	{r3, r4, r5, lr}
 8003e5e:	4d06      	ldr	r5, [pc, #24]	@ (8003e78 <_sbrk_r+0x1c>)
 8003e60:	2300      	movs	r3, #0
 8003e62:	4604      	mov	r4, r0
 8003e64:	4608      	mov	r0, r1
 8003e66:	602b      	str	r3, [r5, #0]
 8003e68:	f7fc ffba 	bl	8000de0 <_sbrk>
 8003e6c:	1c43      	adds	r3, r0, #1
 8003e6e:	d102      	bne.n	8003e76 <_sbrk_r+0x1a>
 8003e70:	682b      	ldr	r3, [r5, #0]
 8003e72:	b103      	cbz	r3, 8003e76 <_sbrk_r+0x1a>
 8003e74:	6023      	str	r3, [r4, #0]
 8003e76:	bd38      	pop	{r3, r4, r5, pc}
 8003e78:	200002ac 	.word	0x200002ac

08003e7c <_init>:
 8003e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7e:	bf00      	nop
 8003e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e82:	bc08      	pop	{r3}
 8003e84:	469e      	mov	lr, r3
 8003e86:	4770      	bx	lr

08003e88 <_fini>:
 8003e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8a:	bf00      	nop
 8003e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e8e:	bc08      	pop	{r3}
 8003e90:	469e      	mov	lr, r3
 8003e92:	4770      	bx	lr
